"""
A feature is a gatekeeper of a functionality.
"""
type Feature implements Node
  @goModel(
    model: "github.com/facebookincubator/symphony/admin/graphql/model.Feature"
  ) {
  """
  The id of the feature.
  """
  id: ID!

  """
  The name of the feature.
  """
  name: String!

  """
  The tenant of the feature.
  """
  tenant: Tenant
}

"""
Ways in which to filter list of features.
"""
input FeatureFilters {
  """
  A List of names to filter the features by.
  """
  names: [String!]
}

extend type Tenant {
  """
  A list of tenant features.
  """
  features(
    """
    Filtering options for features returned.
    """
    filterBy: FeatureFilters
  ): [Feature!]! @goField(forceResolver: true)
}

"""
Input type of createFeature.
"""
input CreateFeatureInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the feature.
  """
  name: String!

  """
  A list of tenants to create the feature for, defaults to all tenants.
  """
  tenants: [ID!] @tenantType
}

"""
Output type of createFeature.
"""
type CreateFeaturePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of created features.
  """
  features: [Feature!]!
}

"""
Input type of deleteFeature.
"""
input DeleteFeatureInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the feature.
  """
  name: String!

  """
  A list of tenants to delete the feature for, defaults to all tenants.
  """
  tenants: [ID!] @tenantType
}

"""
Output type of deleteFeature.
"""
type DeleteFeaturePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

extend type Mutation {
  """
  Create a new feature.
  """
  createFeature(input: CreateFeatureInput!): CreateFeaturePayload

  """
  Delete a feature.
  """
  deleteFeature(input: DeleteFeatureInput!): DeleteFeaturePayload
}
