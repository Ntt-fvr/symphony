// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"database/sql"
	"github.com/facebookincubator/symphony/admin/graphql"
	"github.com/facebookincubator/symphony/pkg/log"
	"github.com/facebookincubator/symphony/pkg/mysql"
	"github.com/facebookincubator/symphony/pkg/server"
	"github.com/facebookincubator/symphony/pkg/server/xserver"
	"github.com/facebookincubator/symphony/pkg/telemetry"
	"go.opencensus.io/stats/view"
	"gocloud.dev/server/health"
	"gocloud.dev/server/health/sqlhealth"
)

// Injectors from wire.go:

func NewApplication(ctx context.Context, flags *cliFlags) (*application, func(), error) {
	config := flags.LogConfig
	logger, cleanup, err := log.ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	zapLogger := log.ProvideZapLogger(logger)
	mysqlConfig := &flags.MySQLConfig
	db, cleanup2 := provideDB(mysqlConfig)
	handlerConfig := graphql.HandlerConfig{
		DB:     db,
		Logger: logger,
	}
	handler, cleanup3, err := graphql.NewHandler(handlerConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	xserverZapLogger := xserver.NewRequestLogger(logger)
	v := provideHealthCheckers(db)
	v2 := provideViews()
	telemetryConfig := &flags.TelemetryConfig
	exporter, err := telemetry.ProvideViewExporter(telemetryConfig)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	traceExporter, cleanup4, err := telemetry.ProvideTraceExporter(telemetryConfig)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	profilingEnabler := _wireProfilingEnablerValue
	sampler := telemetry.ProvideTraceSampler(telemetryConfig)
	handlerFunc := xserver.NewRecoveryHandler(logger)
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         xserverZapLogger,
		HealthChecks:          v,
		Views:                 v2,
		ViewExporter:          exporter,
		TraceExporter:         traceExporter,
		EnableProfiling:       profilingEnabler,
		DefaultSamplingPolicy: sampler,
		RecoveryHandler:       handlerFunc,
		Driver:                defaultDriver,
	}
	serverServer := server.New(handler, options)
	string2 := flags.ListenAddress
	mainApplication := &application{
		Logger: zapLogger,
		server: serverServer,
		addr:   string2,
	}
	return mainApplication, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireProfilingEnablerValue = server.ProfilingEnabler(true)
	_wireDefaultDriverValue    = &server.DefaultDriver{}
)

// wire.go:

func provideDB(cfg *mysql.Config) (*sql.DB, func()) {
	db, cleanup := mysql.Provider(cfg)
	db.SetMaxOpenConns(1)
	return db, cleanup
}

func provideHealthCheckers(db *sql.DB) []health.Checker {
	return []health.Checker{sqlhealth.New(db)}
}

func provideViews() []*view.View {
	views := xserver.DefaultViews()
	views = append(views, mysql.DefaultViews...)
	return views
}
