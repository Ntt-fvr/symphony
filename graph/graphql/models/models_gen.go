// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/facebookincubator/symphony/pkg/actions/core"
	models1 "github.com/facebookincubator/symphony/pkg/authz/models"
	"github.com/facebookincubator/symphony/pkg/ent"
	"github.com/facebookincubator/symphony/pkg/ent/activity"
	"github.com/facebookincubator/symphony/pkg/ent/checklistitem"
	"github.com/facebookincubator/symphony/pkg/ent/file"
	"github.com/facebookincubator/symphony/pkg/ent/project"
	"github.com/facebookincubator/symphony/pkg/ent/schema/enum"
	"github.com/facebookincubator/symphony/pkg/ent/service"
	"github.com/facebookincubator/symphony/pkg/ent/servicetype"
	"github.com/facebookincubator/symphony/pkg/ent/surveycellscan"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/usersgroup"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
	"github.com/facebookincubator/symphony/pkg/exporter/models"
)

type BlockType interface {
	IsBlockType()
}

type NamedNode interface {
	IsNamedNode()
}

type ActionsAction struct {
	ActionID    core.ActionID `json:"actionID"`
	Description string        `json:"description"`
	DataType    core.DataType `json:"dataType"`
}

type ActionsFilter struct {
	FilterID           string             `json:"filterID"`
	Description        string             `json:"description"`
	SupportedOperators []*ActionsOperator `json:"supportedOperators"`
}

type ActionsOperator struct {
	OperatorID  string        `json:"operatorID"`
	Description string        `json:"description"`
	DataType    core.DataType `json:"dataType"`
}

type ActionsRuleActionInput struct {
	ActionID core.ActionID `json:"actionID"`
	Data     string        `json:"data"`
}

type ActionsRuleFilterInput struct {
	FilterID   string `json:"filterID"`
	OperatorID string `json:"operatorID"`
	Data       string `json:"data"`
}

type ActionsRulesSearchResult struct {
	Results []*ent.ActionsRule `json:"results"`
	Count   int                `json:"count"`
}

type ActionsTrigger struct {
	ID               int              `json:"id"`
	TriggerID        core.TriggerID   `json:"triggerID"`
	Description      string           `json:"description"`
	SupportedActions []*ActionsAction `json:"supportedActions"`
	SupportedFilters []*ActionsFilter `json:"supportedFilters"`
}

type ActionsTriggersSearchResult struct {
	Results []*ActionsTrigger `json:"results"`
	Count   int               `json:"count"`
}

type AddActionsRuleInput struct {
	Name        string                    `json:"name"`
	TriggerID   core.TriggerID            `json:"triggerID"`
	RuleActions []*ActionsRuleActionInput `json:"ruleActions"`
	RuleFilters []*ActionsRuleFilterInput `json:"ruleFilters"`
}

type AddCustomerInput struct {
	Name       string  `json:"name"`
	ExternalID *string `json:"externalId"`
}

type AddEndBlockInput struct {
	FlowDraftID int    `json:"flowDraftId"`
	Name        string `json:"name"`
}

type AddEquipmentInput struct {
	Name               string           `json:"name"`
	Type               int              `json:"type"`
	Location           *int             `json:"location"`
	Parent             *int             `json:"parent"`
	PositionDefinition *int             `json:"positionDefinition"`
	Properties         []*PropertyInput `json:"properties"`
	WorkOrder          *int             `json:"workOrder"`
	ExternalID         *string          `json:"externalId"`
}

type AddEquipmentPortTypeInput struct {
	Name           string                      `json:"name"`
	Properties     []*models.PropertyTypeInput `json:"properties"`
	LinkProperties []*models.PropertyTypeInput `json:"linkProperties"`
}

type AddEquipmentTypeInput struct {
	Name       string                      `json:"name"`
	Category   *string                     `json:"category"`
	Positions  []*EquipmentPositionInput   `json:"positions"`
	Ports      []*EquipmentPortInput       `json:"ports"`
	Properties []*models.PropertyTypeInput `json:"properties"`
}

type AddFloorPlanInput struct {
	Name             string         `json:"name"`
	LocationID       int            `json:"locationID"`
	Image            *AddImageInput `json:"image"`
	ReferenceX       int            `json:"referenceX"`
	ReferenceY       int            `json:"referenceY"`
	Latitude         float64        `json:"latitude"`
	Longitude        float64        `json:"longitude"`
	ReferencePoint1x int            `json:"referencePoint1X"`
	ReferencePoint1y int            `json:"referencePoint1Y"`
	ReferencePoint2x int            `json:"referencePoint2X"`
	ReferencePoint2y int            `json:"referencePoint2Y"`
	ScaleInMeters    float64        `json:"scaleInMeters"`
}

type AddFlowDraftInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

type AddGotoBlockInput struct {
	FlowDraftID int    `json:"flowDraftId"`
	Name        string `json:"name"`
	NextBlockID int    `json:"nextBlockId"`
}

type AddHyperlinkInput struct {
	EntityType  ImageEntity `json:"entityType"`
	EntityID    int         `json:"entityId"`
	URL         string      `json:"url"`
	DisplayName *string     `json:"displayName"`
	Category    *string     `json:"category"`
}

type AddImageInput struct {
	EntityType  ImageEntity `json:"entityType"`
	EntityID    int         `json:"entityId"`
	ImgKey      string      `json:"imgKey"`
	FileName    string      `json:"fileName"`
	FileSize    int         `json:"fileSize"`
	Modified    time.Time   `json:"modified"`
	ContentType string      `json:"contentType"`
	Category    *string     `json:"category"`
	Annotation  *string     `json:"annotation"`
}

type AddLinkInput struct {
	Sides      []*LinkSide      `json:"sides"`
	WorkOrder  *int             `json:"workOrder"`
	Properties []*PropertyInput `json:"properties"`
	ServiceIds []int            `json:"serviceIds"`
}

type AddLocationInput struct {
	Name       string           `json:"name"`
	Type       int              `json:"type"`
	Parent     *int             `json:"parent"`
	Latitude   *float64         `json:"latitude"`
	Longitude  *float64         `json:"longitude"`
	Properties []*PropertyInput `json:"properties"`
	ExternalID *string          `json:"externalID"`
}

type AddLocationTypeInput struct {
	Name                     string                         `json:"name"`
	MapType                  *string                        `json:"mapType"`
	MapZoomLevel             *int                           `json:"mapZoomLevel"`
	IsSite                   *bool                          `json:"isSite"`
	Properties               []*models.PropertyTypeInput    `json:"properties"`
	SurveyTemplateCategories []*SurveyTemplateCategoryInput `json:"surveyTemplateCategories"`
}

type AddPermissionsPolicyInput struct {
	Name           string                        `json:"name"`
	Description    *string                       `json:"description"`
	IsGlobal       *bool                         `json:"isGlobal"`
	InventoryInput *models1.InventoryPolicyInput `json:"inventoryInput"`
	WorkforceInput *models1.WorkforcePolicyInput `json:"workforceInput"`
	Groups         []int                         `json:"groups"`
}

type AddProjectInput struct {
	Name        string            `json:"name"`
	Description *string           `json:"description"`
	Priority    *project.Priority `json:"priority"`
	CreatorID   *int              `json:"creatorId"`
	Type        int               `json:"type"`
	Location    *int              `json:"location"`
	Properties  []*PropertyInput  `json:"properties"`
}

type AddProjectTypeInput struct {
	Name        string                      `json:"name"`
	Description *string                     `json:"description"`
	Properties  []*models.PropertyTypeInput `json:"properties"`
	WorkOrders  []*WorkOrderDefinitionInput `json:"workOrders"`
}

type AddServiceEndpointInput struct {
	ID          int  `json:"id"`
	PortID      *int `json:"portId"`
	EquipmentID int  `json:"equipmentID"`
	Definition  int  `json:"definition"`
}

type AddStartBlockInput struct {
	FlowDraftID int    `json:"flowDraftId"`
	Name        string `json:"name"`
}

type AddUsersGroupInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Members     []int   `json:"members"`
	Policies    []int   `json:"policies"`
}

type AddWorkOrderInput struct {
	Name                string                    `json:"name"`
	Description         *string                   `json:"description"`
	WorkOrderTypeID     int                       `json:"workOrderTypeId"`
	LocationID          *int                      `json:"locationId"`
	ProjectID           *int                      `json:"projectId"`
	Properties          []*PropertyInput          `json:"properties"`
	CheckList           []*CheckListItemInput     `json:"checkList"`
	OwnerID             *int                      `json:"ownerId"`
	CheckListCategories []*CheckListCategoryInput `json:"checkListCategories"`
	AssigneeID          *int                      `json:"assigneeId"`
	Index               *int                      `json:"index"`
	Status              *workorder.Status         `json:"status"`
	Priority            *workorder.Priority       `json:"priority"`
}

type AddWorkOrderTypeInput struct {
	Name                         string                              `json:"name"`
	Description                  *string                             `json:"description"`
	Properties                   []*models.PropertyTypeInput         `json:"properties"`
	CheckListCategories          []*CheckListCategoryDefinitionInput `json:"checkListCategories"`
	AssigneeCanCompleteWorkOrder *bool                               `json:"assigneeCanCompleteWorkOrder"`
}

type CheckListCategoryDefinitionInput struct {
	ID          *int                        `json:"id"`
	Title       string                      `json:"title"`
	Description *string                     `json:"description"`
	CheckList   []*CheckListDefinitionInput `json:"checkList"`
}

type CheckListCategoryInput struct {
	ID          *int                  `json:"id"`
	Title       string                `json:"title"`
	Description *string               `json:"description"`
	CheckList   []*CheckListItemInput `json:"checkList"`
}

type CheckListDefinitionInput struct {
	ID                *int                                 `json:"id"`
	Title             string                               `json:"title"`
	Type              enum.CheckListItemType               `json:"type"`
	Index             *int                                 `json:"index"`
	IsMandatory       *bool                                `json:"isMandatory"`
	EnumValues        *string                              `json:"enumValues"`
	EnumSelectionMode *enum.CheckListItemEnumSelectionMode `json:"enumSelectionMode"`
	HelpText          *string                              `json:"helpText"`
}

type CheckListItemInput struct {
	ID                 *int                                 `json:"id"`
	Title              string                               `json:"title"`
	Type               enum.CheckListItemType               `json:"type"`
	Index              *int                                 `json:"index"`
	IsMandatory        *bool                                `json:"isMandatory"`
	HelpText           *string                              `json:"helpText"`
	EnumValues         *string                              `json:"enumValues"`
	EnumSelectionMode  *enum.CheckListItemEnumSelectionMode `json:"enumSelectionMode"`
	SelectedEnumValues *string                              `json:"selectedEnumValues"`
	StringValue        *string                              `json:"stringValue"`
	Checked            *bool                                `json:"checked"`
	Files              []*FileInput                         `json:"files"`
	YesNoResponse      *checklistitem.YesNoVal              `json:"yesNoResponse"`
	WifiData           []*SurveyWiFiScanData                `json:"wifiData"`
	CellData           []*SurveyCellScanData                `json:"cellData"`
}

type CommentInput struct {
	EntityType CommentEntity `json:"entityType"`
	ID         int           `json:"id"`
	Text       string        `json:"text"`
}

type ConnectorInput struct {
	BlockID     int `json:"blockId"`
	NextBlockID int `json:"nextBlockId"`
}

type Coordinates struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type Device struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Up   *bool  `json:"up"`
}

type EditEquipmentInput struct {
	ID         int              `json:"id"`
	Name       string           `json:"name"`
	Properties []*PropertyInput `json:"properties"`
	DeviceID   *string          `json:"deviceID"`
	ExternalID *string          `json:"externalId"`
}

type EditEquipmentPortInput struct {
	Side       *LinkSide        `json:"side"`
	Properties []*PropertyInput `json:"properties"`
}

type EditEquipmentPortTypeInput struct {
	ID             int                         `json:"id"`
	Name           string                      `json:"name"`
	Properties     []*models.PropertyTypeInput `json:"properties"`
	LinkProperties []*models.PropertyTypeInput `json:"linkProperties"`
}

type EditEquipmentTypeInput struct {
	ID         int                         `json:"id"`
	Name       string                      `json:"name"`
	Category   *string                     `json:"category"`
	Positions  []*EquipmentPositionInput   `json:"positions"`
	Ports      []*EquipmentPortInput       `json:"ports"`
	Properties []*models.PropertyTypeInput `json:"properties"`
}

type EditLinkInput struct {
	ID         int              `json:"id"`
	Properties []*PropertyInput `json:"properties"`
	ServiceIds []int            `json:"serviceIds"`
}

type EditLocationInput struct {
	ID         int              `json:"id"`
	Name       string           `json:"name"`
	Latitude   float64          `json:"latitude"`
	Longitude  float64          `json:"longitude"`
	Properties []*PropertyInput `json:"properties"`
	ExternalID *string          `json:"externalID"`
}

type EditLocationTypeInput struct {
	ID           int                         `json:"id"`
	Name         string                      `json:"name"`
	MapType      *string                     `json:"mapType"`
	MapZoomLevel *int                        `json:"mapZoomLevel"`
	IsSite       *bool                       `json:"isSite"`
	Properties   []*models.PropertyTypeInput `json:"properties"`
}

type EditPermissionsPolicyInput struct {
	ID             int                           `json:"id"`
	Name           *string                       `json:"name"`
	Description    *string                       `json:"description"`
	IsGlobal       *bool                         `json:"isGlobal"`
	InventoryInput *models1.InventoryPolicyInput `json:"inventoryInput"`
	WorkforceInput *models1.WorkforcePolicyInput `json:"workforceInput"`
	Groups         []int                         `json:"groups"`
}

type EditProjectInput struct {
	ID          int               `json:"id"`
	Name        string            `json:"name"`
	Description *string           `json:"description"`
	Priority    *project.Priority `json:"priority"`
	CreatorID   *int              `json:"creatorId"`
	Type        int               `json:"type"`
	Location    *int              `json:"location"`
	Properties  []*PropertyInput  `json:"properties"`
}

type EditProjectTypeInput struct {
	ID          int                         `json:"id"`
	Name        string                      `json:"name"`
	Description *string                     `json:"description"`
	Properties  []*models.PropertyTypeInput `json:"properties"`
	WorkOrders  []*WorkOrderDefinitionInput `json:"workOrders"`
}

type EditReportFilterInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditUserInput struct {
	ID           int                `json:"id"`
	FirstName    *string            `json:"firstName"`
	LastName     *string            `json:"lastName"`
	Status       *user.Status       `json:"status"`
	Role         *user.Role         `json:"role"`
	DistanceUnit *user.DistanceUnit `json:"distanceUnit"`
}

type EditUsersGroupInput struct {
	ID          int                `json:"id"`
	Name        *string            `json:"name"`
	Description *string            `json:"description"`
	Status      *usersgroup.Status `json:"status"`
	Members     []int              `json:"members"`
	Policies    []int              `json:"policies"`
}

type EditWorkOrderInput struct {
	ID                  int                       `json:"id"`
	Name                string                    `json:"name"`
	Description         *string                   `json:"description"`
	OwnerID             *int                      `json:"ownerId"`
	InstallDate         *time.Time                `json:"installDate"`
	AssigneeID          *int                      `json:"assigneeId"`
	Index               *int                      `json:"index"`
	Status              *workorder.Status         `json:"status"`
	Priority            *workorder.Priority       `json:"priority"`
	ProjectID           *int                      `json:"projectId"`
	Properties          []*PropertyInput          `json:"properties"`
	CheckList           []*CheckListItemInput     `json:"checkList"`
	CheckListCategories []*CheckListCategoryInput `json:"checkListCategories"`
	LocationID          *int                      `json:"locationId"`
}

type EditWorkOrderTypeInput struct {
	ID                           int                                 `json:"id"`
	Name                         string                              `json:"name"`
	Description                  *string                             `json:"description"`
	Properties                   []*models.PropertyTypeInput         `json:"properties"`
	CheckListCategories          []*CheckListCategoryDefinitionInput `json:"checkListCategories"`
	AssigneeCanCompleteWorkOrder *bool                               `json:"assigneeCanCompleteWorkOrder"`
}

type EndBlock struct {
	Dummy *string `json:"dummy"`
}

func (EndBlock) IsBlockType() {}

type EquipmentPortInput struct {
	ID           *int    `json:"id"`
	Name         string  `json:"name"`
	Index        *int    `json:"index"`
	VisibleLabel *string `json:"visibleLabel"`
	PortTypeID   *int    `json:"portTypeID"`
	Bandwidth    *string `json:"bandwidth"`
}

type EquipmentPositionInput struct {
	ID           *int    `json:"id"`
	Name         string  `json:"name"`
	Index        *int    `json:"index"`
	VisibleLabel *string `json:"visibleLabel"`
}

type FileInput struct {
	ID               *int       `json:"id"`
	FileName         string     `json:"fileName"`
	SizeInBytes      *int       `json:"sizeInBytes"`
	ModificationTime *int       `json:"modificationTime"`
	UploadTime       *int       `json:"uploadTime"`
	FileType         *file.Type `json:"fileType"`
	MimeType         *string    `json:"mimeType"`
	StoreKey         string     `json:"storeKey"`
	Annotation       *string    `json:"annotation"`
}

type GeneralFilter struct {
	FilterType    string              `json:"filterType"`
	Key           string              `json:"key"`
	Operator      enum.FilterOperator `json:"operator"`
	StringValue   *string             `json:"stringValue"`
	IDSet         []int               `json:"idSet"`
	StringSet     []string            `json:"stringSet"`
	BoolValue     *bool               `json:"boolValue"`
	PropertyValue *ent.PropertyType   `json:"propertyValue"`
}

type GeneralFilterInput struct {
	FilterType    string                    `json:"filterType"`
	Key           string                    `json:"key"`
	Operator      enum.FilterOperator       `json:"operator"`
	StringValue   *string                   `json:"stringValue"`
	IDSet         []int                     `json:"idSet"`
	StringSet     []string                  `json:"stringSet"`
	BoolValue     *bool                     `json:"boolValue"`
	PropertyValue *models.PropertyTypeInput `json:"propertyValue"`
}

type GotoBlock struct {
	GotoBlock *ent.Block `json:"gotoBlock"`
}

func (GotoBlock) IsBlockType() {}

type LatestPythonPackageResult struct {
	LastPythonPackage         *PythonPackage `json:"lastPythonPackage"`
	LastBreakingPythonPackage *PythonPackage `json:"lastBreakingPythonPackage"`
}

type LinkFilterInput struct {
	FilterType    LinkFilterType            `json:"filterType"`
	Operator      enum.FilterOperator       `json:"operator"`
	StringValue   *string                   `json:"stringValue"`
	PropertyValue *models.PropertyTypeInput `json:"propertyValue"`
	IDSet         []int                     `json:"idSet"`
	StringSet     []string                  `json:"stringSet"`
	MaxDepth      *int                      `json:"maxDepth"`
}

type LinkSearchResult struct {
	Links []*ent.Link `json:"links"`
	Count int         `json:"count"`
}

type LinkSide struct {
	Equipment int `json:"equipment"`
	Port      int `json:"port"`
}

type LocationTypeIndex struct {
	LocationTypeID int `json:"locationTypeID"`
	Index          int `json:"index"`
}

type NetworkTopology struct {
	Nodes []ent.Noder     `json:"nodes"`
	Links []*TopologyLink `json:"links"`
}

type PermissionsPolicyFilterInput struct {
	FilterType  PermissionsPolicyFilterType `json:"filterType"`
	Operator    enum.FilterOperator         `json:"operator"`
	StringValue *string                     `json:"stringValue"`
	MaxDepth    *int                        `json:"maxDepth"`
}

type PermissionsPolicySearchResult struct {
	PermissionsPolicies []*ent.PermissionsPolicy `json:"permissionsPolicies"`
	Count               int                      `json:"count"`
}

type PortFilterInput struct {
	FilterType    PortFilterType            `json:"filterType"`
	Operator      enum.FilterOperator       `json:"operator"`
	BoolValue     *bool                     `json:"boolValue"`
	StringValue   *string                   `json:"stringValue"`
	PropertyValue *models.PropertyTypeInput `json:"propertyValue"`
	IDSet         []int                     `json:"idSet"`
	StringSet     []string                  `json:"stringSet"`
	MaxDepth      *int                      `json:"maxDepth"`
}

type PortSearchResult struct {
	Ports []*ent.EquipmentPort `json:"ports"`
	Count int                  `json:"count"`
}

type ProjectFilterInput struct {
	FilterType  ProjectFilterType   `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
}

type PropertyInput struct {
	ID                 *int     `json:"id"`
	PropertyTypeID     int      `json:"propertyTypeID"`
	StringValue        *string  `json:"stringValue"`
	IntValue           *int     `json:"intValue"`
	BooleanValue       *bool    `json:"booleanValue"`
	FloatValue         *float64 `json:"floatValue"`
	LatitudeValue      *float64 `json:"latitudeValue"`
	LongitudeValue     *float64 `json:"longitudeValue"`
	RangeFromValue     *float64 `json:"rangeFromValue"`
	RangeToValue       *float64 `json:"rangeToValue"`
	NodeIDValue        *int     `json:"nodeIDValue"`
	IsEditable         *bool    `json:"isEditable"`
	IsInstanceProperty *bool    `json:"isInstanceProperty"`
}

type PythonPackage struct {
	Version           string    `json:"version"`
	WhlFileKey        string    `json:"whlFileKey"`
	UploadTime        time.Time `json:"uploadTime"`
	HasBreakingChange bool      `json:"hasBreakingChange"`
}

type ReportFilterInput struct {
	Name    string                `json:"name"`
	Entity  FilterEntity          `json:"entity"`
	Filters []*GeneralFilterInput `json:"filters"`
}

type SearchEntry struct {
	EntityID   int     `json:"entityId"`
	EntityType string  `json:"entityType"`
	Name       string  `json:"name"`
	Type       string  `json:"type"`
	ExternalID *string `json:"externalId"`
}

// A search node edge in a connection.
type SearchNodeEdge struct {
	// The search node at the end of the edge.
	Node ent.Noder `json:"node"`
	// A cursor for use in pagination.
	Cursor ent.Cursor `json:"cursor"`
}

// A connection to a list of search nodes.
type SearchNodesConnection struct {
	// Total count of search nodes in all pages.
	TotalCount int `json:"totalCount"`
	// A list of search node edges.
	Edges []*SearchNodeEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo *ent.PageInfo `json:"pageInfo"`
}

type ServiceCreateData struct {
	Name               string           `json:"name"`
	ExternalID         *string          `json:"externalId"`
	Status             service.Status   `json:"status"`
	ServiceTypeID      int              `json:"serviceTypeId"`
	CustomerID         *int             `json:"customerId"`
	UpstreamServiceIds []int            `json:"upstreamServiceIds"`
	Properties         []*PropertyInput `json:"properties"`
}

type ServiceEditData struct {
	ID                 int              `json:"id"`
	Name               *string          `json:"name"`
	ExternalID         *string          `json:"externalId"`
	Status             *service.Status  `json:"status"`
	CustomerID         *int             `json:"customerId"`
	UpstreamServiceIds []int            `json:"upstreamServiceIds"`
	Properties         []*PropertyInput `json:"properties"`
}

type ServiceEndpointDefinitionInput struct {
	ID              *int    `json:"id"`
	Name            string  `json:"name"`
	Role            *string `json:"role"`
	Index           int     `json:"index"`
	EquipmentTypeID int     `json:"equipmentTypeID"`
}

type ServiceFilterInput struct {
	FilterType    ServiceFilterType         `json:"filterType"`
	Operator      enum.FilterOperator       `json:"operator"`
	StringValue   *string                   `json:"stringValue"`
	PropertyValue *models.PropertyTypeInput `json:"propertyValue"`
	IDSet         []int                     `json:"idSet"`
	StringSet     []string                  `json:"stringSet"`
	MaxDepth      *int                      `json:"maxDepth"`
}

type ServiceSearchResult struct {
	Services []*ent.Service `json:"services"`
	Count    int            `json:"count"`
}

type ServiceTypeCreateData struct {
	Name            string                            `json:"name"`
	HasCustomer     bool                              `json:"hasCustomer"`
	Properties      []*models.PropertyTypeInput       `json:"properties"`
	Endpoints       []*ServiceEndpointDefinitionInput `json:"endpoints"`
	DiscoveryMethod *servicetype.DiscoveryMethod      `json:"discoveryMethod"`
}

type ServiceTypeEditData struct {
	ID          int                               `json:"id"`
	Name        string                            `json:"name"`
	HasCustomer bool                              `json:"hasCustomer"`
	Properties  []*models.PropertyTypeInput       `json:"properties"`
	Endpoints   []*ServiceEndpointDefinitionInput `json:"endpoints"`
}

type StartBlock struct {
	Dummy *string `json:"dummy"`
}

func (StartBlock) IsBlockType() {}

type SurveyCellScanData struct {
	NetworkType           surveycellscan.NetworkType `json:"networkType"`
	SignalStrength        int                        `json:"signalStrength"`
	Timestamp             *int                       `json:"timestamp"`
	BaseStationID         *string                    `json:"baseStationID"`
	NetworkID             *string                    `json:"networkID"`
	SystemID              *string                    `json:"systemID"`
	CellID                *string                    `json:"cellID"`
	LocationAreaCode      *string                    `json:"locationAreaCode"`
	MobileCountryCode     *string                    `json:"mobileCountryCode"`
	MobileNetworkCode     *string                    `json:"mobileNetworkCode"`
	PrimaryScramblingCode *string                    `json:"primaryScramblingCode"`
	Operator              *string                    `json:"operator"`
	Arfcn                 *int                       `json:"arfcn"`
	PhysicalCellID        *string                    `json:"physicalCellID"`
	TrackingAreaCode      *string                    `json:"trackingAreaCode"`
	TimingAdvance         *int                       `json:"timingAdvance"`
	Earfcn                *int                       `json:"earfcn"`
	Uarfcn                *int                       `json:"uarfcn"`
	Latitude              *float64                   `json:"latitude"`
	Longitude             *float64                   `json:"longitude"`
	Altitude              *float64                   `json:"altitude"`
	Heading               *float64                   `json:"heading"`
	Rssi                  *float64                   `json:"rssi"`
}

type SurveyCreateData struct {
	Name                string                    `json:"name"`
	OwnerName           *string                   `json:"ownerName"`
	CreationTimestamp   *int                      `json:"creationTimestamp"`
	CompletionTimestamp int                       `json:"completionTimestamp"`
	Status              *SurveyStatus             `json:"status"`
	LocationID          int                       `json:"locationID"`
	SurveyResponses     []*SurveyQuestionResponse `json:"surveyResponses"`
}

type SurveyQuestionResponse struct {
	FormName         *string               `json:"formName"`
	FormDescription  *string               `json:"formDescription"`
	FormIndex        int                   `json:"formIndex"`
	QuestionFormat   *SurveyQuestionType   `json:"questionFormat"`
	QuestionText     string                `json:"questionText"`
	QuestionIndex    int                   `json:"questionIndex"`
	BoolData         *bool                 `json:"boolData"`
	EmailData        *string               `json:"emailData"`
	Latitude         *float64              `json:"latitude"`
	Longitude        *float64              `json:"longitude"`
	LocationAccuracy *float64              `json:"locationAccuracy"`
	Altitude         *float64              `json:"altitude"`
	PhoneData        *string               `json:"phoneData"`
	TextData         *string               `json:"textData"`
	FloatData        *float64              `json:"floatData"`
	IntData          *int                  `json:"intData"`
	DateData         *int                  `json:"dateData"`
	PhotoData        *FileInput            `json:"photoData"`
	WifiData         []*SurveyWiFiScanData `json:"wifiData"`
	CellData         []*SurveyCellScanData `json:"cellData"`
	ImagesData       []*FileInput          `json:"imagesData"`
}

type SurveyTemplateCategoryInput struct {
	ID                      *int                           `json:"id"`
	CategoryTitle           string                         `json:"categoryTitle"`
	CategoryDescription     string                         `json:"categoryDescription"`
	SurveyTemplateQuestions []*SurveyTemplateQuestionInput `json:"surveyTemplateQuestions"`
}

type SurveyTemplateQuestionInput struct {
	ID                  *int               `json:"id"`
	QuestionTitle       string             `json:"questionTitle"`
	QuestionDescription string             `json:"questionDescription"`
	QuestionType        SurveyQuestionType `json:"questionType"`
	Index               int                `json:"index"`
}

type SurveyWiFiScanData struct {
	Timestamp    int      `json:"timestamp"`
	Frequency    int      `json:"frequency"`
	Channel      int      `json:"channel"`
	Bssid        string   `json:"bssid"`
	Strength     int      `json:"strength"`
	Ssid         *string  `json:"ssid"`
	Band         *string  `json:"band"`
	ChannelWidth *int     `json:"channelWidth"`
	Capabilities *string  `json:"capabilities"`
	Latitude     *float64 `json:"latitude"`
	Longitude    *float64 `json:"longitude"`
	Altitude     *float64 `json:"altitude"`
	Heading      *float64 `json:"heading"`
	Rssi         *float64 `json:"rssi"`
}

type TechnicianCheckListItemInput struct {
	ID                 int                     `json:"id"`
	SelectedEnumValues *string                 `json:"selectedEnumValues"`
	StringValue        *string                 `json:"stringValue"`
	Checked            *bool                   `json:"checked"`
	YesNoResponse      *checklistitem.YesNoVal `json:"yesNoResponse"`
	WifiData           []*SurveyWiFiScanData   `json:"wifiData"`
	CellData           []*SurveyCellScanData   `json:"cellData"`
	FilesData          []*FileInput            `json:"filesData"`
}

type TechnicianWorkOrderCheckInInput struct {
	DistanceMeters *float64 `json:"distanceMeters"`
}

type TechnicianWorkOrderCheckOutInput struct {
	WorkOrderID         int                       `json:"workOrderId"`
	Reason              activity.ClockOutReason   `json:"reason"`
	CheckListCategories []*CheckListCategoryInput `json:"checkListCategories"`
	Comment             *string                   `json:"comment"`
	DistanceMeters      *float64                  `json:"distanceMeters"`
}

type TechnicianWorkOrderUploadInput struct {
	WorkOrderID         int                             `json:"workOrderId"`
	Checklist           []*TechnicianCheckListItemInput `json:"checklist"`
	CheckListCategories []*CheckListCategoryInput       `json:"checkListCategories"`
}

type TopologyLink struct {
	Type   TopologyLinkType `json:"type"`
	Source ent.Noder        `json:"source"`
	Target ent.Noder        `json:"target"`
}

type UpdateUserGroupsInput struct {
	ID             int   `json:"id"`
	AddGroupIds    []int `json:"addGroupIds"`
	RemoveGroupIds []int `json:"removeGroupIds"`
}

type UserFilterInput struct {
	FilterType    UserFilterType            `json:"filterType"`
	Operator      enum.FilterOperator       `json:"operator"`
	StringValue   *string                   `json:"stringValue"`
	PropertyValue *models.PropertyTypeInput `json:"propertyValue"`
	StatusValue   *user.Status              `json:"statusValue"`
	IDSet         []int                     `json:"idSet"`
	StringSet     []string                  `json:"stringSet"`
	MaxDepth      *int                      `json:"maxDepth"`
}

type UserSearchResult struct {
	Users []*ent.User `json:"users"`
	Count int         `json:"count"`
}

type UsersGroupFilterInput struct {
	FilterType  UsersGroupFilterType `json:"filterType"`
	Operator    enum.FilterOperator  `json:"operator"`
	StringValue *string              `json:"stringValue"`
	MaxDepth    *int                 `json:"maxDepth"`
}

type UsersGroupSearchResult struct {
	UsersGroups []*ent.UsersGroup `json:"usersGroups"`
	Count       int               `json:"count"`
}

type WorkOrderDefinitionInput struct {
	ID    *int `json:"id"`
	Index *int `json:"index"`
	Type  int  `json:"type"`
}

type WorkOrderExecutionResult struct {
	ID               int              `json:"id"`
	Name             string           `json:"name"`
	EquipmentAdded   []*ent.Equipment `json:"equipmentAdded"`
	EquipmentRemoved []int            `json:"equipmentRemoved"`
	LinkAdded        []*ent.Link      `json:"linkAdded"`
	LinkRemoved      []int            `json:"linkRemoved"`
}

type WorkOrderFilterInput struct {
	FilterType    WorkOrderFilterType       `json:"filterType"`
	Operator      enum.FilterOperator       `json:"operator"`
	StringValue   *string                   `json:"stringValue"`
	IDSet         []int                     `json:"idSet"`
	StringSet     []string                  `json:"stringSet"`
	PropertyValue *models.PropertyTypeInput `json:"propertyValue"`
	TimeValue     *time.Time                `json:"timeValue"`
	MaxDepth      *int                      `json:"maxDepth"`
}

type WorkOrderSearchResult struct {
	WorkOrders []*ent.WorkOrder `json:"workOrders"`
	Count      int              `json:"count"`
}

type CommentEntity string

const (
	CommentEntityWorkOrder CommentEntity = "WORK_ORDER"
	CommentEntityProject   CommentEntity = "PROJECT"
)

var AllCommentEntity = []CommentEntity{
	CommentEntityWorkOrder,
	CommentEntityProject,
}

func (e CommentEntity) IsValid() bool {
	switch e {
	case CommentEntityWorkOrder, CommentEntityProject:
		return true
	}
	return false
}

func (e CommentEntity) String() string {
	return string(e)
}

func (e *CommentEntity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentEntity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentEntity", str)
	}
	return nil
}

func (e CommentEntity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FilterEntity string

const (
	FilterEntityWorkOrder FilterEntity = "WORK_ORDER"
	FilterEntityPort      FilterEntity = "PORT"
	FilterEntityEquipment FilterEntity = "EQUIPMENT"
	FilterEntityLink      FilterEntity = "LINK"
	FilterEntityLocation  FilterEntity = "LOCATION"
	FilterEntityService   FilterEntity = "SERVICE"
)

var AllFilterEntity = []FilterEntity{
	FilterEntityWorkOrder,
	FilterEntityPort,
	FilterEntityEquipment,
	FilterEntityLink,
	FilterEntityLocation,
	FilterEntityService,
}

func (e FilterEntity) IsValid() bool {
	switch e {
	case FilterEntityWorkOrder, FilterEntityPort, FilterEntityEquipment, FilterEntityLink, FilterEntityLocation, FilterEntityService:
		return true
	}
	return false
}

func (e FilterEntity) String() string {
	return string(e)
}

func (e *FilterEntity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilterEntity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilterEntity", str)
	}
	return nil
}

func (e FilterEntity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageEntity string

const (
	ImageEntityLocation      ImageEntity = "LOCATION"
	ImageEntityWorkOrder     ImageEntity = "WORK_ORDER"
	ImageEntitySiteSurvey    ImageEntity = "SITE_SURVEY"
	ImageEntityEquipment     ImageEntity = "EQUIPMENT"
	ImageEntityUser          ImageEntity = "USER"
	ImageEntityChecklistItem ImageEntity = "CHECKLIST_ITEM"
)

var AllImageEntity = []ImageEntity{
	ImageEntityLocation,
	ImageEntityWorkOrder,
	ImageEntitySiteSurvey,
	ImageEntityEquipment,
	ImageEntityUser,
	ImageEntityChecklistItem,
}

func (e ImageEntity) IsValid() bool {
	switch e {
	case ImageEntityLocation, ImageEntityWorkOrder, ImageEntitySiteSurvey, ImageEntityEquipment, ImageEntityUser, ImageEntityChecklistItem:
		return true
	}
	return false
}

func (e ImageEntity) String() string {
	return string(e)
}

func (e *ImageEntity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageEntity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageEntity", str)
	}
	return nil
}

func (e ImageEntity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what filters should we apply on links
type LinkFilterType string

const (
	LinkFilterTypeLinkFutureStatus       LinkFilterType = "LINK_FUTURE_STATUS"
	LinkFilterTypeEquipmentType          LinkFilterType = "EQUIPMENT_TYPE"
	LinkFilterTypeLocationInst           LinkFilterType = "LOCATION_INST"
	LinkFilterTypeLocationInstExternalID LinkFilterType = "LOCATION_INST_EXTERNAL_ID"
	LinkFilterTypeProperty               LinkFilterType = "PROPERTY"
	LinkFilterTypeServiceInst            LinkFilterType = "SERVICE_INST"
	LinkFilterTypeEquipmentInst          LinkFilterType = "EQUIPMENT_INST"
)

var AllLinkFilterType = []LinkFilterType{
	LinkFilterTypeLinkFutureStatus,
	LinkFilterTypeEquipmentType,
	LinkFilterTypeLocationInst,
	LinkFilterTypeLocationInstExternalID,
	LinkFilterTypeProperty,
	LinkFilterTypeServiceInst,
	LinkFilterTypeEquipmentInst,
}

func (e LinkFilterType) IsValid() bool {
	switch e {
	case LinkFilterTypeLinkFutureStatus, LinkFilterTypeEquipmentType, LinkFilterTypeLocationInst, LinkFilterTypeLocationInstExternalID, LinkFilterTypeProperty, LinkFilterTypeServiceInst, LinkFilterTypeEquipmentInst:
		return true
	}
	return false
}

func (e LinkFilterType) String() string {
	return string(e)
}

func (e *LinkFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LinkFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LinkFilterType", str)
	}
	return nil
}

func (e LinkFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what filters should we apply on permissionsPolicy
type PermissionsPolicyFilterType string

const (
	PermissionsPolicyFilterTypePermissionsPolicyName PermissionsPolicyFilterType = "PERMISSIONS_POLICY_NAME"
)

var AllPermissionsPolicyFilterType = []PermissionsPolicyFilterType{
	PermissionsPolicyFilterTypePermissionsPolicyName,
}

func (e PermissionsPolicyFilterType) IsValid() bool {
	switch e {
	case PermissionsPolicyFilterTypePermissionsPolicyName:
		return true
	}
	return false
}

func (e PermissionsPolicyFilterType) String() string {
	return string(e)
}

func (e *PermissionsPolicyFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionsPolicyFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionsPolicyFilterType", str)
	}
	return nil
}

func (e PermissionsPolicyFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what filters should we apply on ports
type PortFilterType string

const (
	PortFilterTypePortDef                PortFilterType = "PORT_DEF"
	PortFilterTypePortInstHasLink        PortFilterType = "PORT_INST_HAS_LINK"
	PortFilterTypePortInstEquipment      PortFilterType = "PORT_INST_EQUIPMENT"
	PortFilterTypeLocationInst           PortFilterType = "LOCATION_INST"
	PortFilterTypeLocationInstExternalID PortFilterType = "LOCATION_INST_EXTERNAL_ID"
	PortFilterTypeProperty               PortFilterType = "PROPERTY"
	PortFilterTypeServiceInst            PortFilterType = "SERVICE_INST"
)

var AllPortFilterType = []PortFilterType{
	PortFilterTypePortDef,
	PortFilterTypePortInstHasLink,
	PortFilterTypePortInstEquipment,
	PortFilterTypeLocationInst,
	PortFilterTypeLocationInstExternalID,
	PortFilterTypeProperty,
	PortFilterTypeServiceInst,
}

func (e PortFilterType) IsValid() bool {
	switch e {
	case PortFilterTypePortDef, PortFilterTypePortInstHasLink, PortFilterTypePortInstEquipment, PortFilterTypeLocationInst, PortFilterTypeLocationInstExternalID, PortFilterTypeProperty, PortFilterTypeServiceInst:
		return true
	}
	return false
}

func (e PortFilterType) String() string {
	return string(e)
}

func (e *PortFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PortFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PortFilterType", str)
	}
	return nil
}

func (e PortFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProjectFilterType string

const (
	ProjectFilterTypeProjectName     ProjectFilterType = "PROJECT_NAME"
	ProjectFilterTypeProjectOwnedBy  ProjectFilterType = "PROJECT_OWNED_BY"
	ProjectFilterTypeProjectType     ProjectFilterType = "PROJECT_TYPE"
	ProjectFilterTypeLocationInst    ProjectFilterType = "LOCATION_INST"
	ProjectFilterTypeProjectPriority ProjectFilterType = "PROJECT_PRIORITY"
)

var AllProjectFilterType = []ProjectFilterType{
	ProjectFilterTypeProjectName,
	ProjectFilterTypeProjectOwnedBy,
	ProjectFilterTypeProjectType,
	ProjectFilterTypeLocationInst,
	ProjectFilterTypeProjectPriority,
}

func (e ProjectFilterType) IsValid() bool {
	switch e {
	case ProjectFilterTypeProjectName, ProjectFilterTypeProjectOwnedBy, ProjectFilterTypeProjectType, ProjectFilterTypeLocationInst, ProjectFilterTypeProjectPriority:
		return true
	}
	return false
}

func (e ProjectFilterType) String() string {
	return string(e)
}

func (e *ProjectFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectFilterType", str)
	}
	return nil
}

func (e ProjectFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what filters should we apply on services
type ServiceFilterType string

const (
	ServiceFilterTypeServiceInstName         ServiceFilterType = "SERVICE_INST_NAME"
	ServiceFilterTypeServiceStatus           ServiceFilterType = "SERVICE_STATUS"
	ServiceFilterTypeServiceDiscoveryMethod  ServiceFilterType = "SERVICE_DISCOVERY_METHOD"
	ServiceFilterTypeServiceType             ServiceFilterType = "SERVICE_TYPE"
	ServiceFilterTypeServiceInstExternalID   ServiceFilterType = "SERVICE_INST_EXTERNAL_ID"
	ServiceFilterTypeServiceInstCustomerName ServiceFilterType = "SERVICE_INST_CUSTOMER_NAME"
	ServiceFilterTypeProperty                ServiceFilterType = "PROPERTY"
	ServiceFilterTypeLocationInst            ServiceFilterType = "LOCATION_INST"
	ServiceFilterTypeLocationInstExternalID  ServiceFilterType = "LOCATION_INST_EXTERNAL_ID"
	ServiceFilterTypeEquipmentInService      ServiceFilterType = "EQUIPMENT_IN_SERVICE"
)

var AllServiceFilterType = []ServiceFilterType{
	ServiceFilterTypeServiceInstName,
	ServiceFilterTypeServiceStatus,
	ServiceFilterTypeServiceDiscoveryMethod,
	ServiceFilterTypeServiceType,
	ServiceFilterTypeServiceInstExternalID,
	ServiceFilterTypeServiceInstCustomerName,
	ServiceFilterTypeProperty,
	ServiceFilterTypeLocationInst,
	ServiceFilterTypeLocationInstExternalID,
	ServiceFilterTypeEquipmentInService,
}

func (e ServiceFilterType) IsValid() bool {
	switch e {
	case ServiceFilterTypeServiceInstName, ServiceFilterTypeServiceStatus, ServiceFilterTypeServiceDiscoveryMethod, ServiceFilterTypeServiceType, ServiceFilterTypeServiceInstExternalID, ServiceFilterTypeServiceInstCustomerName, ServiceFilterTypeProperty, ServiceFilterTypeLocationInst, ServiceFilterTypeLocationInstExternalID, ServiceFilterTypeEquipmentInService:
		return true
	}
	return false
}

func (e ServiceFilterType) String() string {
	return string(e)
}

func (e *ServiceFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceFilterType", str)
	}
	return nil
}

func (e ServiceFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SurveyQuestionType string

const (
	SurveyQuestionTypeBool     SurveyQuestionType = "BOOL"
	SurveyQuestionTypeEmail    SurveyQuestionType = "EMAIL"
	SurveyQuestionTypeCoords   SurveyQuestionType = "COORDS"
	SurveyQuestionTypePhone    SurveyQuestionType = "PHONE"
	SurveyQuestionTypeText     SurveyQuestionType = "TEXT"
	SurveyQuestionTypeTextarea SurveyQuestionType = "TEXTAREA"
	SurveyQuestionTypePhoto    SurveyQuestionType = "PHOTO"
	SurveyQuestionTypeWifi     SurveyQuestionType = "WIFI"
	SurveyQuestionTypeCellular SurveyQuestionType = "CELLULAR"
	SurveyQuestionTypeFloat    SurveyQuestionType = "FLOAT"
	SurveyQuestionTypeInteger  SurveyQuestionType = "INTEGER"
	SurveyQuestionTypeDate     SurveyQuestionType = "DATE"
)

var AllSurveyQuestionType = []SurveyQuestionType{
	SurveyQuestionTypeBool,
	SurveyQuestionTypeEmail,
	SurveyQuestionTypeCoords,
	SurveyQuestionTypePhone,
	SurveyQuestionTypeText,
	SurveyQuestionTypeTextarea,
	SurveyQuestionTypePhoto,
	SurveyQuestionTypeWifi,
	SurveyQuestionTypeCellular,
	SurveyQuestionTypeFloat,
	SurveyQuestionTypeInteger,
	SurveyQuestionTypeDate,
}

func (e SurveyQuestionType) IsValid() bool {
	switch e {
	case SurveyQuestionTypeBool, SurveyQuestionTypeEmail, SurveyQuestionTypeCoords, SurveyQuestionTypePhone, SurveyQuestionTypeText, SurveyQuestionTypeTextarea, SurveyQuestionTypePhoto, SurveyQuestionTypeWifi, SurveyQuestionTypeCellular, SurveyQuestionTypeFloat, SurveyQuestionTypeInteger, SurveyQuestionTypeDate:
		return true
	}
	return false
}

func (e SurveyQuestionType) String() string {
	return string(e)
}

func (e *SurveyQuestionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SurveyQuestionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SurveyQuestionType", str)
	}
	return nil
}

func (e SurveyQuestionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SurveyStatus string

const (
	SurveyStatusPlanned    SurveyStatus = "PLANNED"
	SurveyStatusInprogress SurveyStatus = "INPROGRESS"
	SurveyStatusCompleted  SurveyStatus = "COMPLETED"
)

var AllSurveyStatus = []SurveyStatus{
	SurveyStatusPlanned,
	SurveyStatusInprogress,
	SurveyStatusCompleted,
}

func (e SurveyStatus) IsValid() bool {
	switch e {
	case SurveyStatusPlanned, SurveyStatusInprogress, SurveyStatusCompleted:
		return true
	}
	return false
}

func (e SurveyStatus) String() string {
	return string(e)
}

func (e *SurveyStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SurveyStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SurveyStatus", str)
	}
	return nil
}

func (e SurveyStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TopologyLinkType string

const (
	TopologyLinkTypePhysical TopologyLinkType = "PHYSICAL"
)

var AllTopologyLinkType = []TopologyLinkType{
	TopologyLinkTypePhysical,
}

func (e TopologyLinkType) IsValid() bool {
	switch e {
	case TopologyLinkTypePhysical:
		return true
	}
	return false
}

func (e TopologyLinkType) String() string {
	return string(e)
}

func (e *TopologyLinkType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TopologyLinkType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TopologyLinkType", str)
	}
	return nil
}

func (e TopologyLinkType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what filters should we apply on users
type UserFilterType string

const (
	UserFilterTypeUserName   UserFilterType = "USER_NAME"
	UserFilterTypeUserStatus UserFilterType = "USER_STATUS"
)

var AllUserFilterType = []UserFilterType{
	UserFilterTypeUserName,
	UserFilterTypeUserStatus,
}

func (e UserFilterType) IsValid() bool {
	switch e {
	case UserFilterTypeUserName, UserFilterTypeUserStatus:
		return true
	}
	return false
}

func (e UserFilterType) String() string {
	return string(e)
}

func (e *UserFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserFilterType", str)
	}
	return nil
}

func (e UserFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what filters should we apply on usersGroups
type UsersGroupFilterType string

const (
	UsersGroupFilterTypeGroupName UsersGroupFilterType = "GROUP_NAME"
)

var AllUsersGroupFilterType = []UsersGroupFilterType{
	UsersGroupFilterTypeGroupName,
}

func (e UsersGroupFilterType) IsValid() bool {
	switch e {
	case UsersGroupFilterTypeGroupName:
		return true
	}
	return false
}

func (e UsersGroupFilterType) String() string {
	return string(e)
}

func (e *UsersGroupFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UsersGroupFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UsersGroupFilterType", str)
	}
	return nil
}

func (e UsersGroupFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what type of work order we filter about
type WorkOrderFilterType string

const (
	WorkOrderFilterTypeWorkOrderName          WorkOrderFilterType = "WORK_ORDER_NAME"
	WorkOrderFilterTypeWorkOrderStatus        WorkOrderFilterType = "WORK_ORDER_STATUS"
	WorkOrderFilterTypeWorkOrderOwnedBy       WorkOrderFilterType = "WORK_ORDER_OWNED_BY"
	WorkOrderFilterTypeWorkOrderType          WorkOrderFilterType = "WORK_ORDER_TYPE"
	WorkOrderFilterTypeWorkOrderCreationDate  WorkOrderFilterType = "WORK_ORDER_CREATION_DATE"
	WorkOrderFilterTypeWorkOrderCloseDate     WorkOrderFilterType = "WORK_ORDER_CLOSE_DATE"
	WorkOrderFilterTypeWorkOrderAssignedTo    WorkOrderFilterType = "WORK_ORDER_ASSIGNED_TO"
	WorkOrderFilterTypeWorkOrderLocationInst  WorkOrderFilterType = "WORK_ORDER_LOCATION_INST"
	WorkOrderFilterTypeWorkOrderPriority      WorkOrderFilterType = "WORK_ORDER_PRIORITY"
	WorkOrderFilterTypeLocationInst           WorkOrderFilterType = "LOCATION_INST"
	WorkOrderFilterTypeLocationInstExternalID WorkOrderFilterType = "LOCATION_INST_EXTERNAL_ID"
)

var AllWorkOrderFilterType = []WorkOrderFilterType{
	WorkOrderFilterTypeWorkOrderName,
	WorkOrderFilterTypeWorkOrderStatus,
	WorkOrderFilterTypeWorkOrderOwnedBy,
	WorkOrderFilterTypeWorkOrderType,
	WorkOrderFilterTypeWorkOrderCreationDate,
	WorkOrderFilterTypeWorkOrderCloseDate,
	WorkOrderFilterTypeWorkOrderAssignedTo,
	WorkOrderFilterTypeWorkOrderLocationInst,
	WorkOrderFilterTypeWorkOrderPriority,
	WorkOrderFilterTypeLocationInst,
	WorkOrderFilterTypeLocationInstExternalID,
}

func (e WorkOrderFilterType) IsValid() bool {
	switch e {
	case WorkOrderFilterTypeWorkOrderName, WorkOrderFilterTypeWorkOrderStatus, WorkOrderFilterTypeWorkOrderOwnedBy, WorkOrderFilterTypeWorkOrderType, WorkOrderFilterTypeWorkOrderCreationDate, WorkOrderFilterTypeWorkOrderCloseDate, WorkOrderFilterTypeWorkOrderAssignedTo, WorkOrderFilterTypeWorkOrderLocationInst, WorkOrderFilterTypeWorkOrderPriority, WorkOrderFilterTypeLocationInst, WorkOrderFilterTypeLocationInstExternalID:
		return true
	}
	return false
}

func (e WorkOrderFilterType) String() string {
	return string(e)
}

func (e *WorkOrderFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkOrderFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkOrderFilterType", str)
	}
	return nil
}

func (e WorkOrderFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
