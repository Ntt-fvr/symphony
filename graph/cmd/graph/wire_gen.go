// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"fmt"

	"github.com/facebookincubator/symphony/graph/graphgrpc"
	"github.com/facebookincubator/symphony/graph/graphhttp"
	"github.com/facebookincubator/symphony/pkg/ent"
	"github.com/facebookincubator/symphony/pkg/ev"
	"github.com/facebookincubator/symphony/pkg/event"
	"github.com/facebookincubator/symphony/pkg/flowengine/actions"
	"github.com/facebookincubator/symphony/pkg/flowengine/triggers"
	"github.com/facebookincubator/symphony/pkg/hooks"
	"github.com/facebookincubator/symphony/pkg/log"
	"github.com/facebookincubator/symphony/pkg/mysql"
	"github.com/facebookincubator/symphony/pkg/server"
	"github.com/facebookincubator/symphony/pkg/viewer"
	"gocloud.dev/server/health"
	"google.golang.org/grpc"

	_ "github.com/facebookincubator/symphony/pkg/ent/runtime"

	_ "gocloud.dev/pubsub/mempubsub"

	_ "gocloud.dev/pubsub/natspubsub"
)

// Injectors from wire.go:

func newApplication(ctx context.Context, flags *cliFlags) (*application, func(), error) {
	config := flags.LogConfig
	logger, cleanup, err := log.ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	mysqlConfig := flags.MySQLConfig
	viewerConfig := flags.TenancyConfig
	mySQLTenancy, err := newMySQLTenancy(mysqlConfig, viewerConfig, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	topicFactory := flags.EventPubsubURL
	emitter, cleanup2, err := ev.ProvideEmitter(ctx, topicFactory)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	eventer := &event.Eventer{
		Logger:  logger,
		Emitter: emitter,
	}
	factory := triggers.NewFactory()
	actionsFactory := actions.NewFactory()
	tenancy := newTenancy(mySQLTenancy, eventer, factory, actionsFactory)
	url := flags.AuthURL
	telemetryConfig := &flags.TelemetryConfig
	v := newHealthChecks(mySQLTenancy)
	orc8rConfig := flags.Orc8rConfig
	graphhttpConfig := graphhttp.Config{
		Tenancy:         tenancy,
		AuthURL:         url,
		ReceiverFactory: topicFactory,
		TriggerFactory:  factory,
		ActionFactory:   actionsFactory,
		Logger:          logger,
		Telemetry:       telemetryConfig,
		HealthChecks:    v,
		Orc8r:           orc8rConfig,
	}
	server, cleanup3, err := graphhttp.NewServer(graphhttpConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	config2 := &flags.MySQLConfig
	db, cleanup4 := mysql.Provider(config2)
	graphgrpcConfig := graphgrpc.Config{
		DB:      db,
		Logger:  logger,
		Orc8r:   orc8rConfig,
		Tenancy: tenancy,
	}
	grpcServer, cleanup5, err := graphgrpc.NewServer(graphgrpcConfig)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mainApplication := newApp(logger, server, grpcServer, flags)
	return mainApplication, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func newApp(logger log.Logger, httpServer *server.Server, grpcServer *grpc.Server, flags *cliFlags) *application {
	var app application
	app.Logger = logger.Background()
	app.http.Server = httpServer
	app.http.addr = flags.HTTPAddress
	app.grpc.Server = grpcServer
	app.grpc.addr = flags.GRPCAddress
	return &app
}

func newTenancy(tenancy *viewer.MySQLTenancy, eventer *event.Eventer, triggerFactory triggers.Factory, actionFactory actions.Factory) viewer.Tenancy {
	return viewer.NewCacheTenancy(tenancy, func(client *ent.Client) {
		hooker := hooks.Flower{
			TriggerFactory: triggerFactory,
			ActionFactory:  actionFactory,
		}
		hooker.HookTo(client)
		eventer.HookTo(client)
	})
}

func newHealthChecks(tenancy *viewer.MySQLTenancy) []health.Checker {
	return []health.Checker{tenancy}
}

func newMySQLTenancy(mySQLConfig mysql.Config, tenancyConfig viewer.Config, logger log.Logger) (*viewer.MySQLTenancy, error) {
	tenancy, err := viewer.NewMySQLTenancy(mySQLConfig.String(), tenancyConfig.TenantMaxConn)
	if err != nil {
		return nil, fmt.Errorf("creating mysql tenancy: %w", err)
	}
	tenancy.SetLogger(logger)
	mysql.SetLogger(logger)
	return tenancy, nil
}
