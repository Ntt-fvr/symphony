// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/cost"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/upl"
	"github.com/facebookincubator/symphony/pkg/ent/uplitem"
)

// UplItemUpdate is the builder for updating UplItem entities.
type UplItemUpdate struct {
	config
	hooks    []Hook
	mutation *UplItemMutation
}

// Where adds a new predicate for the builder.
func (uiu *UplItemUpdate) Where(ps ...predicate.UplItem) *UplItemUpdate {
	uiu.mutation.predicates = append(uiu.mutation.predicates, ps...)
	return uiu
}

// SetExternalid sets the externalid field.
func (uiu *UplItemUpdate) SetExternalid(s string) *UplItemUpdate {
	uiu.mutation.SetExternalid(s)
	return uiu
}

// SetItem sets the item field.
func (uiu *UplItemUpdate) SetItem(s string) *UplItemUpdate {
	uiu.mutation.SetItem(s)
	return uiu
}

// SetUnit sets the unit field.
func (uiu *UplItemUpdate) SetUnit(f float64) *UplItemUpdate {
	uiu.mutation.ResetUnit()
	uiu.mutation.SetUnit(f)
	return uiu
}

// AddUnit adds f to unit.
func (uiu *UplItemUpdate) AddUnit(f float64) *UplItemUpdate {
	uiu.mutation.AddUnit(f)
	return uiu
}

// SetPrice sets the price field.
func (uiu *UplItemUpdate) SetPrice(f float64) *UplItemUpdate {
	uiu.mutation.ResetPrice()
	uiu.mutation.SetPrice(f)
	return uiu
}

// AddPrice adds f to price.
func (uiu *UplItemUpdate) AddPrice(f float64) *UplItemUpdate {
	uiu.mutation.AddPrice(f)
	return uiu
}

// SetUplItemID sets the UplItem edge to Cost by id.
func (uiu *UplItemUpdate) SetUplItemID(id int) *UplItemUpdate {
	uiu.mutation.SetUplItemID(id)
	return uiu
}

// SetNillableUplItemID sets the UplItem edge to Cost by id if the given value is not nil.
func (uiu *UplItemUpdate) SetNillableUplItemID(id *int) *UplItemUpdate {
	if id != nil {
		uiu = uiu.SetUplItemID(*id)
	}
	return uiu
}

// SetUplItem sets the UplItem edge to Cost.
func (uiu *UplItemUpdate) SetUplItem(c *Cost) *UplItemUpdate {
	return uiu.SetUplItemID(c.ID)
}

// SetUplID sets the upl edge to Upl by id.
func (uiu *UplItemUpdate) SetUplID(id int) *UplItemUpdate {
	uiu.mutation.SetUplID(id)
	return uiu
}

// SetNillableUplID sets the upl edge to Upl by id if the given value is not nil.
func (uiu *UplItemUpdate) SetNillableUplID(id *int) *UplItemUpdate {
	if id != nil {
		uiu = uiu.SetUplID(*id)
	}
	return uiu
}

// SetUpl sets the upl edge to Upl.
func (uiu *UplItemUpdate) SetUpl(u *Upl) *UplItemUpdate {
	return uiu.SetUplID(u.ID)
}

// Mutation returns the UplItemMutation object of the builder.
func (uiu *UplItemUpdate) Mutation() *UplItemMutation {
	return uiu.mutation
}

// ClearUplItem clears the "UplItem" edge to type Cost.
func (uiu *UplItemUpdate) ClearUplItem() *UplItemUpdate {
	uiu.mutation.ClearUplItem()
	return uiu
}

// ClearUpl clears the "upl" edge to type Upl.
func (uiu *UplItemUpdate) ClearUpl() *UplItemUpdate {
	uiu.mutation.ClearUpl()
	return uiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uiu *UplItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uiu.defaults()
	if len(uiu.hooks) == 0 {
		affected, err = uiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UplItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uiu.mutation = mutation
			affected, err = uiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uiu.hooks) - 1; i >= 0; i-- {
			mut = uiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uiu *UplItemUpdate) SaveX(ctx context.Context) int {
	affected, err := uiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiu *UplItemUpdate) Exec(ctx context.Context) error {
	_, err := uiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiu *UplItemUpdate) ExecX(ctx context.Context) {
	if err := uiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uiu *UplItemUpdate) defaults() {
	if _, ok := uiu.mutation.UpdateTime(); !ok {
		v := uplitem.UpdateDefaultUpdateTime()
		uiu.mutation.SetUpdateTime(v)
	}
}

func (uiu *UplItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   uplitem.Table,
			Columns: uplitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uplitem.FieldID,
			},
		},
	}
	if ps := uiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: uplitem.FieldUpdateTime,
		})
	}
	if value, ok := uiu.mutation.Externalid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uplitem.FieldExternalid,
		})
	}
	if value, ok := uiu.mutation.Item(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uplitem.FieldItem,
		})
	}
	if value, ok := uiu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: uplitem.FieldUnit,
		})
	}
	if value, ok := uiu.mutation.AddedUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: uplitem.FieldUnit,
		})
	}
	if value, ok := uiu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: uplitem.FieldPrice,
		})
	}
	if value, ok := uiu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: uplitem.FieldPrice,
		})
	}
	if uiu.mutation.UplItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   uplitem.UplItemTable,
			Columns: []string{uplitem.UplItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.UplItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   uplitem.UplItemTable,
			Columns: []string{uplitem.UplItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uiu.mutation.UplCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uplitem.UplTable,
			Columns: []string{uplitem.UplColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: upl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiu.mutation.UplIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uplitem.UplTable,
			Columns: []string{uplitem.UplColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: upl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uplitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UplItemUpdateOne is the builder for updating a single UplItem entity.
type UplItemUpdateOne struct {
	config
	hooks    []Hook
	mutation *UplItemMutation
}

// SetExternalid sets the externalid field.
func (uiuo *UplItemUpdateOne) SetExternalid(s string) *UplItemUpdateOne {
	uiuo.mutation.SetExternalid(s)
	return uiuo
}

// SetItem sets the item field.
func (uiuo *UplItemUpdateOne) SetItem(s string) *UplItemUpdateOne {
	uiuo.mutation.SetItem(s)
	return uiuo
}

// SetUnit sets the unit field.
func (uiuo *UplItemUpdateOne) SetUnit(f float64) *UplItemUpdateOne {
	uiuo.mutation.ResetUnit()
	uiuo.mutation.SetUnit(f)
	return uiuo
}

// AddUnit adds f to unit.
func (uiuo *UplItemUpdateOne) AddUnit(f float64) *UplItemUpdateOne {
	uiuo.mutation.AddUnit(f)
	return uiuo
}

// SetPrice sets the price field.
func (uiuo *UplItemUpdateOne) SetPrice(f float64) *UplItemUpdateOne {
	uiuo.mutation.ResetPrice()
	uiuo.mutation.SetPrice(f)
	return uiuo
}

// AddPrice adds f to price.
func (uiuo *UplItemUpdateOne) AddPrice(f float64) *UplItemUpdateOne {
	uiuo.mutation.AddPrice(f)
	return uiuo
}

// SetUplItemID sets the UplItem edge to Cost by id.
func (uiuo *UplItemUpdateOne) SetUplItemID(id int) *UplItemUpdateOne {
	uiuo.mutation.SetUplItemID(id)
	return uiuo
}

// SetNillableUplItemID sets the UplItem edge to Cost by id if the given value is not nil.
func (uiuo *UplItemUpdateOne) SetNillableUplItemID(id *int) *UplItemUpdateOne {
	if id != nil {
		uiuo = uiuo.SetUplItemID(*id)
	}
	return uiuo
}

// SetUplItem sets the UplItem edge to Cost.
func (uiuo *UplItemUpdateOne) SetUplItem(c *Cost) *UplItemUpdateOne {
	return uiuo.SetUplItemID(c.ID)
}

// SetUplID sets the upl edge to Upl by id.
func (uiuo *UplItemUpdateOne) SetUplID(id int) *UplItemUpdateOne {
	uiuo.mutation.SetUplID(id)
	return uiuo
}

// SetNillableUplID sets the upl edge to Upl by id if the given value is not nil.
func (uiuo *UplItemUpdateOne) SetNillableUplID(id *int) *UplItemUpdateOne {
	if id != nil {
		uiuo = uiuo.SetUplID(*id)
	}
	return uiuo
}

// SetUpl sets the upl edge to Upl.
func (uiuo *UplItemUpdateOne) SetUpl(u *Upl) *UplItemUpdateOne {
	return uiuo.SetUplID(u.ID)
}

// Mutation returns the UplItemMutation object of the builder.
func (uiuo *UplItemUpdateOne) Mutation() *UplItemMutation {
	return uiuo.mutation
}

// ClearUplItem clears the "UplItem" edge to type Cost.
func (uiuo *UplItemUpdateOne) ClearUplItem() *UplItemUpdateOne {
	uiuo.mutation.ClearUplItem()
	return uiuo
}

// ClearUpl clears the "upl" edge to type Upl.
func (uiuo *UplItemUpdateOne) ClearUpl() *UplItemUpdateOne {
	uiuo.mutation.ClearUpl()
	return uiuo
}

// Save executes the query and returns the updated entity.
func (uiuo *UplItemUpdateOne) Save(ctx context.Context) (*UplItem, error) {
	var (
		err  error
		node *UplItem
	)
	uiuo.defaults()
	if len(uiuo.hooks) == 0 {
		node, err = uiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UplItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uiuo.mutation = mutation
			node, err = uiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uiuo.hooks) - 1; i >= 0; i-- {
			mut = uiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uiuo *UplItemUpdateOne) SaveX(ctx context.Context) *UplItem {
	node, err := uiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiuo *UplItemUpdateOne) Exec(ctx context.Context) error {
	_, err := uiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiuo *UplItemUpdateOne) ExecX(ctx context.Context) {
	if err := uiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uiuo *UplItemUpdateOne) defaults() {
	if _, ok := uiuo.mutation.UpdateTime(); !ok {
		v := uplitem.UpdateDefaultUpdateTime()
		uiuo.mutation.SetUpdateTime(v)
	}
}

func (uiuo *UplItemUpdateOne) sqlSave(ctx context.Context) (_node *UplItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   uplitem.Table,
			Columns: uplitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uplitem.FieldID,
			},
		},
	}
	id, ok := uiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UplItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: uplitem.FieldUpdateTime,
		})
	}
	if value, ok := uiuo.mutation.Externalid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uplitem.FieldExternalid,
		})
	}
	if value, ok := uiuo.mutation.Item(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uplitem.FieldItem,
		})
	}
	if value, ok := uiuo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: uplitem.FieldUnit,
		})
	}
	if value, ok := uiuo.mutation.AddedUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: uplitem.FieldUnit,
		})
	}
	if value, ok := uiuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: uplitem.FieldPrice,
		})
	}
	if value, ok := uiuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: uplitem.FieldPrice,
		})
	}
	if uiuo.mutation.UplItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   uplitem.UplItemTable,
			Columns: []string{uplitem.UplItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.UplItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   uplitem.UplItemTable,
			Columns: []string{uplitem.UplItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uiuo.mutation.UplCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uplitem.UplTable,
			Columns: []string{uplitem.UplColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: upl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiuo.mutation.UplIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uplitem.UplTable,
			Columns: []string{uplitem.UplColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: upl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UplItem{config: uiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uplitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
