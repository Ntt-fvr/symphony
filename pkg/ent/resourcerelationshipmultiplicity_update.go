// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/permissionspolicy"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationship"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationshipmultiplicity"
)

// ResourceRelationshipMultiplicityUpdate is the builder for updating ResourceRelationshipMultiplicity entities.
type ResourceRelationshipMultiplicityUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceRelationshipMultiplicityMutation
}

// Where adds a new predicate for the builder.
func (rrmu *ResourceRelationshipMultiplicityUpdate) Where(ps ...predicate.ResourceRelationshipMultiplicity) *ResourceRelationshipMultiplicityUpdate {
	rrmu.mutation.predicates = append(rrmu.mutation.predicates, ps...)
	return rrmu
}

// SetName sets the name field.
func (rrmu *ResourceRelationshipMultiplicityUpdate) SetName(s string) *ResourceRelationshipMultiplicityUpdate {
	rrmu.mutation.SetName(s)
	return rrmu
}

// AddResourceRelationshipFkIDs adds the resource_relationship_fk edge to ResourceRelationship by ids.
func (rrmu *ResourceRelationshipMultiplicityUpdate) AddResourceRelationshipFkIDs(ids ...int) *ResourceRelationshipMultiplicityUpdate {
	rrmu.mutation.AddResourceRelationshipFkIDs(ids...)
	return rrmu
}

// AddResourceRelationshipFk adds the resource_relationship_fk edges to ResourceRelationship.
func (rrmu *ResourceRelationshipMultiplicityUpdate) AddResourceRelationshipFk(r ...*ResourceRelationship) *ResourceRelationshipMultiplicityUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrmu.AddResourceRelationshipFkIDs(ids...)
}

// AddPolicyIDs adds the policies edge to PermissionsPolicy by ids.
func (rrmu *ResourceRelationshipMultiplicityUpdate) AddPolicyIDs(ids ...int) *ResourceRelationshipMultiplicityUpdate {
	rrmu.mutation.AddPolicyIDs(ids...)
	return rrmu
}

// AddPolicies adds the policies edges to PermissionsPolicy.
func (rrmu *ResourceRelationshipMultiplicityUpdate) AddPolicies(p ...*PermissionsPolicy) *ResourceRelationshipMultiplicityUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rrmu.AddPolicyIDs(ids...)
}

// Mutation returns the ResourceRelationshipMultiplicityMutation object of the builder.
func (rrmu *ResourceRelationshipMultiplicityUpdate) Mutation() *ResourceRelationshipMultiplicityMutation {
	return rrmu.mutation
}

// ClearResourceRelationshipFk clears all "resource_relationship_fk" edges to type ResourceRelationship.
func (rrmu *ResourceRelationshipMultiplicityUpdate) ClearResourceRelationshipFk() *ResourceRelationshipMultiplicityUpdate {
	rrmu.mutation.ClearResourceRelationshipFk()
	return rrmu
}

// RemoveResourceRelationshipFkIDs removes the resource_relationship_fk edge to ResourceRelationship by ids.
func (rrmu *ResourceRelationshipMultiplicityUpdate) RemoveResourceRelationshipFkIDs(ids ...int) *ResourceRelationshipMultiplicityUpdate {
	rrmu.mutation.RemoveResourceRelationshipFkIDs(ids...)
	return rrmu
}

// RemoveResourceRelationshipFk removes resource_relationship_fk edges to ResourceRelationship.
func (rrmu *ResourceRelationshipMultiplicityUpdate) RemoveResourceRelationshipFk(r ...*ResourceRelationship) *ResourceRelationshipMultiplicityUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrmu.RemoveResourceRelationshipFkIDs(ids...)
}

// ClearPolicies clears all "policies" edges to type PermissionsPolicy.
func (rrmu *ResourceRelationshipMultiplicityUpdate) ClearPolicies() *ResourceRelationshipMultiplicityUpdate {
	rrmu.mutation.ClearPolicies()
	return rrmu
}

// RemovePolicyIDs removes the policies edge to PermissionsPolicy by ids.
func (rrmu *ResourceRelationshipMultiplicityUpdate) RemovePolicyIDs(ids ...int) *ResourceRelationshipMultiplicityUpdate {
	rrmu.mutation.RemovePolicyIDs(ids...)
	return rrmu
}

// RemovePolicies removes policies edges to PermissionsPolicy.
func (rrmu *ResourceRelationshipMultiplicityUpdate) RemovePolicies(p ...*PermissionsPolicy) *ResourceRelationshipMultiplicityUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rrmu.RemovePolicyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rrmu *ResourceRelationshipMultiplicityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rrmu.defaults()
	if len(rrmu.hooks) == 0 {
		if err = rrmu.check(); err != nil {
			return 0, err
		}
		affected, err = rrmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceRelationshipMultiplicityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rrmu.check(); err != nil {
				return 0, err
			}
			rrmu.mutation = mutation
			affected, err = rrmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rrmu.hooks) - 1; i >= 0; i-- {
			mut = rrmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rrmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rrmu *ResourceRelationshipMultiplicityUpdate) SaveX(ctx context.Context) int {
	affected, err := rrmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rrmu *ResourceRelationshipMultiplicityUpdate) Exec(ctx context.Context) error {
	_, err := rrmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrmu *ResourceRelationshipMultiplicityUpdate) ExecX(ctx context.Context) {
	if err := rrmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrmu *ResourceRelationshipMultiplicityUpdate) defaults() {
	if _, ok := rrmu.mutation.UpdateTime(); !ok {
		v := resourcerelationshipmultiplicity.UpdateDefaultUpdateTime()
		rrmu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrmu *ResourceRelationshipMultiplicityUpdate) check() error {
	if v, ok := rrmu.mutation.Name(); ok {
		if err := resourcerelationshipmultiplicity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rrmu *ResourceRelationshipMultiplicityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcerelationshipmultiplicity.Table,
			Columns: resourcerelationshipmultiplicity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcerelationshipmultiplicity.FieldID,
			},
		},
	}
	if ps := rrmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rrmu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcerelationshipmultiplicity.FieldUpdateTime,
		})
	}
	if value, ok := rrmu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcerelationshipmultiplicity.FieldName,
		})
	}
	if rrmu.mutation.ResourceRelationshipFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshipmultiplicity.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrmu.mutation.RemovedResourceRelationshipFkIDs(); len(nodes) > 0 && !rrmu.mutation.ResourceRelationshipFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshipmultiplicity.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrmu.mutation.ResourceRelationshipFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshipmultiplicity.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rrmu.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.PoliciesTable,
			Columns: []string{resourcerelationshipmultiplicity.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrmu.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !rrmu.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.PoliciesTable,
			Columns: []string{resourcerelationshipmultiplicity.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrmu.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.PoliciesTable,
			Columns: []string{resourcerelationshipmultiplicity.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rrmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcerelationshipmultiplicity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceRelationshipMultiplicityUpdateOne is the builder for updating a single ResourceRelationshipMultiplicity entity.
type ResourceRelationshipMultiplicityUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceRelationshipMultiplicityMutation
}

// SetName sets the name field.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) SetName(s string) *ResourceRelationshipMultiplicityUpdateOne {
	rrmuo.mutation.SetName(s)
	return rrmuo
}

// AddResourceRelationshipFkIDs adds the resource_relationship_fk edge to ResourceRelationship by ids.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) AddResourceRelationshipFkIDs(ids ...int) *ResourceRelationshipMultiplicityUpdateOne {
	rrmuo.mutation.AddResourceRelationshipFkIDs(ids...)
	return rrmuo
}

// AddResourceRelationshipFk adds the resource_relationship_fk edges to ResourceRelationship.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) AddResourceRelationshipFk(r ...*ResourceRelationship) *ResourceRelationshipMultiplicityUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrmuo.AddResourceRelationshipFkIDs(ids...)
}

// AddPolicyIDs adds the policies edge to PermissionsPolicy by ids.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) AddPolicyIDs(ids ...int) *ResourceRelationshipMultiplicityUpdateOne {
	rrmuo.mutation.AddPolicyIDs(ids...)
	return rrmuo
}

// AddPolicies adds the policies edges to PermissionsPolicy.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) AddPolicies(p ...*PermissionsPolicy) *ResourceRelationshipMultiplicityUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rrmuo.AddPolicyIDs(ids...)
}

// Mutation returns the ResourceRelationshipMultiplicityMutation object of the builder.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) Mutation() *ResourceRelationshipMultiplicityMutation {
	return rrmuo.mutation
}

// ClearResourceRelationshipFk clears all "resource_relationship_fk" edges to type ResourceRelationship.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) ClearResourceRelationshipFk() *ResourceRelationshipMultiplicityUpdateOne {
	rrmuo.mutation.ClearResourceRelationshipFk()
	return rrmuo
}

// RemoveResourceRelationshipFkIDs removes the resource_relationship_fk edge to ResourceRelationship by ids.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) RemoveResourceRelationshipFkIDs(ids ...int) *ResourceRelationshipMultiplicityUpdateOne {
	rrmuo.mutation.RemoveResourceRelationshipFkIDs(ids...)
	return rrmuo
}

// RemoveResourceRelationshipFk removes resource_relationship_fk edges to ResourceRelationship.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) RemoveResourceRelationshipFk(r ...*ResourceRelationship) *ResourceRelationshipMultiplicityUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrmuo.RemoveResourceRelationshipFkIDs(ids...)
}

// ClearPolicies clears all "policies" edges to type PermissionsPolicy.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) ClearPolicies() *ResourceRelationshipMultiplicityUpdateOne {
	rrmuo.mutation.ClearPolicies()
	return rrmuo
}

// RemovePolicyIDs removes the policies edge to PermissionsPolicy by ids.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) RemovePolicyIDs(ids ...int) *ResourceRelationshipMultiplicityUpdateOne {
	rrmuo.mutation.RemovePolicyIDs(ids...)
	return rrmuo
}

// RemovePolicies removes policies edges to PermissionsPolicy.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) RemovePolicies(p ...*PermissionsPolicy) *ResourceRelationshipMultiplicityUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rrmuo.RemovePolicyIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) Save(ctx context.Context) (*ResourceRelationshipMultiplicity, error) {
	var (
		err  error
		node *ResourceRelationshipMultiplicity
	)
	rrmuo.defaults()
	if len(rrmuo.hooks) == 0 {
		if err = rrmuo.check(); err != nil {
			return nil, err
		}
		node, err = rrmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceRelationshipMultiplicityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rrmuo.check(); err != nil {
				return nil, err
			}
			rrmuo.mutation = mutation
			node, err = rrmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rrmuo.hooks) - 1; i >= 0; i-- {
			mut = rrmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rrmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) SaveX(ctx context.Context) *ResourceRelationshipMultiplicity {
	node, err := rrmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) Exec(ctx context.Context) error {
	_, err := rrmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) ExecX(ctx context.Context) {
	if err := rrmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) defaults() {
	if _, ok := rrmuo.mutation.UpdateTime(); !ok {
		v := resourcerelationshipmultiplicity.UpdateDefaultUpdateTime()
		rrmuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) check() error {
	if v, ok := rrmuo.mutation.Name(); ok {
		if err := resourcerelationshipmultiplicity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rrmuo *ResourceRelationshipMultiplicityUpdateOne) sqlSave(ctx context.Context) (_node *ResourceRelationshipMultiplicity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcerelationshipmultiplicity.Table,
			Columns: resourcerelationshipmultiplicity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcerelationshipmultiplicity.FieldID,
			},
		},
	}
	id, ok := rrmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceRelationshipMultiplicity.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rrmuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcerelationshipmultiplicity.FieldUpdateTime,
		})
	}
	if value, ok := rrmuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcerelationshipmultiplicity.FieldName,
		})
	}
	if rrmuo.mutation.ResourceRelationshipFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshipmultiplicity.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrmuo.mutation.RemovedResourceRelationshipFkIDs(); len(nodes) > 0 && !rrmuo.mutation.ResourceRelationshipFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshipmultiplicity.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrmuo.mutation.ResourceRelationshipFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshipmultiplicity.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rrmuo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.PoliciesTable,
			Columns: []string{resourcerelationshipmultiplicity.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrmuo.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !rrmuo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.PoliciesTable,
			Columns: []string{resourcerelationshipmultiplicity.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrmuo.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshipmultiplicity.PoliciesTable,
			Columns: []string{resourcerelationshipmultiplicity.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceRelationshipMultiplicity{config: rrmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rrmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcerelationshipmultiplicity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
