// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/upl"
	"github.com/facebookincubator/symphony/pkg/ent/uplitem"
)

// UplItem is the model entity for the UplItem schema.
type UplItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Externalid holds the value of the "externalid" field.
	Externalid string `json:"externalid,omitempty"`
	// Item holds the value of the "item" field.
	Item string `json:"item,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit float64 `json:"unit,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UplItemQuery when eager-loading is set.
	Edges         UplItemEdges `json:"edges"`
	upl_upl_items *int
}

// UplItemEdges holds the relations/edges for other nodes in the graph.
type UplItemEdges struct {
	// Uplitem holds the value of the uplitem edge.
	Uplitem []*Cost
	// Upl holds the value of the upl edge.
	Upl *Upl
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UplitemOrErr returns the Uplitem value or an error if the edge
// was not loaded in eager-loading.
func (e UplItemEdges) UplitemOrErr() ([]*Cost, error) {
	if e.loadedTypes[0] {
		return e.Uplitem, nil
	}
	return nil, &NotLoadedError{edge: "uplitem"}
}

// UplOrErr returns the Upl value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UplItemEdges) UplOrErr() (*Upl, error) {
	if e.loadedTypes[1] {
		if e.Upl == nil {
			// The edge upl was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: upl.Label}
		}
		return e.Upl, nil
	}
	return nil, &NotLoadedError{edge: "upl"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UplItem) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullTime{},    // create_time
		&sql.NullTime{},    // update_time
		&sql.NullString{},  // externalid
		&sql.NullString{},  // item
		&sql.NullFloat64{}, // unit
		&sql.NullFloat64{}, // price
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*UplItem) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // upl_upl_items
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UplItem fields.
func (ui *UplItem) assignValues(values ...interface{}) error {
	if m, n := len(values), len(uplitem.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ui.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		ui.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		ui.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field externalid", values[2])
	} else if value.Valid {
		ui.Externalid = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field item", values[3])
	} else if value.Valid {
		ui.Item = value.String
	}
	if value, ok := values[4].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field unit", values[4])
	} else if value.Valid {
		ui.Unit = value.Float64
	}
	if value, ok := values[5].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field price", values[5])
	} else if value.Valid {
		ui.Price = value.Float64
	}
	values = values[6:]
	if len(values) == len(uplitem.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field upl_upl_items", value)
		} else if value.Valid {
			ui.upl_upl_items = new(int)
			*ui.upl_upl_items = int(value.Int64)
		}
	}
	return nil
}

// QueryUplitem queries the uplitem edge of the UplItem.
func (ui *UplItem) QueryUplitem() *CostQuery {
	return (&UplItemClient{config: ui.config}).QueryUplitem(ui)
}

// QueryUpl queries the upl edge of the UplItem.
func (ui *UplItem) QueryUpl() *UplQuery {
	return (&UplItemClient{config: ui.config}).QueryUpl(ui)
}

// Update returns a builder for updating this UplItem.
// Note that, you need to call UplItem.Unwrap() before calling this method, if this UplItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ui *UplItem) Update() *UplItemUpdateOne {
	return (&UplItemClient{config: ui.config}).UpdateOne(ui)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ui *UplItem) Unwrap() *UplItem {
	tx, ok := ui.config.driver.(*txDriver)
	if !ok {
		panic("ent: UplItem is not a transactional entity")
	}
	ui.config.driver = tx.drv
	return ui
}

// String implements the fmt.Stringer.
func (ui *UplItem) String() string {
	var builder strings.Builder
	builder.WriteString("UplItem(")
	builder.WriteString(fmt.Sprintf("id=%v", ui.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ui.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ui.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", externalid=")
	builder.WriteString(ui.Externalid)
	builder.WriteString(", item=")
	builder.WriteString(ui.Item)
	builder.WriteString(", unit=")
	builder.WriteString(fmt.Sprintf("%v", ui.Unit))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", ui.Price))
	builder.WriteByte(')')
	return builder.String()
}

// UplItems is a parsable slice of UplItem.
type UplItems []*UplItem

func (ui UplItems) config(cfg config) {
	for _i := range ui {
		ui[_i].config = cfg
	}
}
