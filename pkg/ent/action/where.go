// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package action

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// LogExecution applies equality check predicate on the "logExecution" field. It's identical to LogExecutionEQ.
func LogExecution(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogExecution), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v Status) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v Status) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...Status) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...Status) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// UserActionEQ applies the EQ predicate on the "UserAction" field.
func UserActionEQ(v UserAction) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserAction), v))
	})
}

// UserActionNEQ applies the NEQ predicate on the "UserAction" field.
func UserActionNEQ(v UserAction) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserAction), v))
	})
}

// UserActionIn applies the In predicate on the "UserAction" field.
func UserActionIn(vs ...UserAction) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserAction), v...))
	})
}

// UserActionNotIn applies the NotIn predicate on the "UserAction" field.
func UserActionNotIn(vs ...UserAction) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserAction), v...))
	})
}

// LogExecutionEQ applies the EQ predicate on the "logExecution" field.
func LogExecutionEQ(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogExecution), v))
	})
}

// LogExecutionNEQ applies the NEQ predicate on the "logExecution" field.
func LogExecutionNEQ(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogExecution), v))
	})
}

// LogExecutionIn applies the In predicate on the "logExecution" field.
func LogExecutionIn(vs ...string) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLogExecution), v...))
	})
}

// LogExecutionNotIn applies the NotIn predicate on the "logExecution" field.
func LogExecutionNotIn(vs ...string) predicate.Action {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Action(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLogExecution), v...))
	})
}

// LogExecutionGT applies the GT predicate on the "logExecution" field.
func LogExecutionGT(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogExecution), v))
	})
}

// LogExecutionGTE applies the GTE predicate on the "logExecution" field.
func LogExecutionGTE(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogExecution), v))
	})
}

// LogExecutionLT applies the LT predicate on the "logExecution" field.
func LogExecutionLT(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogExecution), v))
	})
}

// LogExecutionLTE applies the LTE predicate on the "logExecution" field.
func LogExecutionLTE(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogExecution), v))
	})
}

// LogExecutionContains applies the Contains predicate on the "logExecution" field.
func LogExecutionContains(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogExecution), v))
	})
}

// LogExecutionHasPrefix applies the HasPrefix predicate on the "logExecution" field.
func LogExecutionHasPrefix(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogExecution), v))
	})
}

// LogExecutionHasSuffix applies the HasSuffix predicate on the "logExecution" field.
func LogExecutionHasSuffix(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogExecution), v))
	})
}

// LogExecutionEqualFold applies the EqualFold predicate on the "logExecution" field.
func LogExecutionEqualFold(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogExecution), v))
	})
}

// LogExecutionContainsFold applies the ContainsFold predicate on the "logExecution" field.
func LogExecutionContainsFold(v string) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogExecution), v))
	})
}

// HasExecution applies the HasEdge predicate on the "execution" edge.
func HasExecution() predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExecutionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExecutionTable, ExecutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionWith applies the HasEdge predicate on the "execution" edge with a given conditions (other predicates).
func HasExecutionWith(preds ...predicate.Execution) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExecutionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExecutionTable, ExecutionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRuleaction applies the HasEdge predicate on the "ruleaction" edge.
func HasRuleaction() predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RuleactionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RuleactionTable, RuleactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRuleactionWith applies the HasEdge predicate on the "ruleaction" edge with a given conditions (other predicates).
func HasRuleactionWith(preds ...predicate.RuleAction) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RuleactionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RuleactionTable, RuleactionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Action) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Action) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Action) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		p(s.Not())
	})
}
