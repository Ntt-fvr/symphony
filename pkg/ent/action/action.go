// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package action

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/facebook/ent"
)

const (
	// Label holds the string label denoting the action type in the database.
	Label = "action"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUserAction holds the string denoting the useraction field in the database.
	FieldUserAction = "user_action"
	// FieldLogExecution holds the string denoting the logexecution field in the database.
	FieldLogExecution = "log_execution"

	// EdgeExecution holds the string denoting the execution edge name in mutations.
	EdgeExecution = "execution"
	// EdgeRuleaction holds the string denoting the ruleaction edge name in mutations.
	EdgeRuleaction = "ruleaction"

	// Table holds the table name of the action in the database.
	Table = "actions"
	// ExecutionTable is the table the holds the execution relation/edge.
	ExecutionTable = "actions"
	// ExecutionInverseTable is the table name for the Execution entity.
	// It exists in this package in order to avoid circular dependency with the "execution" package.
	ExecutionInverseTable = "executions"
	// ExecutionColumn is the table column denoting the execution relation/edge.
	ExecutionColumn = "execution_execution"
	// RuleactionTable is the table the holds the ruleaction relation/edge.
	RuleactionTable = "actions"
	// RuleactionInverseTable is the table name for the RuleAction entity.
	// It exists in this package in order to avoid circular dependency with the "ruleaction" package.
	RuleactionInverseTable = "rule_actions"
	// RuleactionColumn is the table column denoting the ruleaction relation/edge.
	RuleactionColumn = "rule_action_rule_action"
)

// Columns holds all SQL columns for action fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStatus,
	FieldUserAction,
	FieldLogExecution,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Action type.
var ForeignKeys = []string{
	"execution_execution",
	"rule_action_rule_action",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/facebookincubator/symphony/pkg/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the create_time field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the update_time field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	UpdateDefaultUpdateTime func() time.Time
	// LogExecutionValidator is a validator for the "logExecution" field. It is called by the builders before save.
	LogExecutionValidator func(string) error
)

// Status defines the type for the Status enum field.
type Status string

// Status values.
const (
	StatusPENDING   Status = "PENDING"
	StatusSUCCESFUL Status = "SUCCESFUL"
	StatusFAILED    Status = "FAILED"
)

func (_status Status) String() string {
	return string(_status)
}

// StatusValidator is a validator for the "Status" field enum values. It is called by the builders before save.
func StatusValidator(_status Status) error {
	switch _status {
	case StatusPENDING, StatusSUCCESFUL, StatusFAILED:
		return nil
	default:
		return fmt.Errorf("action: invalid enum value for Status field: %q", _status)
	}
}

// UserAction defines the type for the UserAction enum field.
type UserAction string

// UserAction values.
const (
	UserActionCONFIRM UserAction = "CONFIRM"
	UserActionIGNORE  UserAction = "IGNORE"
	UserActionALARM   UserAction = "ALARM"
)

func (_useraction UserAction) String() string {
	return string(_useraction)
}

// UserActionValidator is a validator for the "UserAction" field enum values. It is called by the builders before save.
func UserActionValidator(_useraction UserAction) error {
	switch _useraction {
	case UserActionCONFIRM, UserActionIGNORE, UserActionALARM:
		return nil
	default:
		return fmt.Errorf("action: invalid enum value for UserAction field: %q", _useraction)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_status Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_status.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_status *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_status = Status(str)
	if err := StatusValidator(*_status); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (_useraction UserAction) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_useraction.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_useraction *UserAction) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_useraction = UserAction(str)
	if err := UserActionValidator(*_useraction); err != nil {
		return fmt.Errorf("%s is not a valid UserAction", str)
	}
	return nil
}
