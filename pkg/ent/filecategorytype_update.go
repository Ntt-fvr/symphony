// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/filecategorytype"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// FileCategoryTypeUpdate is the builder for updating FileCategoryType entities.
type FileCategoryTypeUpdate struct {
	config
	hooks    []Hook
	mutation *FileCategoryTypeMutation
}

// Where adds a new predicate for the builder.
func (fctu *FileCategoryTypeUpdate) Where(ps ...predicate.FileCategoryType) *FileCategoryTypeUpdate {
	fctu.mutation.predicates = append(fctu.mutation.predicates, ps...)
	return fctu
}

// SetType sets the type field.
func (fctu *FileCategoryTypeUpdate) SetType(f filecategorytype.Type) *FileCategoryTypeUpdate {
	fctu.mutation.SetType(f)
	return fctu
}

// SetName sets the name field.
func (fctu *FileCategoryTypeUpdate) SetName(s string) *FileCategoryTypeUpdate {
	fctu.mutation.SetName(s)
	return fctu
}

// SetExternalID sets the external_id field.
func (fctu *FileCategoryTypeUpdate) SetExternalID(s string) *FileCategoryTypeUpdate {
	fctu.mutation.SetExternalID(s)
	return fctu
}

// SetNillableExternalID sets the external_id field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableExternalID(s *string) *FileCategoryTypeUpdate {
	if s != nil {
		fctu.SetExternalID(*s)
	}
	return fctu
}

// ClearExternalID clears the value of external_id.
func (fctu *FileCategoryTypeUpdate) ClearExternalID() *FileCategoryTypeUpdate {
	fctu.mutation.ClearExternalID()
	return fctu
}

// SetIndex sets the index field.
func (fctu *FileCategoryTypeUpdate) SetIndex(i int) *FileCategoryTypeUpdate {
	fctu.mutation.ResetIndex()
	fctu.mutation.SetIndex(i)
	return fctu
}

// SetNillableIndex sets the index field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableIndex(i *int) *FileCategoryTypeUpdate {
	if i != nil {
		fctu.SetIndex(*i)
	}
	return fctu
}

// AddIndex adds i to index.
func (fctu *FileCategoryTypeUpdate) AddIndex(i int) *FileCategoryTypeUpdate {
	fctu.mutation.AddIndex(i)
	return fctu
}

// ClearIndex clears the value of index.
func (fctu *FileCategoryTypeUpdate) ClearIndex() *FileCategoryTypeUpdate {
	fctu.mutation.ClearIndex()
	return fctu
}

// SetCategory sets the category field.
func (fctu *FileCategoryTypeUpdate) SetCategory(s string) *FileCategoryTypeUpdate {
	fctu.mutation.SetCategory(s)
	return fctu
}

// SetNillableCategory sets the category field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableCategory(s *string) *FileCategoryTypeUpdate {
	if s != nil {
		fctu.SetCategory(*s)
	}
	return fctu
}

// ClearCategory clears the value of category.
func (fctu *FileCategoryTypeUpdate) ClearCategory() *FileCategoryTypeUpdate {
	fctu.mutation.ClearCategory()
	return fctu
}

// SetIntVal sets the int_val field.
func (fctu *FileCategoryTypeUpdate) SetIntVal(i int) *FileCategoryTypeUpdate {
	fctu.mutation.ResetIntVal()
	fctu.mutation.SetIntVal(i)
	return fctu
}

// SetNillableIntVal sets the int_val field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableIntVal(i *int) *FileCategoryTypeUpdate {
	if i != nil {
		fctu.SetIntVal(*i)
	}
	return fctu
}

// AddIntVal adds i to int_val.
func (fctu *FileCategoryTypeUpdate) AddIntVal(i int) *FileCategoryTypeUpdate {
	fctu.mutation.AddIntVal(i)
	return fctu
}

// ClearIntVal clears the value of int_val.
func (fctu *FileCategoryTypeUpdate) ClearIntVal() *FileCategoryTypeUpdate {
	fctu.mutation.ClearIntVal()
	return fctu
}

// SetBoolVal sets the bool_val field.
func (fctu *FileCategoryTypeUpdate) SetBoolVal(b bool) *FileCategoryTypeUpdate {
	fctu.mutation.SetBoolVal(b)
	return fctu
}

// SetNillableBoolVal sets the bool_val field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableBoolVal(b *bool) *FileCategoryTypeUpdate {
	if b != nil {
		fctu.SetBoolVal(*b)
	}
	return fctu
}

// ClearBoolVal clears the value of bool_val.
func (fctu *FileCategoryTypeUpdate) ClearBoolVal() *FileCategoryTypeUpdate {
	fctu.mutation.ClearBoolVal()
	return fctu
}

// SetFloatVal sets the float_val field.
func (fctu *FileCategoryTypeUpdate) SetFloatVal(f float64) *FileCategoryTypeUpdate {
	fctu.mutation.ResetFloatVal()
	fctu.mutation.SetFloatVal(f)
	return fctu
}

// SetNillableFloatVal sets the float_val field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableFloatVal(f *float64) *FileCategoryTypeUpdate {
	if f != nil {
		fctu.SetFloatVal(*f)
	}
	return fctu
}

// AddFloatVal adds f to float_val.
func (fctu *FileCategoryTypeUpdate) AddFloatVal(f float64) *FileCategoryTypeUpdate {
	fctu.mutation.AddFloatVal(f)
	return fctu
}

// ClearFloatVal clears the value of float_val.
func (fctu *FileCategoryTypeUpdate) ClearFloatVal() *FileCategoryTypeUpdate {
	fctu.mutation.ClearFloatVal()
	return fctu
}

// SetLatitudeVal sets the latitude_val field.
func (fctu *FileCategoryTypeUpdate) SetLatitudeVal(f float64) *FileCategoryTypeUpdate {
	fctu.mutation.ResetLatitudeVal()
	fctu.mutation.SetLatitudeVal(f)
	return fctu
}

// SetNillableLatitudeVal sets the latitude_val field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableLatitudeVal(f *float64) *FileCategoryTypeUpdate {
	if f != nil {
		fctu.SetLatitudeVal(*f)
	}
	return fctu
}

// AddLatitudeVal adds f to latitude_val.
func (fctu *FileCategoryTypeUpdate) AddLatitudeVal(f float64) *FileCategoryTypeUpdate {
	fctu.mutation.AddLatitudeVal(f)
	return fctu
}

// ClearLatitudeVal clears the value of latitude_val.
func (fctu *FileCategoryTypeUpdate) ClearLatitudeVal() *FileCategoryTypeUpdate {
	fctu.mutation.ClearLatitudeVal()
	return fctu
}

// SetLongitudeVal sets the longitude_val field.
func (fctu *FileCategoryTypeUpdate) SetLongitudeVal(f float64) *FileCategoryTypeUpdate {
	fctu.mutation.ResetLongitudeVal()
	fctu.mutation.SetLongitudeVal(f)
	return fctu
}

// SetNillableLongitudeVal sets the longitude_val field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableLongitudeVal(f *float64) *FileCategoryTypeUpdate {
	if f != nil {
		fctu.SetLongitudeVal(*f)
	}
	return fctu
}

// AddLongitudeVal adds f to longitude_val.
func (fctu *FileCategoryTypeUpdate) AddLongitudeVal(f float64) *FileCategoryTypeUpdate {
	fctu.mutation.AddLongitudeVal(f)
	return fctu
}

// ClearLongitudeVal clears the value of longitude_val.
func (fctu *FileCategoryTypeUpdate) ClearLongitudeVal() *FileCategoryTypeUpdate {
	fctu.mutation.ClearLongitudeVal()
	return fctu
}

// SetStringVal sets the string_val field.
func (fctu *FileCategoryTypeUpdate) SetStringVal(s string) *FileCategoryTypeUpdate {
	fctu.mutation.SetStringVal(s)
	return fctu
}

// SetNillableStringVal sets the string_val field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableStringVal(s *string) *FileCategoryTypeUpdate {
	if s != nil {
		fctu.SetStringVal(*s)
	}
	return fctu
}

// ClearStringVal clears the value of string_val.
func (fctu *FileCategoryTypeUpdate) ClearStringVal() *FileCategoryTypeUpdate {
	fctu.mutation.ClearStringVal()
	return fctu
}

// SetRangeFromVal sets the range_from_val field.
func (fctu *FileCategoryTypeUpdate) SetRangeFromVal(f float64) *FileCategoryTypeUpdate {
	fctu.mutation.ResetRangeFromVal()
	fctu.mutation.SetRangeFromVal(f)
	return fctu
}

// SetNillableRangeFromVal sets the range_from_val field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableRangeFromVal(f *float64) *FileCategoryTypeUpdate {
	if f != nil {
		fctu.SetRangeFromVal(*f)
	}
	return fctu
}

// AddRangeFromVal adds f to range_from_val.
func (fctu *FileCategoryTypeUpdate) AddRangeFromVal(f float64) *FileCategoryTypeUpdate {
	fctu.mutation.AddRangeFromVal(f)
	return fctu
}

// ClearRangeFromVal clears the value of range_from_val.
func (fctu *FileCategoryTypeUpdate) ClearRangeFromVal() *FileCategoryTypeUpdate {
	fctu.mutation.ClearRangeFromVal()
	return fctu
}

// SetRangeToVal sets the range_to_val field.
func (fctu *FileCategoryTypeUpdate) SetRangeToVal(f float64) *FileCategoryTypeUpdate {
	fctu.mutation.ResetRangeToVal()
	fctu.mutation.SetRangeToVal(f)
	return fctu
}

// SetNillableRangeToVal sets the range_to_val field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableRangeToVal(f *float64) *FileCategoryTypeUpdate {
	if f != nil {
		fctu.SetRangeToVal(*f)
	}
	return fctu
}

// AddRangeToVal adds f to range_to_val.
func (fctu *FileCategoryTypeUpdate) AddRangeToVal(f float64) *FileCategoryTypeUpdate {
	fctu.mutation.AddRangeToVal(f)
	return fctu
}

// ClearRangeToVal clears the value of range_to_val.
func (fctu *FileCategoryTypeUpdate) ClearRangeToVal() *FileCategoryTypeUpdate {
	fctu.mutation.ClearRangeToVal()
	return fctu
}

// SetIsInstanceProperty sets the is_instance_property field.
func (fctu *FileCategoryTypeUpdate) SetIsInstanceProperty(b bool) *FileCategoryTypeUpdate {
	fctu.mutation.SetIsInstanceProperty(b)
	return fctu
}

// SetNillableIsInstanceProperty sets the is_instance_property field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableIsInstanceProperty(b *bool) *FileCategoryTypeUpdate {
	if b != nil {
		fctu.SetIsInstanceProperty(*b)
	}
	return fctu
}

// SetEditable sets the editable field.
func (fctu *FileCategoryTypeUpdate) SetEditable(b bool) *FileCategoryTypeUpdate {
	fctu.mutation.SetEditable(b)
	return fctu
}

// SetNillableEditable sets the editable field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableEditable(b *bool) *FileCategoryTypeUpdate {
	if b != nil {
		fctu.SetEditable(*b)
	}
	return fctu
}

// SetMandatory sets the mandatory field.
func (fctu *FileCategoryTypeUpdate) SetMandatory(b bool) *FileCategoryTypeUpdate {
	fctu.mutation.SetMandatory(b)
	return fctu
}

// SetNillableMandatory sets the mandatory field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableMandatory(b *bool) *FileCategoryTypeUpdate {
	if b != nil {
		fctu.SetMandatory(*b)
	}
	return fctu
}

// SetDeleted sets the deleted field.
func (fctu *FileCategoryTypeUpdate) SetDeleted(b bool) *FileCategoryTypeUpdate {
	fctu.mutation.SetDeleted(b)
	return fctu
}

// SetNillableDeleted sets the deleted field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableDeleted(b *bool) *FileCategoryTypeUpdate {
	if b != nil {
		fctu.SetDeleted(*b)
	}
	return fctu
}

// SetNodeType sets the nodeType field.
func (fctu *FileCategoryTypeUpdate) SetNodeType(s string) *FileCategoryTypeUpdate {
	fctu.mutation.SetNodeType(s)
	return fctu
}

// SetNillableNodeType sets the nodeType field if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableNodeType(s *string) *FileCategoryTypeUpdate {
	if s != nil {
		fctu.SetNodeType(*s)
	}
	return fctu
}

// ClearNodeType clears the value of nodeType.
func (fctu *FileCategoryTypeUpdate) ClearNodeType() *FileCategoryTypeUpdate {
	fctu.mutation.ClearNodeType()
	return fctu
}

// SetLocationTypeID sets the location_type edge to LocationType by id.
func (fctu *FileCategoryTypeUpdate) SetLocationTypeID(id int) *FileCategoryTypeUpdate {
	fctu.mutation.SetLocationTypeID(id)
	return fctu
}

// SetNillableLocationTypeID sets the location_type edge to LocationType by id if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableLocationTypeID(id *int) *FileCategoryTypeUpdate {
	if id != nil {
		fctu = fctu.SetLocationTypeID(*id)
	}
	return fctu
}

// SetLocationType sets the location_type edge to LocationType.
func (fctu *FileCategoryTypeUpdate) SetLocationType(l *LocationType) *FileCategoryTypeUpdate {
	return fctu.SetLocationTypeID(l.ID)
}

// Mutation returns the FileCategoryTypeMutation object of the builder.
func (fctu *FileCategoryTypeUpdate) Mutation() *FileCategoryTypeMutation {
	return fctu.mutation
}

// ClearLocationType clears the "location_type" edge to type LocationType.
func (fctu *FileCategoryTypeUpdate) ClearLocationType() *FileCategoryTypeUpdate {
	fctu.mutation.ClearLocationType()
	return fctu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fctu *FileCategoryTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fctu.defaults()
	if len(fctu.hooks) == 0 {
		if err = fctu.check(); err != nil {
			return 0, err
		}
		affected, err = fctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileCategoryTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fctu.check(); err != nil {
				return 0, err
			}
			fctu.mutation = mutation
			affected, err = fctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fctu.hooks) - 1; i >= 0; i-- {
			mut = fctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fctu *FileCategoryTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := fctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fctu *FileCategoryTypeUpdate) Exec(ctx context.Context) error {
	_, err := fctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fctu *FileCategoryTypeUpdate) ExecX(ctx context.Context) {
	if err := fctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fctu *FileCategoryTypeUpdate) defaults() {
	if _, ok := fctu.mutation.UpdateTime(); !ok {
		v := filecategorytype.UpdateDefaultUpdateTime()
		fctu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fctu *FileCategoryTypeUpdate) check() error {
	if v, ok := fctu.mutation.GetType(); ok {
		if err := filecategorytype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (fctu *FileCategoryTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filecategorytype.Table,
			Columns: filecategorytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filecategorytype.FieldID,
			},
		},
	}
	if ps := fctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fctu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: filecategorytype.FieldUpdateTime,
		})
	}
	if value, ok := fctu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: filecategorytype.FieldType,
		})
	}
	if value, ok := fctu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldName,
		})
	}
	if value, ok := fctu.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldExternalID,
		})
	}
	if fctu.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: filecategorytype.FieldExternalID,
		})
	}
	if value, ok := fctu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: filecategorytype.FieldIndex,
		})
	}
	if value, ok := fctu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: filecategorytype.FieldIndex,
		})
	}
	if fctu.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: filecategorytype.FieldIndex,
		})
	}
	if value, ok := fctu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldCategory,
		})
	}
	if fctu.mutation.CategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: filecategorytype.FieldCategory,
		})
	}
	if value, ok := fctu.mutation.IntVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: filecategorytype.FieldIntVal,
		})
	}
	if value, ok := fctu.mutation.AddedIntVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: filecategorytype.FieldIntVal,
		})
	}
	if fctu.mutation.IntValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: filecategorytype.FieldIntVal,
		})
	}
	if value, ok := fctu.mutation.BoolVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filecategorytype.FieldBoolVal,
		})
	}
	if fctu.mutation.BoolValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: filecategorytype.FieldBoolVal,
		})
	}
	if value, ok := fctu.mutation.FloatVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldFloatVal,
		})
	}
	if value, ok := fctu.mutation.AddedFloatVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldFloatVal,
		})
	}
	if fctu.mutation.FloatValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: filecategorytype.FieldFloatVal,
		})
	}
	if value, ok := fctu.mutation.LatitudeVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldLatitudeVal,
		})
	}
	if value, ok := fctu.mutation.AddedLatitudeVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldLatitudeVal,
		})
	}
	if fctu.mutation.LatitudeValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: filecategorytype.FieldLatitudeVal,
		})
	}
	if value, ok := fctu.mutation.LongitudeVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldLongitudeVal,
		})
	}
	if value, ok := fctu.mutation.AddedLongitudeVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldLongitudeVal,
		})
	}
	if fctu.mutation.LongitudeValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: filecategorytype.FieldLongitudeVal,
		})
	}
	if value, ok := fctu.mutation.StringVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldStringVal,
		})
	}
	if fctu.mutation.StringValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: filecategorytype.FieldStringVal,
		})
	}
	if value, ok := fctu.mutation.RangeFromVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldRangeFromVal,
		})
	}
	if value, ok := fctu.mutation.AddedRangeFromVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldRangeFromVal,
		})
	}
	if fctu.mutation.RangeFromValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: filecategorytype.FieldRangeFromVal,
		})
	}
	if value, ok := fctu.mutation.RangeToVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldRangeToVal,
		})
	}
	if value, ok := fctu.mutation.AddedRangeToVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldRangeToVal,
		})
	}
	if fctu.mutation.RangeToValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: filecategorytype.FieldRangeToVal,
		})
	}
	if value, ok := fctu.mutation.IsInstanceProperty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filecategorytype.FieldIsInstanceProperty,
		})
	}
	if value, ok := fctu.mutation.Editable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filecategorytype.FieldEditable,
		})
	}
	if value, ok := fctu.mutation.Mandatory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filecategorytype.FieldMandatory,
		})
	}
	if value, ok := fctu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filecategorytype.FieldDeleted,
		})
	}
	if value, ok := fctu.mutation.NodeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldNodeType,
		})
	}
	if fctu.mutation.NodeTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: filecategorytype.FieldNodeType,
		})
	}
	if fctu.mutation.LocationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filecategorytype.LocationTypeTable,
			Columns: []string{filecategorytype.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fctu.mutation.LocationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filecategorytype.LocationTypeTable,
			Columns: []string{filecategorytype.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filecategorytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FileCategoryTypeUpdateOne is the builder for updating a single FileCategoryType entity.
type FileCategoryTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *FileCategoryTypeMutation
}

// SetType sets the type field.
func (fctuo *FileCategoryTypeUpdateOne) SetType(f filecategorytype.Type) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetType(f)
	return fctuo
}

// SetName sets the name field.
func (fctuo *FileCategoryTypeUpdateOne) SetName(s string) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetName(s)
	return fctuo
}

// SetExternalID sets the external_id field.
func (fctuo *FileCategoryTypeUpdateOne) SetExternalID(s string) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetExternalID(s)
	return fctuo
}

// SetNillableExternalID sets the external_id field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableExternalID(s *string) *FileCategoryTypeUpdateOne {
	if s != nil {
		fctuo.SetExternalID(*s)
	}
	return fctuo
}

// ClearExternalID clears the value of external_id.
func (fctuo *FileCategoryTypeUpdateOne) ClearExternalID() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearExternalID()
	return fctuo
}

// SetIndex sets the index field.
func (fctuo *FileCategoryTypeUpdateOne) SetIndex(i int) *FileCategoryTypeUpdateOne {
	fctuo.mutation.ResetIndex()
	fctuo.mutation.SetIndex(i)
	return fctuo
}

// SetNillableIndex sets the index field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableIndex(i *int) *FileCategoryTypeUpdateOne {
	if i != nil {
		fctuo.SetIndex(*i)
	}
	return fctuo
}

// AddIndex adds i to index.
func (fctuo *FileCategoryTypeUpdateOne) AddIndex(i int) *FileCategoryTypeUpdateOne {
	fctuo.mutation.AddIndex(i)
	return fctuo
}

// ClearIndex clears the value of index.
func (fctuo *FileCategoryTypeUpdateOne) ClearIndex() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearIndex()
	return fctuo
}

// SetCategory sets the category field.
func (fctuo *FileCategoryTypeUpdateOne) SetCategory(s string) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetCategory(s)
	return fctuo
}

// SetNillableCategory sets the category field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableCategory(s *string) *FileCategoryTypeUpdateOne {
	if s != nil {
		fctuo.SetCategory(*s)
	}
	return fctuo
}

// ClearCategory clears the value of category.
func (fctuo *FileCategoryTypeUpdateOne) ClearCategory() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearCategory()
	return fctuo
}

// SetIntVal sets the int_val field.
func (fctuo *FileCategoryTypeUpdateOne) SetIntVal(i int) *FileCategoryTypeUpdateOne {
	fctuo.mutation.ResetIntVal()
	fctuo.mutation.SetIntVal(i)
	return fctuo
}

// SetNillableIntVal sets the int_val field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableIntVal(i *int) *FileCategoryTypeUpdateOne {
	if i != nil {
		fctuo.SetIntVal(*i)
	}
	return fctuo
}

// AddIntVal adds i to int_val.
func (fctuo *FileCategoryTypeUpdateOne) AddIntVal(i int) *FileCategoryTypeUpdateOne {
	fctuo.mutation.AddIntVal(i)
	return fctuo
}

// ClearIntVal clears the value of int_val.
func (fctuo *FileCategoryTypeUpdateOne) ClearIntVal() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearIntVal()
	return fctuo
}

// SetBoolVal sets the bool_val field.
func (fctuo *FileCategoryTypeUpdateOne) SetBoolVal(b bool) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetBoolVal(b)
	return fctuo
}

// SetNillableBoolVal sets the bool_val field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableBoolVal(b *bool) *FileCategoryTypeUpdateOne {
	if b != nil {
		fctuo.SetBoolVal(*b)
	}
	return fctuo
}

// ClearBoolVal clears the value of bool_val.
func (fctuo *FileCategoryTypeUpdateOne) ClearBoolVal() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearBoolVal()
	return fctuo
}

// SetFloatVal sets the float_val field.
func (fctuo *FileCategoryTypeUpdateOne) SetFloatVal(f float64) *FileCategoryTypeUpdateOne {
	fctuo.mutation.ResetFloatVal()
	fctuo.mutation.SetFloatVal(f)
	return fctuo
}

// SetNillableFloatVal sets the float_val field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableFloatVal(f *float64) *FileCategoryTypeUpdateOne {
	if f != nil {
		fctuo.SetFloatVal(*f)
	}
	return fctuo
}

// AddFloatVal adds f to float_val.
func (fctuo *FileCategoryTypeUpdateOne) AddFloatVal(f float64) *FileCategoryTypeUpdateOne {
	fctuo.mutation.AddFloatVal(f)
	return fctuo
}

// ClearFloatVal clears the value of float_val.
func (fctuo *FileCategoryTypeUpdateOne) ClearFloatVal() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearFloatVal()
	return fctuo
}

// SetLatitudeVal sets the latitude_val field.
func (fctuo *FileCategoryTypeUpdateOne) SetLatitudeVal(f float64) *FileCategoryTypeUpdateOne {
	fctuo.mutation.ResetLatitudeVal()
	fctuo.mutation.SetLatitudeVal(f)
	return fctuo
}

// SetNillableLatitudeVal sets the latitude_val field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableLatitudeVal(f *float64) *FileCategoryTypeUpdateOne {
	if f != nil {
		fctuo.SetLatitudeVal(*f)
	}
	return fctuo
}

// AddLatitudeVal adds f to latitude_val.
func (fctuo *FileCategoryTypeUpdateOne) AddLatitudeVal(f float64) *FileCategoryTypeUpdateOne {
	fctuo.mutation.AddLatitudeVal(f)
	return fctuo
}

// ClearLatitudeVal clears the value of latitude_val.
func (fctuo *FileCategoryTypeUpdateOne) ClearLatitudeVal() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearLatitudeVal()
	return fctuo
}

// SetLongitudeVal sets the longitude_val field.
func (fctuo *FileCategoryTypeUpdateOne) SetLongitudeVal(f float64) *FileCategoryTypeUpdateOne {
	fctuo.mutation.ResetLongitudeVal()
	fctuo.mutation.SetLongitudeVal(f)
	return fctuo
}

// SetNillableLongitudeVal sets the longitude_val field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableLongitudeVal(f *float64) *FileCategoryTypeUpdateOne {
	if f != nil {
		fctuo.SetLongitudeVal(*f)
	}
	return fctuo
}

// AddLongitudeVal adds f to longitude_val.
func (fctuo *FileCategoryTypeUpdateOne) AddLongitudeVal(f float64) *FileCategoryTypeUpdateOne {
	fctuo.mutation.AddLongitudeVal(f)
	return fctuo
}

// ClearLongitudeVal clears the value of longitude_val.
func (fctuo *FileCategoryTypeUpdateOne) ClearLongitudeVal() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearLongitudeVal()
	return fctuo
}

// SetStringVal sets the string_val field.
func (fctuo *FileCategoryTypeUpdateOne) SetStringVal(s string) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetStringVal(s)
	return fctuo
}

// SetNillableStringVal sets the string_val field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableStringVal(s *string) *FileCategoryTypeUpdateOne {
	if s != nil {
		fctuo.SetStringVal(*s)
	}
	return fctuo
}

// ClearStringVal clears the value of string_val.
func (fctuo *FileCategoryTypeUpdateOne) ClearStringVal() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearStringVal()
	return fctuo
}

// SetRangeFromVal sets the range_from_val field.
func (fctuo *FileCategoryTypeUpdateOne) SetRangeFromVal(f float64) *FileCategoryTypeUpdateOne {
	fctuo.mutation.ResetRangeFromVal()
	fctuo.mutation.SetRangeFromVal(f)
	return fctuo
}

// SetNillableRangeFromVal sets the range_from_val field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableRangeFromVal(f *float64) *FileCategoryTypeUpdateOne {
	if f != nil {
		fctuo.SetRangeFromVal(*f)
	}
	return fctuo
}

// AddRangeFromVal adds f to range_from_val.
func (fctuo *FileCategoryTypeUpdateOne) AddRangeFromVal(f float64) *FileCategoryTypeUpdateOne {
	fctuo.mutation.AddRangeFromVal(f)
	return fctuo
}

// ClearRangeFromVal clears the value of range_from_val.
func (fctuo *FileCategoryTypeUpdateOne) ClearRangeFromVal() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearRangeFromVal()
	return fctuo
}

// SetRangeToVal sets the range_to_val field.
func (fctuo *FileCategoryTypeUpdateOne) SetRangeToVal(f float64) *FileCategoryTypeUpdateOne {
	fctuo.mutation.ResetRangeToVal()
	fctuo.mutation.SetRangeToVal(f)
	return fctuo
}

// SetNillableRangeToVal sets the range_to_val field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableRangeToVal(f *float64) *FileCategoryTypeUpdateOne {
	if f != nil {
		fctuo.SetRangeToVal(*f)
	}
	return fctuo
}

// AddRangeToVal adds f to range_to_val.
func (fctuo *FileCategoryTypeUpdateOne) AddRangeToVal(f float64) *FileCategoryTypeUpdateOne {
	fctuo.mutation.AddRangeToVal(f)
	return fctuo
}

// ClearRangeToVal clears the value of range_to_val.
func (fctuo *FileCategoryTypeUpdateOne) ClearRangeToVal() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearRangeToVal()
	return fctuo
}

// SetIsInstanceProperty sets the is_instance_property field.
func (fctuo *FileCategoryTypeUpdateOne) SetIsInstanceProperty(b bool) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetIsInstanceProperty(b)
	return fctuo
}

// SetNillableIsInstanceProperty sets the is_instance_property field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableIsInstanceProperty(b *bool) *FileCategoryTypeUpdateOne {
	if b != nil {
		fctuo.SetIsInstanceProperty(*b)
	}
	return fctuo
}

// SetEditable sets the editable field.
func (fctuo *FileCategoryTypeUpdateOne) SetEditable(b bool) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetEditable(b)
	return fctuo
}

// SetNillableEditable sets the editable field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableEditable(b *bool) *FileCategoryTypeUpdateOne {
	if b != nil {
		fctuo.SetEditable(*b)
	}
	return fctuo
}

// SetMandatory sets the mandatory field.
func (fctuo *FileCategoryTypeUpdateOne) SetMandatory(b bool) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetMandatory(b)
	return fctuo
}

// SetNillableMandatory sets the mandatory field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableMandatory(b *bool) *FileCategoryTypeUpdateOne {
	if b != nil {
		fctuo.SetMandatory(*b)
	}
	return fctuo
}

// SetDeleted sets the deleted field.
func (fctuo *FileCategoryTypeUpdateOne) SetDeleted(b bool) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetDeleted(b)
	return fctuo
}

// SetNillableDeleted sets the deleted field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableDeleted(b *bool) *FileCategoryTypeUpdateOne {
	if b != nil {
		fctuo.SetDeleted(*b)
	}
	return fctuo
}

// SetNodeType sets the nodeType field.
func (fctuo *FileCategoryTypeUpdateOne) SetNodeType(s string) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetNodeType(s)
	return fctuo
}

// SetNillableNodeType sets the nodeType field if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableNodeType(s *string) *FileCategoryTypeUpdateOne {
	if s != nil {
		fctuo.SetNodeType(*s)
	}
	return fctuo
}

// ClearNodeType clears the value of nodeType.
func (fctuo *FileCategoryTypeUpdateOne) ClearNodeType() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearNodeType()
	return fctuo
}

// SetLocationTypeID sets the location_type edge to LocationType by id.
func (fctuo *FileCategoryTypeUpdateOne) SetLocationTypeID(id int) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetLocationTypeID(id)
	return fctuo
}

// SetNillableLocationTypeID sets the location_type edge to LocationType by id if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableLocationTypeID(id *int) *FileCategoryTypeUpdateOne {
	if id != nil {
		fctuo = fctuo.SetLocationTypeID(*id)
	}
	return fctuo
}

// SetLocationType sets the location_type edge to LocationType.
func (fctuo *FileCategoryTypeUpdateOne) SetLocationType(l *LocationType) *FileCategoryTypeUpdateOne {
	return fctuo.SetLocationTypeID(l.ID)
}

// Mutation returns the FileCategoryTypeMutation object of the builder.
func (fctuo *FileCategoryTypeUpdateOne) Mutation() *FileCategoryTypeMutation {
	return fctuo.mutation
}

// ClearLocationType clears the "location_type" edge to type LocationType.
func (fctuo *FileCategoryTypeUpdateOne) ClearLocationType() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearLocationType()
	return fctuo
}

// Save executes the query and returns the updated entity.
func (fctuo *FileCategoryTypeUpdateOne) Save(ctx context.Context) (*FileCategoryType, error) {
	var (
		err  error
		node *FileCategoryType
	)
	fctuo.defaults()
	if len(fctuo.hooks) == 0 {
		if err = fctuo.check(); err != nil {
			return nil, err
		}
		node, err = fctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileCategoryTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fctuo.check(); err != nil {
				return nil, err
			}
			fctuo.mutation = mutation
			node, err = fctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fctuo.hooks) - 1; i >= 0; i-- {
			mut = fctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fctuo *FileCategoryTypeUpdateOne) SaveX(ctx context.Context) *FileCategoryType {
	node, err := fctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fctuo *FileCategoryTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := fctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fctuo *FileCategoryTypeUpdateOne) ExecX(ctx context.Context) {
	if err := fctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fctuo *FileCategoryTypeUpdateOne) defaults() {
	if _, ok := fctuo.mutation.UpdateTime(); !ok {
		v := filecategorytype.UpdateDefaultUpdateTime()
		fctuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fctuo *FileCategoryTypeUpdateOne) check() error {
	if v, ok := fctuo.mutation.GetType(); ok {
		if err := filecategorytype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (fctuo *FileCategoryTypeUpdateOne) sqlSave(ctx context.Context) (_node *FileCategoryType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filecategorytype.Table,
			Columns: filecategorytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filecategorytype.FieldID,
			},
		},
	}
	id, ok := fctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FileCategoryType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fctuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: filecategorytype.FieldUpdateTime,
		})
	}
	if value, ok := fctuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: filecategorytype.FieldType,
		})
	}
	if value, ok := fctuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldName,
		})
	}
	if value, ok := fctuo.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldExternalID,
		})
	}
	if fctuo.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: filecategorytype.FieldExternalID,
		})
	}
	if value, ok := fctuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: filecategorytype.FieldIndex,
		})
	}
	if value, ok := fctuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: filecategorytype.FieldIndex,
		})
	}
	if fctuo.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: filecategorytype.FieldIndex,
		})
	}
	if value, ok := fctuo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldCategory,
		})
	}
	if fctuo.mutation.CategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: filecategorytype.FieldCategory,
		})
	}
	if value, ok := fctuo.mutation.IntVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: filecategorytype.FieldIntVal,
		})
	}
	if value, ok := fctuo.mutation.AddedIntVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: filecategorytype.FieldIntVal,
		})
	}
	if fctuo.mutation.IntValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: filecategorytype.FieldIntVal,
		})
	}
	if value, ok := fctuo.mutation.BoolVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filecategorytype.FieldBoolVal,
		})
	}
	if fctuo.mutation.BoolValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: filecategorytype.FieldBoolVal,
		})
	}
	if value, ok := fctuo.mutation.FloatVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldFloatVal,
		})
	}
	if value, ok := fctuo.mutation.AddedFloatVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldFloatVal,
		})
	}
	if fctuo.mutation.FloatValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: filecategorytype.FieldFloatVal,
		})
	}
	if value, ok := fctuo.mutation.LatitudeVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldLatitudeVal,
		})
	}
	if value, ok := fctuo.mutation.AddedLatitudeVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldLatitudeVal,
		})
	}
	if fctuo.mutation.LatitudeValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: filecategorytype.FieldLatitudeVal,
		})
	}
	if value, ok := fctuo.mutation.LongitudeVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldLongitudeVal,
		})
	}
	if value, ok := fctuo.mutation.AddedLongitudeVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldLongitudeVal,
		})
	}
	if fctuo.mutation.LongitudeValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: filecategorytype.FieldLongitudeVal,
		})
	}
	if value, ok := fctuo.mutation.StringVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldStringVal,
		})
	}
	if fctuo.mutation.StringValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: filecategorytype.FieldStringVal,
		})
	}
	if value, ok := fctuo.mutation.RangeFromVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldRangeFromVal,
		})
	}
	if value, ok := fctuo.mutation.AddedRangeFromVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldRangeFromVal,
		})
	}
	if fctuo.mutation.RangeFromValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: filecategorytype.FieldRangeFromVal,
		})
	}
	if value, ok := fctuo.mutation.RangeToVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldRangeToVal,
		})
	}
	if value, ok := fctuo.mutation.AddedRangeToVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: filecategorytype.FieldRangeToVal,
		})
	}
	if fctuo.mutation.RangeToValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: filecategorytype.FieldRangeToVal,
		})
	}
	if value, ok := fctuo.mutation.IsInstanceProperty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filecategorytype.FieldIsInstanceProperty,
		})
	}
	if value, ok := fctuo.mutation.Editable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filecategorytype.FieldEditable,
		})
	}
	if value, ok := fctuo.mutation.Mandatory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filecategorytype.FieldMandatory,
		})
	}
	if value, ok := fctuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filecategorytype.FieldDeleted,
		})
	}
	if value, ok := fctuo.mutation.NodeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldNodeType,
		})
	}
	if fctuo.mutation.NodeTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: filecategorytype.FieldNodeType,
		})
	}
	if fctuo.mutation.LocationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filecategorytype.LocationTypeTable,
			Columns: []string{filecategorytype.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fctuo.mutation.LocationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filecategorytype.LocationTypeTable,
			Columns: []string{filecategorytype.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileCategoryType{config: fctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filecategorytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
