// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/propertycategory"
	"github.com/facebookincubator/symphony/pkg/ent/resourcepropertytype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
)

// ResourcePropertyTypeQuery is the builder for querying ResourcePropertyType entities.
type ResourcePropertyTypeQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ResourcePropertyType
	// eager-loading edges.
	withResourceSpecification *ResourceSpecificationQuery
	withPropertyCategory      *PropertyCategoryQuery
	withFKs                   bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rptq *ResourcePropertyTypeQuery) Where(ps ...predicate.ResourcePropertyType) *ResourcePropertyTypeQuery {
	rptq.predicates = append(rptq.predicates, ps...)
	return rptq
}

// Limit adds a limit step to the query.
func (rptq *ResourcePropertyTypeQuery) Limit(limit int) *ResourcePropertyTypeQuery {
	rptq.limit = &limit
	return rptq
}

// Offset adds an offset step to the query.
func (rptq *ResourcePropertyTypeQuery) Offset(offset int) *ResourcePropertyTypeQuery {
	rptq.offset = &offset
	return rptq
}

// Order adds an order step to the query.
func (rptq *ResourcePropertyTypeQuery) Order(o ...OrderFunc) *ResourcePropertyTypeQuery {
	rptq.order = append(rptq.order, o...)
	return rptq
}

// QueryResourceSpecification chains the current query on the resourceSpecification edge.
func (rptq *ResourcePropertyTypeQuery) QueryResourceSpecification() *ResourceSpecificationQuery {
	query := &ResourceSpecificationQuery{config: rptq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rptq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rptq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcepropertytype.Table, resourcepropertytype.FieldID, selector),
			sqlgraph.To(resourcespecification.Table, resourcespecification.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcepropertytype.ResourceSpecificationTable, resourcepropertytype.ResourceSpecificationColumn),
		)
		fromU = sqlgraph.SetNeighbors(rptq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPropertyCategory chains the current query on the property_category edge.
func (rptq *ResourcePropertyTypeQuery) QueryPropertyCategory() *PropertyCategoryQuery {
	query := &PropertyCategoryQuery{config: rptq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rptq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rptq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcepropertytype.Table, resourcepropertytype.FieldID, selector),
			sqlgraph.To(propertycategory.Table, propertycategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcepropertytype.PropertyCategoryTable, resourcepropertytype.PropertyCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(rptq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResourcePropertyType entity in the query. Returns *NotFoundError when no resourcepropertytype was found.
func (rptq *ResourcePropertyTypeQuery) First(ctx context.Context) (*ResourcePropertyType, error) {
	nodes, err := rptq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resourcepropertytype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rptq *ResourcePropertyTypeQuery) FirstX(ctx context.Context) *ResourcePropertyType {
	node, err := rptq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ResourcePropertyType id in the query. Returns *NotFoundError when no id was found.
func (rptq *ResourcePropertyTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rptq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resourcepropertytype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rptq *ResourcePropertyTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := rptq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ResourcePropertyType entity in the query, returns an error if not exactly one entity was returned.
func (rptq *ResourcePropertyTypeQuery) Only(ctx context.Context) (*ResourcePropertyType, error) {
	nodes, err := rptq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resourcepropertytype.Label}
	default:
		return nil, &NotSingularError{resourcepropertytype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rptq *ResourcePropertyTypeQuery) OnlyX(ctx context.Context) *ResourcePropertyType {
	node, err := rptq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ResourcePropertyType id in the query, returns an error if not exactly one id was returned.
func (rptq *ResourcePropertyTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rptq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resourcepropertytype.Label}
	default:
		err = &NotSingularError{resourcepropertytype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rptq *ResourcePropertyTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := rptq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResourcePropertyTypes.
func (rptq *ResourcePropertyTypeQuery) All(ctx context.Context) ([]*ResourcePropertyType, error) {
	if err := rptq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rptq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rptq *ResourcePropertyTypeQuery) AllX(ctx context.Context) []*ResourcePropertyType {
	nodes, err := rptq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ResourcePropertyType ids.
func (rptq *ResourcePropertyTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rptq.Select(resourcepropertytype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rptq *ResourcePropertyTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := rptq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rptq *ResourcePropertyTypeQuery) Count(ctx context.Context) (int, error) {
	if err := rptq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rptq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rptq *ResourcePropertyTypeQuery) CountX(ctx context.Context) int {
	count, err := rptq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rptq *ResourcePropertyTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := rptq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rptq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rptq *ResourcePropertyTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := rptq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rptq *ResourcePropertyTypeQuery) Clone() *ResourcePropertyTypeQuery {
	if rptq == nil {
		return nil
	}
	return &ResourcePropertyTypeQuery{
		config:                    rptq.config,
		limit:                     rptq.limit,
		offset:                    rptq.offset,
		order:                     append([]OrderFunc{}, rptq.order...),
		unique:                    append([]string{}, rptq.unique...),
		predicates:                append([]predicate.ResourcePropertyType{}, rptq.predicates...),
		withResourceSpecification: rptq.withResourceSpecification.Clone(),
		withPropertyCategory:      rptq.withPropertyCategory.Clone(),
		// clone intermediate query.
		sql:  rptq.sql.Clone(),
		path: rptq.path,
	}
}

//  WithResourceSpecification tells the query-builder to eager-loads the nodes that are connected to
// the "resourceSpecification" edge. The optional arguments used to configure the query builder of the edge.
func (rptq *ResourcePropertyTypeQuery) WithResourceSpecification(opts ...func(*ResourceSpecificationQuery)) *ResourcePropertyTypeQuery {
	query := &ResourceSpecificationQuery{config: rptq.config}
	for _, opt := range opts {
		opt(query)
	}
	rptq.withResourceSpecification = query
	return rptq
}

//  WithPropertyCategory tells the query-builder to eager-loads the nodes that are connected to
// the "property_category" edge. The optional arguments used to configure the query builder of the edge.
func (rptq *ResourcePropertyTypeQuery) WithPropertyCategory(opts ...func(*PropertyCategoryQuery)) *ResourcePropertyTypeQuery {
	query := &PropertyCategoryQuery{config: rptq.config}
	for _, opt := range opts {
		opt(query)
	}
	rptq.withPropertyCategory = query
	return rptq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResourcePropertyType.Query().
//		GroupBy(resourcepropertytype.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rptq *ResourcePropertyTypeQuery) GroupBy(field string, fields ...string) *ResourcePropertyTypeGroupBy {
	group := &ResourcePropertyTypeGroupBy{config: rptq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rptq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rptq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ResourcePropertyType.Query().
//		Select(resourcepropertytype.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rptq *ResourcePropertyTypeQuery) Select(field string, fields ...string) *ResourcePropertyTypeSelect {
	selector := &ResourcePropertyTypeSelect{config: rptq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rptq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rptq.sqlQuery(), nil
	}
	return selector
}

func (rptq *ResourcePropertyTypeQuery) prepareQuery(ctx context.Context) error {
	if rptq.path != nil {
		prev, err := rptq.path(ctx)
		if err != nil {
			return err
		}
		rptq.sql = prev
	}
	if err := resourcepropertytype.Policy.EvalQuery(ctx, rptq); err != nil {
		return err
	}
	return nil
}

func (rptq *ResourcePropertyTypeQuery) sqlAll(ctx context.Context) ([]*ResourcePropertyType, error) {
	var (
		nodes       = []*ResourcePropertyType{}
		withFKs     = rptq.withFKs
		_spec       = rptq.querySpec()
		loadedTypes = [2]bool{
			rptq.withResourceSpecification != nil,
			rptq.withPropertyCategory != nil,
		}
	)
	if rptq.withResourceSpecification != nil || rptq.withPropertyCategory != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, resourcepropertytype.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &ResourcePropertyType{config: rptq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rptq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rptq.withResourceSpecification; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourcePropertyType)
		for i := range nodes {
			if fk := nodes[i].resource_specification_resource_property_type; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcespecification.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_specification_resource_property_type" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ResourceSpecification = n
			}
		}
	}

	if query := rptq.withPropertyCategory; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourcePropertyType)
		for i := range nodes {
			if fk := nodes[i].property_category_resource_properties_type; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(propertycategory.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "property_category_resource_properties_type" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.PropertyCategory = n
			}
		}
	}

	return nodes, nil
}

func (rptq *ResourcePropertyTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rptq.querySpec()
	return sqlgraph.CountNodes(ctx, rptq.driver, _spec)
}

func (rptq *ResourcePropertyTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rptq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rptq *ResourcePropertyTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcepropertytype.Table,
			Columns: resourcepropertytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcepropertytype.FieldID,
			},
		},
		From:   rptq.sql,
		Unique: true,
	}
	if ps := rptq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rptq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rptq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rptq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, resourcepropertytype.ValidColumn)
			}
		}
	}
	return _spec
}

func (rptq *ResourcePropertyTypeQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rptq.driver.Dialect())
	t1 := builder.Table(resourcepropertytype.Table)
	selector := builder.Select(t1.Columns(resourcepropertytype.Columns...)...).From(t1)
	if rptq.sql != nil {
		selector = rptq.sql
		selector.Select(selector.Columns(resourcepropertytype.Columns...)...)
	}
	for _, p := range rptq.predicates {
		p(selector)
	}
	for _, p := range rptq.order {
		p(selector, resourcepropertytype.ValidColumn)
	}
	if offset := rptq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rptq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ResourcePropertyTypeGroupBy is the builder for group-by ResourcePropertyType entities.
type ResourcePropertyTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rptgb *ResourcePropertyTypeGroupBy) Aggregate(fns ...AggregateFunc) *ResourcePropertyTypeGroupBy {
	rptgb.fns = append(rptgb.fns, fns...)
	return rptgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rptgb *ResourcePropertyTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rptgb.path(ctx)
	if err != nil {
		return err
	}
	rptgb.sql = query
	return rptgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rptgb *ResourcePropertyTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rptgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rptgb *ResourcePropertyTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rptgb.fields) > 1 {
		return nil, errors.New("ent: ResourcePropertyTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rptgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rptgb *ResourcePropertyTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := rptgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rptgb *ResourcePropertyTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rptgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepropertytype.Label}
	default:
		err = fmt.Errorf("ent: ResourcePropertyTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rptgb *ResourcePropertyTypeGroupBy) StringX(ctx context.Context) string {
	v, err := rptgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rptgb *ResourcePropertyTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rptgb.fields) > 1 {
		return nil, errors.New("ent: ResourcePropertyTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rptgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rptgb *ResourcePropertyTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := rptgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rptgb *ResourcePropertyTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rptgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepropertytype.Label}
	default:
		err = fmt.Errorf("ent: ResourcePropertyTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rptgb *ResourcePropertyTypeGroupBy) IntX(ctx context.Context) int {
	v, err := rptgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rptgb *ResourcePropertyTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rptgb.fields) > 1 {
		return nil, errors.New("ent: ResourcePropertyTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rptgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rptgb *ResourcePropertyTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rptgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rptgb *ResourcePropertyTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rptgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepropertytype.Label}
	default:
		err = fmt.Errorf("ent: ResourcePropertyTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rptgb *ResourcePropertyTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rptgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rptgb *ResourcePropertyTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rptgb.fields) > 1 {
		return nil, errors.New("ent: ResourcePropertyTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rptgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rptgb *ResourcePropertyTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rptgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rptgb *ResourcePropertyTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rptgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepropertytype.Label}
	default:
		err = fmt.Errorf("ent: ResourcePropertyTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rptgb *ResourcePropertyTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := rptgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rptgb *ResourcePropertyTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rptgb.fields {
		if !resourcepropertytype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rptgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rptgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rptgb *ResourcePropertyTypeGroupBy) sqlQuery() *sql.Selector {
	selector := rptgb.sql
	columns := make([]string, 0, len(rptgb.fields)+len(rptgb.fns))
	columns = append(columns, rptgb.fields...)
	for _, fn := range rptgb.fns {
		columns = append(columns, fn(selector, resourcepropertytype.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(rptgb.fields...)
}

// ResourcePropertyTypeSelect is the builder for select fields of ResourcePropertyType entities.
type ResourcePropertyTypeSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rpts *ResourcePropertyTypeSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rpts.path(ctx)
	if err != nil {
		return err
	}
	rpts.sql = query
	return rpts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rpts *ResourcePropertyTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rpts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rpts *ResourcePropertyTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rpts.fields) > 1 {
		return nil, errors.New("ent: ResourcePropertyTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rpts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rpts *ResourcePropertyTypeSelect) StringsX(ctx context.Context) []string {
	v, err := rpts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rpts *ResourcePropertyTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rpts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepropertytype.Label}
	default:
		err = fmt.Errorf("ent: ResourcePropertyTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rpts *ResourcePropertyTypeSelect) StringX(ctx context.Context) string {
	v, err := rpts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rpts *ResourcePropertyTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rpts.fields) > 1 {
		return nil, errors.New("ent: ResourcePropertyTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rpts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rpts *ResourcePropertyTypeSelect) IntsX(ctx context.Context) []int {
	v, err := rpts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rpts *ResourcePropertyTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rpts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepropertytype.Label}
	default:
		err = fmt.Errorf("ent: ResourcePropertyTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rpts *ResourcePropertyTypeSelect) IntX(ctx context.Context) int {
	v, err := rpts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rpts *ResourcePropertyTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rpts.fields) > 1 {
		return nil, errors.New("ent: ResourcePropertyTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rpts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rpts *ResourcePropertyTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rpts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rpts *ResourcePropertyTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rpts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepropertytype.Label}
	default:
		err = fmt.Errorf("ent: ResourcePropertyTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rpts *ResourcePropertyTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := rpts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rpts *ResourcePropertyTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rpts.fields) > 1 {
		return nil, errors.New("ent: ResourcePropertyTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rpts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rpts *ResourcePropertyTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := rpts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rpts *ResourcePropertyTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rpts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepropertytype.Label}
	default:
		err = fmt.Errorf("ent: ResourcePropertyTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rpts *ResourcePropertyTypeSelect) BoolX(ctx context.Context) bool {
	v, err := rpts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rpts *ResourcePropertyTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rpts.fields {
		if !resourcepropertytype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := rpts.sqlQuery().Query()
	if err := rpts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rpts *ResourcePropertyTypeSelect) sqlQuery() sql.Querier {
	selector := rpts.sql
	selector.Select(selector.Columns(rpts.fields...)...)
	return selector
}
