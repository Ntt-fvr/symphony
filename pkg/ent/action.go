// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/action"
	"github.com/facebookincubator/symphony/pkg/ent/execution"
	"github.com/facebookincubator/symphony/pkg/ent/ruleaction"
)

// Action is the model entity for the Action schema.
type Action struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Status holds the value of the "Status" field.
	Status action.Status `json:"Status,omitempty"`
	// UserAction holds the value of the "UserAction" field.
	UserAction action.UserAction `json:"UserAction,omitempty"`
	// LogExecution holds the value of the "logExecution" field.
	LogExecution string `json:"logExecution,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActionQuery when eager-loading is set.
	Edges                   ActionEdges `json:"edges"`
	execution_execution     *int
	rule_action_rule_action *int
}

// ActionEdges holds the relations/edges for other nodes in the graph.
type ActionEdges struct {
	// Execution holds the value of the execution edge.
	Execution *Execution
	// Ruleaction holds the value of the ruleaction edge.
	Ruleaction *RuleAction
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ExecutionOrErr returns the Execution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActionEdges) ExecutionOrErr() (*Execution, error) {
	if e.loadedTypes[0] {
		if e.Execution == nil {
			// The edge execution was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: execution.Label}
		}
		return e.Execution, nil
	}
	return nil, &NotLoadedError{edge: "execution"}
}

// RuleactionOrErr returns the Ruleaction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActionEdges) RuleactionOrErr() (*RuleAction, error) {
	if e.loadedTypes[1] {
		if e.Ruleaction == nil {
			// The edge ruleaction was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ruleaction.Label}
		}
		return e.Ruleaction, nil
	}
	return nil, &NotLoadedError{edge: "ruleaction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Action) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // Status
		&sql.NullString{}, // UserAction
		&sql.NullString{}, // logExecution
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Action) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // execution_execution
		&sql.NullInt64{}, // rule_action_rule_action
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Action fields.
func (a *Action) assignValues(values ...interface{}) error {
	if m, n := len(values), len(action.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		a.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		a.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Status", values[2])
	} else if value.Valid {
		a.Status = action.Status(value.String)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field UserAction", values[3])
	} else if value.Valid {
		a.UserAction = action.UserAction(value.String)
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field logExecution", values[4])
	} else if value.Valid {
		a.LogExecution = value.String
	}
	values = values[5:]
	if len(values) == len(action.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field execution_execution", value)
		} else if value.Valid {
			a.execution_execution = new(int)
			*a.execution_execution = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field rule_action_rule_action", value)
		} else if value.Valid {
			a.rule_action_rule_action = new(int)
			*a.rule_action_rule_action = int(value.Int64)
		}
	}
	return nil
}

// QueryExecution queries the execution edge of the Action.
func (a *Action) QueryExecution() *ExecutionQuery {
	return (&ActionClient{config: a.config}).QueryExecution(a)
}

// QueryRuleaction queries the ruleaction edge of the Action.
func (a *Action) QueryRuleaction() *RuleActionQuery {
	return (&ActionClient{config: a.config}).QueryRuleaction(a)
}

// Update returns a builder for updating this Action.
// Note that, you need to call Action.Unwrap() before calling this method, if this Action
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Action) Update() *ActionUpdateOne {
	return (&ActionClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Action) Unwrap() *Action {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Action is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Action) String() string {
	var builder strings.Builder
	builder.WriteString("Action(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", Status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", UserAction=")
	builder.WriteString(fmt.Sprintf("%v", a.UserAction))
	builder.WriteString(", logExecution=")
	builder.WriteString(a.LogExecution)
	builder.WriteByte(')')
	return builder.String()
}

// Actions is a parsable slice of Action.
type Actions []*Action

func (a Actions) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
