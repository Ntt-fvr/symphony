// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/reconciliationrule"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/ruleaction"
)

// ReconciliationRuleQuery is the builder for querying ReconciliationRule entities.
type ReconciliationRuleQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ReconciliationRule
	// eager-loading edges.
	withReconciliationRuleType          *ResourceTypeQuery
	withReconciliationRuleSpecification *ResourceSpecificationQuery
	withReconciliationRuleRuleAction    *RuleActionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rrq *ReconciliationRuleQuery) Where(ps ...predicate.ReconciliationRule) *ReconciliationRuleQuery {
	rrq.predicates = append(rrq.predicates, ps...)
	return rrq
}

// Limit adds a limit step to the query.
func (rrq *ReconciliationRuleQuery) Limit(limit int) *ReconciliationRuleQuery {
	rrq.limit = &limit
	return rrq
}

// Offset adds an offset step to the query.
func (rrq *ReconciliationRuleQuery) Offset(offset int) *ReconciliationRuleQuery {
	rrq.offset = &offset
	return rrq
}

// Order adds an order step to the query.
func (rrq *ReconciliationRuleQuery) Order(o ...OrderFunc) *ReconciliationRuleQuery {
	rrq.order = append(rrq.order, o...)
	return rrq
}

// QueryReconciliationRuleType chains the current query on the reconciliation_rule_type edge.
func (rrq *ReconciliationRuleQuery) QueryReconciliationRuleType() *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: rrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(reconciliationrule.Table, reconciliationrule.FieldID, selector),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, reconciliationrule.ReconciliationRuleTypeTable, reconciliationrule.ReconciliationRuleTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReconciliationRuleSpecification chains the current query on the reconciliation_rule_specification edge.
func (rrq *ReconciliationRuleQuery) QueryReconciliationRuleSpecification() *ResourceSpecificationQuery {
	query := &ResourceSpecificationQuery{config: rrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(reconciliationrule.Table, reconciliationrule.FieldID, selector),
			sqlgraph.To(resourcespecification.Table, resourcespecification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, reconciliationrule.ReconciliationRuleSpecificationTable, reconciliationrule.ReconciliationRuleSpecificationColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReconciliationRuleRuleAction chains the current query on the reconciliation_rule_rule_action edge.
func (rrq *ReconciliationRuleQuery) QueryReconciliationRuleRuleAction() *RuleActionQuery {
	query := &RuleActionQuery{config: rrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(reconciliationrule.Table, reconciliationrule.FieldID, selector),
			sqlgraph.To(ruleaction.Table, ruleaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, reconciliationrule.ReconciliationRuleRuleActionTable, reconciliationrule.ReconciliationRuleRuleActionColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ReconciliationRule entity in the query. Returns *NotFoundError when no reconciliationrule was found.
func (rrq *ReconciliationRuleQuery) First(ctx context.Context) (*ReconciliationRule, error) {
	nodes, err := rrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{reconciliationrule.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rrq *ReconciliationRuleQuery) FirstX(ctx context.Context) *ReconciliationRule {
	node, err := rrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ReconciliationRule id in the query. Returns *NotFoundError when no id was found.
func (rrq *ReconciliationRuleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{reconciliationrule.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rrq *ReconciliationRuleQuery) FirstIDX(ctx context.Context) int {
	id, err := rrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ReconciliationRule entity in the query, returns an error if not exactly one entity was returned.
func (rrq *ReconciliationRuleQuery) Only(ctx context.Context) (*ReconciliationRule, error) {
	nodes, err := rrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{reconciliationrule.Label}
	default:
		return nil, &NotSingularError{reconciliationrule.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rrq *ReconciliationRuleQuery) OnlyX(ctx context.Context) *ReconciliationRule {
	node, err := rrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ReconciliationRule id in the query, returns an error if not exactly one id was returned.
func (rrq *ReconciliationRuleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{reconciliationrule.Label}
	default:
		err = &NotSingularError{reconciliationrule.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rrq *ReconciliationRuleQuery) OnlyIDX(ctx context.Context) int {
	id, err := rrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ReconciliationRules.
func (rrq *ReconciliationRuleQuery) All(ctx context.Context) ([]*ReconciliationRule, error) {
	if err := rrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rrq *ReconciliationRuleQuery) AllX(ctx context.Context) []*ReconciliationRule {
	nodes, err := rrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ReconciliationRule ids.
func (rrq *ReconciliationRuleQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rrq.Select(reconciliationrule.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rrq *ReconciliationRuleQuery) IDsX(ctx context.Context) []int {
	ids, err := rrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rrq *ReconciliationRuleQuery) Count(ctx context.Context) (int, error) {
	if err := rrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rrq *ReconciliationRuleQuery) CountX(ctx context.Context) int {
	count, err := rrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rrq *ReconciliationRuleQuery) Exist(ctx context.Context) (bool, error) {
	if err := rrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rrq *ReconciliationRuleQuery) ExistX(ctx context.Context) bool {
	exist, err := rrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rrq *ReconciliationRuleQuery) Clone() *ReconciliationRuleQuery {
	if rrq == nil {
		return nil
	}
	return &ReconciliationRuleQuery{
		config:                              rrq.config,
		limit:                               rrq.limit,
		offset:                              rrq.offset,
		order:                               append([]OrderFunc{}, rrq.order...),
		unique:                              append([]string{}, rrq.unique...),
		predicates:                          append([]predicate.ReconciliationRule{}, rrq.predicates...),
		withReconciliationRuleType:          rrq.withReconciliationRuleType.Clone(),
		withReconciliationRuleSpecification: rrq.withReconciliationRuleSpecification.Clone(),
		withReconciliationRuleRuleAction:    rrq.withReconciliationRuleRuleAction.Clone(),
		// clone intermediate query.
		sql:  rrq.sql.Clone(),
		path: rrq.path,
	}
}

//  WithReconciliationRuleType tells the query-builder to eager-loads the nodes that are connected to
// the "reconciliation_rule_type" edge. The optional arguments used to configure the query builder of the edge.
func (rrq *ReconciliationRuleQuery) WithReconciliationRuleType(opts ...func(*ResourceTypeQuery)) *ReconciliationRuleQuery {
	query := &ResourceTypeQuery{config: rrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rrq.withReconciliationRuleType = query
	return rrq
}

//  WithReconciliationRuleSpecification tells the query-builder to eager-loads the nodes that are connected to
// the "reconciliation_rule_specification" edge. The optional arguments used to configure the query builder of the edge.
func (rrq *ReconciliationRuleQuery) WithReconciliationRuleSpecification(opts ...func(*ResourceSpecificationQuery)) *ReconciliationRuleQuery {
	query := &ResourceSpecificationQuery{config: rrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rrq.withReconciliationRuleSpecification = query
	return rrq
}

//  WithReconciliationRuleRuleAction tells the query-builder to eager-loads the nodes that are connected to
// the "reconciliation_rule_rule_action" edge. The optional arguments used to configure the query builder of the edge.
func (rrq *ReconciliationRuleQuery) WithReconciliationRuleRuleAction(opts ...func(*RuleActionQuery)) *ReconciliationRuleQuery {
	query := &RuleActionQuery{config: rrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rrq.withReconciliationRuleRuleAction = query
	return rrq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ReconciliationRule.Query().
//		GroupBy(reconciliationrule.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rrq *ReconciliationRuleQuery) GroupBy(field string, fields ...string) *ReconciliationRuleGroupBy {
	group := &ReconciliationRuleGroupBy{config: rrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rrq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ReconciliationRule.Query().
//		Select(reconciliationrule.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rrq *ReconciliationRuleQuery) Select(field string, fields ...string) *ReconciliationRuleSelect {
	selector := &ReconciliationRuleSelect{config: rrq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rrq.sqlQuery(), nil
	}
	return selector
}

func (rrq *ReconciliationRuleQuery) prepareQuery(ctx context.Context) error {
	if rrq.path != nil {
		prev, err := rrq.path(ctx)
		if err != nil {
			return err
		}
		rrq.sql = prev
	}
	if err := reconciliationrule.Policy.EvalQuery(ctx, rrq); err != nil {
		return err
	}
	return nil
}

func (rrq *ReconciliationRuleQuery) sqlAll(ctx context.Context) ([]*ReconciliationRule, error) {
	var (
		nodes       = []*ReconciliationRule{}
		_spec       = rrq.querySpec()
		loadedTypes = [3]bool{
			rrq.withReconciliationRuleType != nil,
			rrq.withReconciliationRuleSpecification != nil,
			rrq.withReconciliationRuleRuleAction != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &ReconciliationRule{config: rrq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rrq.withReconciliationRuleType; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ReconciliationRule)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ReconciliationRuleType = []*ResourceType{}
		}
		query.withFKs = true
		query.Where(predicate.ResourceType(func(s *sql.Selector) {
			s.Where(sql.InValues(reconciliationrule.ReconciliationRuleTypeColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.reconciliation_rule_reconciliation_rule_type
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "reconciliation_rule_reconciliation_rule_type" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "reconciliation_rule_reconciliation_rule_type" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ReconciliationRuleType = append(node.Edges.ReconciliationRuleType, n)
		}
	}

	if query := rrq.withReconciliationRuleSpecification; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ReconciliationRule)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ReconciliationRuleSpecification = []*ResourceSpecification{}
		}
		query.withFKs = true
		query.Where(predicate.ResourceSpecification(func(s *sql.Selector) {
			s.Where(sql.InValues(reconciliationrule.ReconciliationRuleSpecificationColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.reconciliation_rule_reconciliation_rule_specification
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "reconciliation_rule_reconciliation_rule_specification" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "reconciliation_rule_reconciliation_rule_specification" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ReconciliationRuleSpecification = append(node.Edges.ReconciliationRuleSpecification, n)
		}
	}

	if query := rrq.withReconciliationRuleRuleAction; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ReconciliationRule)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ReconciliationRuleRuleAction = []*RuleAction{}
		}
		query.withFKs = true
		query.Where(predicate.RuleAction(func(s *sql.Selector) {
			s.Where(sql.InValues(reconciliationrule.ReconciliationRuleRuleActionColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.reconciliation_rule_reconciliation_rule_rule_action
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "reconciliation_rule_reconciliation_rule_rule_action" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "reconciliation_rule_reconciliation_rule_rule_action" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ReconciliationRuleRuleAction = append(node.Edges.ReconciliationRuleRuleAction, n)
		}
	}

	return nodes, nil
}

func (rrq *ReconciliationRuleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rrq.querySpec()
	return sqlgraph.CountNodes(ctx, rrq.driver, _spec)
}

func (rrq *ReconciliationRuleQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rrq *ReconciliationRuleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reconciliationrule.Table,
			Columns: reconciliationrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reconciliationrule.FieldID,
			},
		},
		From:   rrq.sql,
		Unique: true,
	}
	if ps := rrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, reconciliationrule.ValidColumn)
			}
		}
	}
	return _spec
}

func (rrq *ReconciliationRuleQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rrq.driver.Dialect())
	t1 := builder.Table(reconciliationrule.Table)
	selector := builder.Select(t1.Columns(reconciliationrule.Columns...)...).From(t1)
	if rrq.sql != nil {
		selector = rrq.sql
		selector.Select(selector.Columns(reconciliationrule.Columns...)...)
	}
	for _, p := range rrq.predicates {
		p(selector)
	}
	for _, p := range rrq.order {
		p(selector, reconciliationrule.ValidColumn)
	}
	if offset := rrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ReconciliationRuleGroupBy is the builder for group-by ReconciliationRule entities.
type ReconciliationRuleGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rrgb *ReconciliationRuleGroupBy) Aggregate(fns ...AggregateFunc) *ReconciliationRuleGroupBy {
	rrgb.fns = append(rrgb.fns, fns...)
	return rrgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rrgb *ReconciliationRuleGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rrgb.path(ctx)
	if err != nil {
		return err
	}
	rrgb.sql = query
	return rrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rrgb *ReconciliationRuleGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ReconciliationRuleGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rrgb.fields) > 1 {
		return nil, errors.New("ent: ReconciliationRuleGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rrgb *ReconciliationRuleGroupBy) StringsX(ctx context.Context) []string {
	v, err := rrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ReconciliationRuleGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{reconciliationrule.Label}
	default:
		err = fmt.Errorf("ent: ReconciliationRuleGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rrgb *ReconciliationRuleGroupBy) StringX(ctx context.Context) string {
	v, err := rrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ReconciliationRuleGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rrgb.fields) > 1 {
		return nil, errors.New("ent: ReconciliationRuleGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rrgb *ReconciliationRuleGroupBy) IntsX(ctx context.Context) []int {
	v, err := rrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ReconciliationRuleGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{reconciliationrule.Label}
	default:
		err = fmt.Errorf("ent: ReconciliationRuleGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rrgb *ReconciliationRuleGroupBy) IntX(ctx context.Context) int {
	v, err := rrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ReconciliationRuleGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rrgb.fields) > 1 {
		return nil, errors.New("ent: ReconciliationRuleGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rrgb *ReconciliationRuleGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ReconciliationRuleGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{reconciliationrule.Label}
	default:
		err = fmt.Errorf("ent: ReconciliationRuleGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rrgb *ReconciliationRuleGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ReconciliationRuleGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rrgb.fields) > 1 {
		return nil, errors.New("ent: ReconciliationRuleGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rrgb *ReconciliationRuleGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ReconciliationRuleGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{reconciliationrule.Label}
	default:
		err = fmt.Errorf("ent: ReconciliationRuleGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rrgb *ReconciliationRuleGroupBy) BoolX(ctx context.Context) bool {
	v, err := rrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rrgb *ReconciliationRuleGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rrgb.fields {
		if !reconciliationrule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rrgb *ReconciliationRuleGroupBy) sqlQuery() *sql.Selector {
	selector := rrgb.sql
	columns := make([]string, 0, len(rrgb.fields)+len(rrgb.fns))
	columns = append(columns, rrgb.fields...)
	for _, fn := range rrgb.fns {
		columns = append(columns, fn(selector, reconciliationrule.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(rrgb.fields...)
}

// ReconciliationRuleSelect is the builder for select fields of ReconciliationRule entities.
type ReconciliationRuleSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rrs *ReconciliationRuleSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rrs.path(ctx)
	if err != nil {
		return err
	}
	rrs.sql = query
	return rrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rrs *ReconciliationRuleSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rrs *ReconciliationRuleSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rrs.fields) > 1 {
		return nil, errors.New("ent: ReconciliationRuleSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rrs *ReconciliationRuleSelect) StringsX(ctx context.Context) []string {
	v, err := rrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rrs *ReconciliationRuleSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{reconciliationrule.Label}
	default:
		err = fmt.Errorf("ent: ReconciliationRuleSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rrs *ReconciliationRuleSelect) StringX(ctx context.Context) string {
	v, err := rrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rrs *ReconciliationRuleSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rrs.fields) > 1 {
		return nil, errors.New("ent: ReconciliationRuleSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rrs *ReconciliationRuleSelect) IntsX(ctx context.Context) []int {
	v, err := rrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rrs *ReconciliationRuleSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{reconciliationrule.Label}
	default:
		err = fmt.Errorf("ent: ReconciliationRuleSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rrs *ReconciliationRuleSelect) IntX(ctx context.Context) int {
	v, err := rrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rrs *ReconciliationRuleSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rrs.fields) > 1 {
		return nil, errors.New("ent: ReconciliationRuleSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rrs *ReconciliationRuleSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rrs *ReconciliationRuleSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{reconciliationrule.Label}
	default:
		err = fmt.Errorf("ent: ReconciliationRuleSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rrs *ReconciliationRuleSelect) Float64X(ctx context.Context) float64 {
	v, err := rrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rrs *ReconciliationRuleSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rrs.fields) > 1 {
		return nil, errors.New("ent: ReconciliationRuleSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rrs *ReconciliationRuleSelect) BoolsX(ctx context.Context) []bool {
	v, err := rrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rrs *ReconciliationRuleSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{reconciliationrule.Label}
	default:
		err = fmt.Errorf("ent: ReconciliationRuleSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rrs *ReconciliationRuleSelect) BoolX(ctx context.Context) bool {
	v, err := rrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rrs *ReconciliationRuleSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rrs.fields {
		if !reconciliationrule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := rrs.sqlQuery().Query()
	if err := rrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rrs *ReconciliationRuleSelect) sqlQuery() sql.Querier {
	selector := rrs.sql
	selector.Select(selector.Columns(rrs.fields...)...)
	return selector
}
