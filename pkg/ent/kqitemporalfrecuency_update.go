// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/kqitemporalfrecuency"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// KqiTemporalFrecuencyUpdate is the builder for updating KqiTemporalFrecuency entities.
type KqiTemporalFrecuencyUpdate struct {
	config
	hooks    []Hook
	mutation *KqiTemporalFrecuencyMutation
}

// Where adds a new predicate for the builder.
func (ktfu *KqiTemporalFrecuencyUpdate) Where(ps ...predicate.KqiTemporalFrecuency) *KqiTemporalFrecuencyUpdate {
	ktfu.mutation.predicates = append(ktfu.mutation.predicates, ps...)
	return ktfu
}

// SetName sets the name field.
func (ktfu *KqiTemporalFrecuencyUpdate) SetName(s string) *KqiTemporalFrecuencyUpdate {
	ktfu.mutation.SetName(s)
	return ktfu
}

// AddKqiTemporalFrecuencyFkIDs adds the kqiTemporalFrecuencyFk edge to Kqi by ids.
func (ktfu *KqiTemporalFrecuencyUpdate) AddKqiTemporalFrecuencyFkIDs(ids ...int) *KqiTemporalFrecuencyUpdate {
	ktfu.mutation.AddKqiTemporalFrecuencyFkIDs(ids...)
	return ktfu
}

// AddKqiTemporalFrecuencyFk adds the kqiTemporalFrecuencyFk edges to Kqi.
func (ktfu *KqiTemporalFrecuencyUpdate) AddKqiTemporalFrecuencyFk(k ...*Kqi) *KqiTemporalFrecuencyUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ktfu.AddKqiTemporalFrecuencyFkIDs(ids...)
}

// Mutation returns the KqiTemporalFrecuencyMutation object of the builder.
func (ktfu *KqiTemporalFrecuencyUpdate) Mutation() *KqiTemporalFrecuencyMutation {
	return ktfu.mutation
}

// ClearKqiTemporalFrecuencyFk clears all "kqiTemporalFrecuencyFk" edges to type Kqi.
func (ktfu *KqiTemporalFrecuencyUpdate) ClearKqiTemporalFrecuencyFk() *KqiTemporalFrecuencyUpdate {
	ktfu.mutation.ClearKqiTemporalFrecuencyFk()
	return ktfu
}

// RemoveKqiTemporalFrecuencyFkIDs removes the kqiTemporalFrecuencyFk edge to Kqi by ids.
func (ktfu *KqiTemporalFrecuencyUpdate) RemoveKqiTemporalFrecuencyFkIDs(ids ...int) *KqiTemporalFrecuencyUpdate {
	ktfu.mutation.RemoveKqiTemporalFrecuencyFkIDs(ids...)
	return ktfu
}

// RemoveKqiTemporalFrecuencyFk removes kqiTemporalFrecuencyFk edges to Kqi.
func (ktfu *KqiTemporalFrecuencyUpdate) RemoveKqiTemporalFrecuencyFk(k ...*Kqi) *KqiTemporalFrecuencyUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ktfu.RemoveKqiTemporalFrecuencyFkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ktfu *KqiTemporalFrecuencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ktfu.defaults()
	if len(ktfu.hooks) == 0 {
		if err = ktfu.check(); err != nil {
			return 0, err
		}
		affected, err = ktfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KqiTemporalFrecuencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ktfu.check(); err != nil {
				return 0, err
			}
			ktfu.mutation = mutation
			affected, err = ktfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ktfu.hooks) - 1; i >= 0; i-- {
			mut = ktfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ktfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ktfu *KqiTemporalFrecuencyUpdate) SaveX(ctx context.Context) int {
	affected, err := ktfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ktfu *KqiTemporalFrecuencyUpdate) Exec(ctx context.Context) error {
	_, err := ktfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ktfu *KqiTemporalFrecuencyUpdate) ExecX(ctx context.Context) {
	if err := ktfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ktfu *KqiTemporalFrecuencyUpdate) defaults() {
	if _, ok := ktfu.mutation.UpdateTime(); !ok {
		v := kqitemporalfrecuency.UpdateDefaultUpdateTime()
		ktfu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ktfu *KqiTemporalFrecuencyUpdate) check() error {
	if v, ok := ktfu.mutation.Name(); ok {
		if err := kqitemporalfrecuency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ktfu *KqiTemporalFrecuencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kqitemporalfrecuency.Table,
			Columns: kqitemporalfrecuency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kqitemporalfrecuency.FieldID,
			},
		},
	}
	if ps := ktfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ktfu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitemporalfrecuency.FieldUpdateTime,
		})
	}
	if value, ok := ktfu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqitemporalfrecuency.FieldName,
		})
	}
	if ktfu.mutation.KqiTemporalFrecuencyFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitemporalfrecuency.KqiTemporalFrecuencyFkTable,
			Columns: []string{kqitemporalfrecuency.KqiTemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ktfu.mutation.RemovedKqiTemporalFrecuencyFkIDs(); len(nodes) > 0 && !ktfu.mutation.KqiTemporalFrecuencyFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitemporalfrecuency.KqiTemporalFrecuencyFkTable,
			Columns: []string{kqitemporalfrecuency.KqiTemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ktfu.mutation.KqiTemporalFrecuencyFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitemporalfrecuency.KqiTemporalFrecuencyFkTable,
			Columns: []string{kqitemporalfrecuency.KqiTemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ktfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kqitemporalfrecuency.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KqiTemporalFrecuencyUpdateOne is the builder for updating a single KqiTemporalFrecuency entity.
type KqiTemporalFrecuencyUpdateOne struct {
	config
	hooks    []Hook
	mutation *KqiTemporalFrecuencyMutation
}

// SetName sets the name field.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) SetName(s string) *KqiTemporalFrecuencyUpdateOne {
	ktfuo.mutation.SetName(s)
	return ktfuo
}

// AddKqiTemporalFrecuencyFkIDs adds the kqiTemporalFrecuencyFk edge to Kqi by ids.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) AddKqiTemporalFrecuencyFkIDs(ids ...int) *KqiTemporalFrecuencyUpdateOne {
	ktfuo.mutation.AddKqiTemporalFrecuencyFkIDs(ids...)
	return ktfuo
}

// AddKqiTemporalFrecuencyFk adds the kqiTemporalFrecuencyFk edges to Kqi.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) AddKqiTemporalFrecuencyFk(k ...*Kqi) *KqiTemporalFrecuencyUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ktfuo.AddKqiTemporalFrecuencyFkIDs(ids...)
}

// Mutation returns the KqiTemporalFrecuencyMutation object of the builder.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) Mutation() *KqiTemporalFrecuencyMutation {
	return ktfuo.mutation
}

// ClearKqiTemporalFrecuencyFk clears all "kqiTemporalFrecuencyFk" edges to type Kqi.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) ClearKqiTemporalFrecuencyFk() *KqiTemporalFrecuencyUpdateOne {
	ktfuo.mutation.ClearKqiTemporalFrecuencyFk()
	return ktfuo
}

// RemoveKqiTemporalFrecuencyFkIDs removes the kqiTemporalFrecuencyFk edge to Kqi by ids.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) RemoveKqiTemporalFrecuencyFkIDs(ids ...int) *KqiTemporalFrecuencyUpdateOne {
	ktfuo.mutation.RemoveKqiTemporalFrecuencyFkIDs(ids...)
	return ktfuo
}

// RemoveKqiTemporalFrecuencyFk removes kqiTemporalFrecuencyFk edges to Kqi.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) RemoveKqiTemporalFrecuencyFk(k ...*Kqi) *KqiTemporalFrecuencyUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ktfuo.RemoveKqiTemporalFrecuencyFkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) Save(ctx context.Context) (*KqiTemporalFrecuency, error) {
	var (
		err  error
		node *KqiTemporalFrecuency
	)
	ktfuo.defaults()
	if len(ktfuo.hooks) == 0 {
		if err = ktfuo.check(); err != nil {
			return nil, err
		}
		node, err = ktfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KqiTemporalFrecuencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ktfuo.check(); err != nil {
				return nil, err
			}
			ktfuo.mutation = mutation
			node, err = ktfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ktfuo.hooks) - 1; i >= 0; i-- {
			mut = ktfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ktfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) SaveX(ctx context.Context) *KqiTemporalFrecuency {
	node, err := ktfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) Exec(ctx context.Context) error {
	_, err := ktfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) ExecX(ctx context.Context) {
	if err := ktfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) defaults() {
	if _, ok := ktfuo.mutation.UpdateTime(); !ok {
		v := kqitemporalfrecuency.UpdateDefaultUpdateTime()
		ktfuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ktfuo *KqiTemporalFrecuencyUpdateOne) check() error {
	if v, ok := ktfuo.mutation.Name(); ok {
		if err := kqitemporalfrecuency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ktfuo *KqiTemporalFrecuencyUpdateOne) sqlSave(ctx context.Context) (_node *KqiTemporalFrecuency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kqitemporalfrecuency.Table,
			Columns: kqitemporalfrecuency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kqitemporalfrecuency.FieldID,
			},
		},
	}
	id, ok := ktfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KqiTemporalFrecuency.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ktfuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitemporalfrecuency.FieldUpdateTime,
		})
	}
	if value, ok := ktfuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqitemporalfrecuency.FieldName,
		})
	}
	if ktfuo.mutation.KqiTemporalFrecuencyFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitemporalfrecuency.KqiTemporalFrecuencyFkTable,
			Columns: []string{kqitemporalfrecuency.KqiTemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ktfuo.mutation.RemovedKqiTemporalFrecuencyFkIDs(); len(nodes) > 0 && !ktfuo.mutation.KqiTemporalFrecuencyFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitemporalfrecuency.KqiTemporalFrecuencyFkTable,
			Columns: []string{kqitemporalfrecuency.KqiTemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ktfuo.mutation.KqiTemporalFrecuencyFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitemporalfrecuency.KqiTemporalFrecuencyFkTable,
			Columns: []string{kqitemporalfrecuency.KqiTemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KqiTemporalFrecuency{config: ktfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ktfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kqitemporalfrecuency.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
