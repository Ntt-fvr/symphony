// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecificationitems"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecificationrelationship"
)

// ResourceSpecificationItems is the model entity for the ResourceSpecificationItems schema.
type ResourceSpecificationItems struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceSpecificationItemsQuery when eager-loading is set.
	Edges                                               ResourceSpecificationItemsEdges `json:"edges"`
	resource_specification_resource_specification_items *int
	resource_specification_relationship_resource_sr     *int
}

// ResourceSpecificationItemsEdges holds the relations/edges for other nodes in the graph.
type ResourceSpecificationItemsEdges struct {
	// Resourcespecificationrelationship holds the value of the resourcespecificationrelationship edge.
	Resourcespecificationrelationship *ResourceSpecificationRelationship
	// Resourcespecificationitems holds the value of the resourcespecificationitems edge.
	Resourcespecificationitems *ResourceSpecification
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResourcespecificationrelationshipOrErr returns the Resourcespecificationrelationship value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceSpecificationItemsEdges) ResourcespecificationrelationshipOrErr() (*ResourceSpecificationRelationship, error) {
	if e.loadedTypes[0] {
		if e.Resourcespecificationrelationship == nil {
			// The edge resourcespecificationrelationship was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcespecificationrelationship.Label}
		}
		return e.Resourcespecificationrelationship, nil
	}
	return nil, &NotLoadedError{edge: "resourcespecificationrelationship"}
}

// ResourcespecificationitemsOrErr returns the Resourcespecificationitems value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceSpecificationItemsEdges) ResourcespecificationitemsOrErr() (*ResourceSpecification, error) {
	if e.loadedTypes[1] {
		if e.Resourcespecificationitems == nil {
			// The edge resourcespecificationitems was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcespecification.Label}
		}
		return e.Resourcespecificationitems, nil
	}
	return nil, &NotLoadedError{edge: "resourcespecificationitems"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceSpecificationItems) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // create_time
		&sql.NullTime{},  // update_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ResourceSpecificationItems) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // resource_specification_resource_specification_items
		&sql.NullInt64{}, // resource_specification_relationship_resource_sr
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceSpecificationItems fields.
func (rsi *ResourceSpecificationItems) assignValues(values ...interface{}) error {
	if m, n := len(values), len(resourcespecificationitems.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rsi.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		rsi.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		rsi.UpdateTime = value.Time
	}
	values = values[2:]
	if len(values) == len(resourcespecificationitems.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_specification_resource_specification_items", value)
		} else if value.Valid {
			rsi.resource_specification_resource_specification_items = new(int)
			*rsi.resource_specification_resource_specification_items = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_specification_relationship_resource_sr", value)
		} else if value.Valid {
			rsi.resource_specification_relationship_resource_sr = new(int)
			*rsi.resource_specification_relationship_resource_sr = int(value.Int64)
		}
	}
	return nil
}

// QueryResourcespecificationrelationship queries the resourcespecificationrelationship edge of the ResourceSpecificationItems.
func (rsi *ResourceSpecificationItems) QueryResourcespecificationrelationship() *ResourceSpecificationRelationshipQuery {
	return (&ResourceSpecificationItemsClient{config: rsi.config}).QueryResourcespecificationrelationship(rsi)
}

// QueryResourcespecificationitems queries the resourcespecificationitems edge of the ResourceSpecificationItems.
func (rsi *ResourceSpecificationItems) QueryResourcespecificationitems() *ResourceSpecificationQuery {
	return (&ResourceSpecificationItemsClient{config: rsi.config}).QueryResourcespecificationitems(rsi)
}

// Update returns a builder for updating this ResourceSpecificationItems.
// Note that, you need to call ResourceSpecificationItems.Unwrap() before calling this method, if this ResourceSpecificationItems
// was returned from a transaction, and the transaction was committed or rolled back.
func (rsi *ResourceSpecificationItems) Update() *ResourceSpecificationItemsUpdateOne {
	return (&ResourceSpecificationItemsClient{config: rsi.config}).UpdateOne(rsi)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rsi *ResourceSpecificationItems) Unwrap() *ResourceSpecificationItems {
	tx, ok := rsi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourceSpecificationItems is not a transactional entity")
	}
	rsi.config.driver = tx.drv
	return rsi
}

// String implements the fmt.Stringer.
func (rsi *ResourceSpecificationItems) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceSpecificationItems(")
	builder.WriteString(fmt.Sprintf("id=%v", rsi.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(rsi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(rsi.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResourceSpecificationItemsSlice is a parsable slice of ResourceSpecificationItems.
type ResourceSpecificationItemsSlice []*ResourceSpecificationItems

func (rsi ResourceSpecificationItemsSlice) config(cfg config) {
	for _i := range rsi {
		rsi[_i].config = cfg
	}
}
