// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/countervendorformula"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
)

// CounterVendorFormulaCreate is the builder for creating a CounterVendorFormula entity.
type CounterVendorFormulaCreate struct {
	config
	mutation *CounterVendorFormulaMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (cvfc *CounterVendorFormulaCreate) SetCreateTime(t time.Time) *CounterVendorFormulaCreate {
	cvfc.mutation.SetCreateTime(t)
	return cvfc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (cvfc *CounterVendorFormulaCreate) SetNillableCreateTime(t *time.Time) *CounterVendorFormulaCreate {
	if t != nil {
		cvfc.SetCreateTime(*t)
	}
	return cvfc
}

// SetUpdateTime sets the update_time field.
func (cvfc *CounterVendorFormulaCreate) SetUpdateTime(t time.Time) *CounterVendorFormulaCreate {
	cvfc.mutation.SetUpdateTime(t)
	return cvfc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (cvfc *CounterVendorFormulaCreate) SetNillableUpdateTime(t *time.Time) *CounterVendorFormulaCreate {
	if t != nil {
		cvfc.SetUpdateTime(*t)
	}
	return cvfc
}

// SetFormulaID sets the formula edge to Formula by id.
func (cvfc *CounterVendorFormulaCreate) SetFormulaID(id int) *CounterVendorFormulaCreate {
	cvfc.mutation.SetFormulaID(id)
	return cvfc
}

// SetNillableFormulaID sets the formula edge to Formula by id if the given value is not nil.
func (cvfc *CounterVendorFormulaCreate) SetNillableFormulaID(id *int) *CounterVendorFormulaCreate {
	if id != nil {
		cvfc = cvfc.SetFormulaID(*id)
	}
	return cvfc
}

// SetFormula sets the formula edge to Formula.
func (cvfc *CounterVendorFormulaCreate) SetFormula(f *Formula) *CounterVendorFormulaCreate {
	return cvfc.SetFormulaID(f.ID)
}

// SetVendorID sets the vendor edge to Vendor by id.
func (cvfc *CounterVendorFormulaCreate) SetVendorID(id int) *CounterVendorFormulaCreate {
	cvfc.mutation.SetVendorID(id)
	return cvfc
}

// SetNillableVendorID sets the vendor edge to Vendor by id if the given value is not nil.
func (cvfc *CounterVendorFormulaCreate) SetNillableVendorID(id *int) *CounterVendorFormulaCreate {
	if id != nil {
		cvfc = cvfc.SetVendorID(*id)
	}
	return cvfc
}

// SetVendor sets the vendor edge to Vendor.
func (cvfc *CounterVendorFormulaCreate) SetVendor(v *Vendor) *CounterVendorFormulaCreate {
	return cvfc.SetVendorID(v.ID)
}

// SetCounterID sets the counter edge to Counter by id.
func (cvfc *CounterVendorFormulaCreate) SetCounterID(id int) *CounterVendorFormulaCreate {
	cvfc.mutation.SetCounterID(id)
	return cvfc
}

// SetNillableCounterID sets the counter edge to Counter by id if the given value is not nil.
func (cvfc *CounterVendorFormulaCreate) SetNillableCounterID(id *int) *CounterVendorFormulaCreate {
	if id != nil {
		cvfc = cvfc.SetCounterID(*id)
	}
	return cvfc
}

// SetCounter sets the counter edge to Counter.
func (cvfc *CounterVendorFormulaCreate) SetCounter(c *Counter) *CounterVendorFormulaCreate {
	return cvfc.SetCounterID(c.ID)
}

// Mutation returns the CounterVendorFormulaMutation object of the builder.
func (cvfc *CounterVendorFormulaCreate) Mutation() *CounterVendorFormulaMutation {
	return cvfc.mutation
}

// Save creates the CounterVendorFormula in the database.
func (cvfc *CounterVendorFormulaCreate) Save(ctx context.Context) (*CounterVendorFormula, error) {
	var (
		err  error
		node *CounterVendorFormula
	)
	cvfc.defaults()
	if len(cvfc.hooks) == 0 {
		if err = cvfc.check(); err != nil {
			return nil, err
		}
		node, err = cvfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterVendorFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cvfc.check(); err != nil {
				return nil, err
			}
			cvfc.mutation = mutation
			node, err = cvfc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cvfc.hooks) - 1; i >= 0; i-- {
			mut = cvfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cvfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cvfc *CounterVendorFormulaCreate) SaveX(ctx context.Context) *CounterVendorFormula {
	v, err := cvfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cvfc *CounterVendorFormulaCreate) defaults() {
	if _, ok := cvfc.mutation.CreateTime(); !ok {
		v := countervendorformula.DefaultCreateTime()
		cvfc.mutation.SetCreateTime(v)
	}
	if _, ok := cvfc.mutation.UpdateTime(); !ok {
		v := countervendorformula.DefaultUpdateTime()
		cvfc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvfc *CounterVendorFormulaCreate) check() error {
	if _, ok := cvfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := cvfc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (cvfc *CounterVendorFormulaCreate) sqlSave(ctx context.Context) (*CounterVendorFormula, error) {
	_node, _spec := cvfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cvfc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cvfc *CounterVendorFormulaCreate) createSpec() (*CounterVendorFormula, *sqlgraph.CreateSpec) {
	var (
		_node = &CounterVendorFormula{config: cvfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: countervendorformula.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: countervendorformula.FieldID,
			},
		}
	)
	if value, ok := cvfc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: countervendorformula.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cvfc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: countervendorformula.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := cvfc.mutation.FormulaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.FormulaTable,
			Columns: []string{countervendorformula.FormulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cvfc.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.VendorTable,
			Columns: []string{countervendorformula.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cvfc.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.CounterTable,
			Columns: []string{countervendorformula.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CounterVendorFormulaCreateBulk is the builder for creating a bulk of CounterVendorFormula entities.
type CounterVendorFormulaCreateBulk struct {
	config
	builders []*CounterVendorFormulaCreate
}

// Save creates the CounterVendorFormula entities in the database.
func (cvfcb *CounterVendorFormulaCreateBulk) Save(ctx context.Context) ([]*CounterVendorFormula, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cvfcb.builders))
	nodes := make([]*CounterVendorFormula, len(cvfcb.builders))
	mutators := make([]Mutator, len(cvfcb.builders))
	for i := range cvfcb.builders {
		func(i int, root context.Context) {
			builder := cvfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CounterVendorFormulaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cvfcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cvfcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cvfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (cvfcb *CounterVendorFormulaCreateBulk) SaveX(ctx context.Context) []*CounterVendorFormula {
	v, err := cvfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
