// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package resourcetyperelationship

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/facebook/ent"
)

const (
	// Label holds the string label denoting the resourcetyperelationship type in the database.
	Label = "resource_type_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldResourceRelationshipType holds the string denoting the resourcerelationshiptype field in the database.
	FieldResourceRelationshipType = "resource_relationship_type"
	// FieldResourceRelationshipMultiplicity holds the string denoting the resourcerelationshipmultiplicity field in the database.
	FieldResourceRelationshipMultiplicity = "resource_relationship_multiplicity"

	// EdgeResourcetypea holds the string denoting the resourcetypea edge name in mutations.
	EdgeResourcetypea = "resourcetypea"
	// EdgeResourcetypeb holds the string denoting the resourcetypeb edge name in mutations.
	EdgeResourcetypeb = "resourcetypeb"
	// EdgeLocationType holds the string denoting the locationtype edge name in mutations.
	EdgeLocationType = "locationType"

	// Table holds the table name of the resourcetyperelationship in the database.
	Table = "resource_type_relationships"
	// ResourcetypeaTable is the table the holds the resourcetypea relation/edge.
	ResourcetypeaTable = "resource_type_relationships"
	// ResourcetypeaInverseTable is the table name for the ResourceType entity.
	// It exists in this package in order to avoid circular dependency with the "resourcetype" package.
	ResourcetypeaInverseTable = "resource_types"
	// ResourcetypeaColumn is the table column denoting the resourcetypea relation/edge.
	ResourcetypeaColumn = "resource_type_resource_relationship_a"
	// ResourcetypebTable is the table the holds the resourcetypeb relation/edge.
	ResourcetypebTable = "resource_type_relationships"
	// ResourcetypebInverseTable is the table name for the ResourceType entity.
	// It exists in this package in order to avoid circular dependency with the "resourcetype" package.
	ResourcetypebInverseTable = "resource_types"
	// ResourcetypebColumn is the table column denoting the resourcetypeb relation/edge.
	ResourcetypebColumn = "resource_type_resource_relationship_b"
	// LocationTypeTable is the table the holds the locationType relation/edge.
	LocationTypeTable = "resource_type_relationships"
	// LocationTypeInverseTable is the table name for the LocationType entity.
	// It exists in this package in order to avoid circular dependency with the "locationtype" package.
	LocationTypeInverseTable = "location_types"
	// LocationTypeColumn is the table column denoting the locationType relation/edge.
	LocationTypeColumn = "location_type_resource_relationship_location"
)

// Columns holds all SQL columns for resourcetyperelationship fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldResourceRelationshipType,
	FieldResourceRelationshipMultiplicity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the ResourceTypeRelationship type.
var ForeignKeys = []string{
	"location_type_resource_relationship_location",
	"resource_type_resource_relationship_a",
	"resource_type_resource_relationship_b",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/facebookincubator/symphony/pkg/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the create_time field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the update_time field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	UpdateDefaultUpdateTime func() time.Time
)

// ResourceRelationshipType defines the type for the ResourceRelationshipType enum field.
type ResourceRelationshipType string

// ResourceRelationshipType values.
const (
	ResourceRelationshipTypeBELONGS_TO       ResourceRelationshipType = "BELONGS_TO"
	ResourceRelationshipTypeLOCATED_IN       ResourceRelationshipType = "LOCATED_IN"
	ResourceRelationshipTypePHYSICAL_LINK    ResourceRelationshipType = "PHYSICAL_LINK"
	ResourceRelationshipTypeLOGICAL_LINK     ResourceRelationshipType = "LOGICAL_LINK"
	ResourceRelationshipTypeCROSS_CONNECTION ResourceRelationshipType = "CROSS_CONNECTION"
)

func (_resourcerelationshiptype ResourceRelationshipType) String() string {
	return string(_resourcerelationshiptype)
}

// ResourceRelationshipTypeValidator is a validator for the "ResourceRelationshipType" field enum values. It is called by the builders before save.
func ResourceRelationshipTypeValidator(_resourcerelationshiptype ResourceRelationshipType) error {
	switch _resourcerelationshiptype {
	case ResourceRelationshipTypeBELONGS_TO, ResourceRelationshipTypeLOCATED_IN, ResourceRelationshipTypePHYSICAL_LINK, ResourceRelationshipTypeLOGICAL_LINK, ResourceRelationshipTypeCROSS_CONNECTION:
		return nil
	default:
		return fmt.Errorf("resourcetyperelationship: invalid enum value for ResourceRelationshipType field: %q", _resourcerelationshiptype)
	}
}

// ResourceRelationshipMultiplicity defines the type for the ResourceRelationshipMultiplicity enum field.
type ResourceRelationshipMultiplicity string

// ResourceRelationshipMultiplicity values.
const (
	ResourceRelationshipMultiplicityONE_TO_ONE   ResourceRelationshipMultiplicity = "ONE_TO_ONE"
	ResourceRelationshipMultiplicityONE_TO_MANY  ResourceRelationshipMultiplicity = "ONE_TO_MANY"
	ResourceRelationshipMultiplicityMANY_TO_ONE  ResourceRelationshipMultiplicity = "MANY_TO_ONE"
	ResourceRelationshipMultiplicityMANY_TO_MANY ResourceRelationshipMultiplicity = "MANY_TO_MANY"
)

func (_resourcerelationshipmultiplicity ResourceRelationshipMultiplicity) String() string {
	return string(_resourcerelationshipmultiplicity)
}

// ResourceRelationshipMultiplicityValidator is a validator for the "ResourceRelationshipMultiplicity" field enum values. It is called by the builders before save.
func ResourceRelationshipMultiplicityValidator(_resourcerelationshipmultiplicity ResourceRelationshipMultiplicity) error {
	switch _resourcerelationshipmultiplicity {
	case ResourceRelationshipMultiplicityONE_TO_ONE, ResourceRelationshipMultiplicityONE_TO_MANY, ResourceRelationshipMultiplicityMANY_TO_ONE, ResourceRelationshipMultiplicityMANY_TO_MANY:
		return nil
	default:
		return fmt.Errorf("resourcetyperelationship: invalid enum value for ResourceRelationshipMultiplicity field: %q", _resourcerelationshipmultiplicity)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_resourcerelationshiptype ResourceRelationshipType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_resourcerelationshiptype.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_resourcerelationshiptype *ResourceRelationshipType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_resourcerelationshiptype = ResourceRelationshipType(str)
	if err := ResourceRelationshipTypeValidator(*_resourcerelationshiptype); err != nil {
		return fmt.Errorf("%s is not a valid ResourceRelationshipType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (_resourcerelationshipmultiplicity ResourceRelationshipMultiplicity) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_resourcerelationshipmultiplicity.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_resourcerelationshipmultiplicity *ResourceRelationshipMultiplicity) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_resourcerelationshipmultiplicity = ResourceRelationshipMultiplicity(str)
	if err := ResourceRelationshipMultiplicityValidator(*_resourcerelationshipmultiplicity); err != nil {
		return fmt.Errorf("%s is not a valid ResourceRelationshipMultiplicity", str)
	}
	return nil
}
