// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/action"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/reconciliationrule"
	"github.com/facebookincubator/symphony/pkg/ent/ruleaction"
	"github.com/facebookincubator/symphony/pkg/ent/ruleactiontemplate"
)

// RuleActionQuery is the builder for querying RuleAction entities.
type RuleActionQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.RuleAction
	// eager-loading edges.
	withReconciliationrule *ReconciliationRuleQuery
	withRuleactiontemplate *RuleActionTemplateQuery
	withRuleAction         *ActionQuery
	withFKs                bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (raq *RuleActionQuery) Where(ps ...predicate.RuleAction) *RuleActionQuery {
	raq.predicates = append(raq.predicates, ps...)
	return raq
}

// Limit adds a limit step to the query.
func (raq *RuleActionQuery) Limit(limit int) *RuleActionQuery {
	raq.limit = &limit
	return raq
}

// Offset adds an offset step to the query.
func (raq *RuleActionQuery) Offset(offset int) *RuleActionQuery {
	raq.offset = &offset
	return raq
}

// Order adds an order step to the query.
func (raq *RuleActionQuery) Order(o ...OrderFunc) *RuleActionQuery {
	raq.order = append(raq.order, o...)
	return raq
}

// QueryReconciliationrule chains the current query on the reconciliationrule edge.
func (raq *RuleActionQuery) QueryReconciliationrule() *ReconciliationRuleQuery {
	query := &ReconciliationRuleQuery{config: raq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := raq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := raq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ruleaction.Table, ruleaction.FieldID, selector),
			sqlgraph.To(reconciliationrule.Table, reconciliationrule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ruleaction.ReconciliationruleTable, ruleaction.ReconciliationruleColumn),
		)
		fromU = sqlgraph.SetNeighbors(raq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRuleactiontemplate chains the current query on the ruleactiontemplate edge.
func (raq *RuleActionQuery) QueryRuleactiontemplate() *RuleActionTemplateQuery {
	query := &RuleActionTemplateQuery{config: raq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := raq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := raq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ruleaction.Table, ruleaction.FieldID, selector),
			sqlgraph.To(ruleactiontemplate.Table, ruleactiontemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ruleaction.RuleactiontemplateTable, ruleaction.RuleactiontemplateColumn),
		)
		fromU = sqlgraph.SetNeighbors(raq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRuleAction chains the current query on the rule_action edge.
func (raq *RuleActionQuery) QueryRuleAction() *ActionQuery {
	query := &ActionQuery{config: raq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := raq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := raq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ruleaction.Table, ruleaction.FieldID, selector),
			sqlgraph.To(action.Table, action.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ruleaction.RuleActionTable, ruleaction.RuleActionColumn),
		)
		fromU = sqlgraph.SetNeighbors(raq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RuleAction entity in the query. Returns *NotFoundError when no ruleaction was found.
func (raq *RuleActionQuery) First(ctx context.Context) (*RuleAction, error) {
	nodes, err := raq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ruleaction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (raq *RuleActionQuery) FirstX(ctx context.Context) *RuleAction {
	node, err := raq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RuleAction id in the query. Returns *NotFoundError when no id was found.
func (raq *RuleActionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = raq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ruleaction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (raq *RuleActionQuery) FirstIDX(ctx context.Context) int {
	id, err := raq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only RuleAction entity in the query, returns an error if not exactly one entity was returned.
func (raq *RuleActionQuery) Only(ctx context.Context) (*RuleAction, error) {
	nodes, err := raq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ruleaction.Label}
	default:
		return nil, &NotSingularError{ruleaction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (raq *RuleActionQuery) OnlyX(ctx context.Context) *RuleAction {
	node, err := raq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only RuleAction id in the query, returns an error if not exactly one id was returned.
func (raq *RuleActionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = raq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ruleaction.Label}
	default:
		err = &NotSingularError{ruleaction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (raq *RuleActionQuery) OnlyIDX(ctx context.Context) int {
	id, err := raq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RuleActions.
func (raq *RuleActionQuery) All(ctx context.Context) ([]*RuleAction, error) {
	if err := raq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return raq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (raq *RuleActionQuery) AllX(ctx context.Context) []*RuleAction {
	nodes, err := raq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RuleAction ids.
func (raq *RuleActionQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := raq.Select(ruleaction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (raq *RuleActionQuery) IDsX(ctx context.Context) []int {
	ids, err := raq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (raq *RuleActionQuery) Count(ctx context.Context) (int, error) {
	if err := raq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return raq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (raq *RuleActionQuery) CountX(ctx context.Context) int {
	count, err := raq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (raq *RuleActionQuery) Exist(ctx context.Context) (bool, error) {
	if err := raq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return raq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (raq *RuleActionQuery) ExistX(ctx context.Context) bool {
	exist, err := raq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (raq *RuleActionQuery) Clone() *RuleActionQuery {
	if raq == nil {
		return nil
	}
	return &RuleActionQuery{
		config:                 raq.config,
		limit:                  raq.limit,
		offset:                 raq.offset,
		order:                  append([]OrderFunc{}, raq.order...),
		unique:                 append([]string{}, raq.unique...),
		predicates:             append([]predicate.RuleAction{}, raq.predicates...),
		withReconciliationrule: raq.withReconciliationrule.Clone(),
		withRuleactiontemplate: raq.withRuleactiontemplate.Clone(),
		withRuleAction:         raq.withRuleAction.Clone(),
		// clone intermediate query.
		sql:  raq.sql.Clone(),
		path: raq.path,
	}
}

//  WithReconciliationrule tells the query-builder to eager-loads the nodes that are connected to
// the "reconciliationrule" edge. The optional arguments used to configure the query builder of the edge.
func (raq *RuleActionQuery) WithReconciliationrule(opts ...func(*ReconciliationRuleQuery)) *RuleActionQuery {
	query := &ReconciliationRuleQuery{config: raq.config}
	for _, opt := range opts {
		opt(query)
	}
	raq.withReconciliationrule = query
	return raq
}

//  WithRuleactiontemplate tells the query-builder to eager-loads the nodes that are connected to
// the "ruleactiontemplate" edge. The optional arguments used to configure the query builder of the edge.
func (raq *RuleActionQuery) WithRuleactiontemplate(opts ...func(*RuleActionTemplateQuery)) *RuleActionQuery {
	query := &RuleActionTemplateQuery{config: raq.config}
	for _, opt := range opts {
		opt(query)
	}
	raq.withRuleactiontemplate = query
	return raq
}

//  WithRuleAction tells the query-builder to eager-loads the nodes that are connected to
// the "rule_action" edge. The optional arguments used to configure the query builder of the edge.
func (raq *RuleActionQuery) WithRuleAction(opts ...func(*ActionQuery)) *RuleActionQuery {
	query := &ActionQuery{config: raq.config}
	for _, opt := range opts {
		opt(query)
	}
	raq.withRuleAction = query
	return raq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RuleAction.Query().
//		GroupBy(ruleaction.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (raq *RuleActionQuery) GroupBy(field string, fields ...string) *RuleActionGroupBy {
	group := &RuleActionGroupBy{config: raq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := raq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return raq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.RuleAction.Query().
//		Select(ruleaction.FieldCreateTime).
//		Scan(ctx, &v)
//
func (raq *RuleActionQuery) Select(field string, fields ...string) *RuleActionSelect {
	selector := &RuleActionSelect{config: raq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := raq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return raq.sqlQuery(), nil
	}
	return selector
}

func (raq *RuleActionQuery) prepareQuery(ctx context.Context) error {
	if raq.path != nil {
		prev, err := raq.path(ctx)
		if err != nil {
			return err
		}
		raq.sql = prev
	}
	if err := ruleaction.Policy.EvalQuery(ctx, raq); err != nil {
		return err
	}
	return nil
}

func (raq *RuleActionQuery) sqlAll(ctx context.Context) ([]*RuleAction, error) {
	var (
		nodes       = []*RuleAction{}
		withFKs     = raq.withFKs
		_spec       = raq.querySpec()
		loadedTypes = [3]bool{
			raq.withReconciliationrule != nil,
			raq.withRuleactiontemplate != nil,
			raq.withRuleAction != nil,
		}
	)
	if raq.withReconciliationrule != nil || raq.withRuleactiontemplate != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, ruleaction.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &RuleAction{config: raq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, raq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := raq.withReconciliationrule; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*RuleAction)
		for i := range nodes {
			if fk := nodes[i].reconciliation_rule_reconciliation_rule_rule_action; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(reconciliationrule.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "reconciliation_rule_reconciliation_rule_rule_action" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Reconciliationrule = n
			}
		}
	}

	if query := raq.withRuleactiontemplate; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*RuleAction)
		for i := range nodes {
			if fk := nodes[i].rule_action_template_rule_action_template_rule_action; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(ruleactiontemplate.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "rule_action_template_rule_action_template_rule_action" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Ruleactiontemplate = n
			}
		}
	}

	if query := raq.withRuleAction; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*RuleAction)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.RuleAction = []*Action{}
		}
		query.withFKs = true
		query.Where(predicate.Action(func(s *sql.Selector) {
			s.Where(sql.InValues(ruleaction.RuleActionColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.rule_action_rule_action
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "rule_action_rule_action" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "rule_action_rule_action" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.RuleAction = append(node.Edges.RuleAction, n)
		}
	}

	return nodes, nil
}

func (raq *RuleActionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := raq.querySpec()
	return sqlgraph.CountNodes(ctx, raq.driver, _spec)
}

func (raq *RuleActionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := raq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (raq *RuleActionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ruleaction.Table,
			Columns: ruleaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ruleaction.FieldID,
			},
		},
		From:   raq.sql,
		Unique: true,
	}
	if ps := raq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := raq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := raq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := raq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, ruleaction.ValidColumn)
			}
		}
	}
	return _spec
}

func (raq *RuleActionQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(raq.driver.Dialect())
	t1 := builder.Table(ruleaction.Table)
	selector := builder.Select(t1.Columns(ruleaction.Columns...)...).From(t1)
	if raq.sql != nil {
		selector = raq.sql
		selector.Select(selector.Columns(ruleaction.Columns...)...)
	}
	for _, p := range raq.predicates {
		p(selector)
	}
	for _, p := range raq.order {
		p(selector, ruleaction.ValidColumn)
	}
	if offset := raq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := raq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RuleActionGroupBy is the builder for group-by RuleAction entities.
type RuleActionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ragb *RuleActionGroupBy) Aggregate(fns ...AggregateFunc) *RuleActionGroupBy {
	ragb.fns = append(ragb.fns, fns...)
	return ragb
}

// Scan applies the group-by query and scan the result into the given value.
func (ragb *RuleActionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ragb.path(ctx)
	if err != nil {
		return err
	}
	ragb.sql = query
	return ragb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ragb *RuleActionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ragb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (ragb *RuleActionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ragb.fields) > 1 {
		return nil, errors.New("ent: RuleActionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ragb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ragb *RuleActionGroupBy) StringsX(ctx context.Context) []string {
	v, err := ragb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (ragb *RuleActionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ragb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{ruleaction.Label}
	default:
		err = fmt.Errorf("ent: RuleActionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ragb *RuleActionGroupBy) StringX(ctx context.Context) string {
	v, err := ragb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (ragb *RuleActionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ragb.fields) > 1 {
		return nil, errors.New("ent: RuleActionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ragb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ragb *RuleActionGroupBy) IntsX(ctx context.Context) []int {
	v, err := ragb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (ragb *RuleActionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ragb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{ruleaction.Label}
	default:
		err = fmt.Errorf("ent: RuleActionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ragb *RuleActionGroupBy) IntX(ctx context.Context) int {
	v, err := ragb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (ragb *RuleActionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ragb.fields) > 1 {
		return nil, errors.New("ent: RuleActionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ragb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ragb *RuleActionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ragb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (ragb *RuleActionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ragb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{ruleaction.Label}
	default:
		err = fmt.Errorf("ent: RuleActionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ragb *RuleActionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ragb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (ragb *RuleActionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ragb.fields) > 1 {
		return nil, errors.New("ent: RuleActionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ragb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ragb *RuleActionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ragb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (ragb *RuleActionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ragb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{ruleaction.Label}
	default:
		err = fmt.Errorf("ent: RuleActionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ragb *RuleActionGroupBy) BoolX(ctx context.Context) bool {
	v, err := ragb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ragb *RuleActionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ragb.fields {
		if !ruleaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ragb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ragb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ragb *RuleActionGroupBy) sqlQuery() *sql.Selector {
	selector := ragb.sql
	columns := make([]string, 0, len(ragb.fields)+len(ragb.fns))
	columns = append(columns, ragb.fields...)
	for _, fn := range ragb.fns {
		columns = append(columns, fn(selector, ruleaction.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(ragb.fields...)
}

// RuleActionSelect is the builder for select fields of RuleAction entities.
type RuleActionSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (ras *RuleActionSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := ras.path(ctx)
	if err != nil {
		return err
	}
	ras.sql = query
	return ras.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ras *RuleActionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ras.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (ras *RuleActionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ras.fields) > 1 {
		return nil, errors.New("ent: RuleActionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ras.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ras *RuleActionSelect) StringsX(ctx context.Context) []string {
	v, err := ras.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (ras *RuleActionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ras.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{ruleaction.Label}
	default:
		err = fmt.Errorf("ent: RuleActionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ras *RuleActionSelect) StringX(ctx context.Context) string {
	v, err := ras.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (ras *RuleActionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ras.fields) > 1 {
		return nil, errors.New("ent: RuleActionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ras.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ras *RuleActionSelect) IntsX(ctx context.Context) []int {
	v, err := ras.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (ras *RuleActionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ras.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{ruleaction.Label}
	default:
		err = fmt.Errorf("ent: RuleActionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ras *RuleActionSelect) IntX(ctx context.Context) int {
	v, err := ras.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (ras *RuleActionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ras.fields) > 1 {
		return nil, errors.New("ent: RuleActionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ras.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ras *RuleActionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ras.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (ras *RuleActionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ras.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{ruleaction.Label}
	default:
		err = fmt.Errorf("ent: RuleActionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ras *RuleActionSelect) Float64X(ctx context.Context) float64 {
	v, err := ras.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (ras *RuleActionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ras.fields) > 1 {
		return nil, errors.New("ent: RuleActionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ras.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ras *RuleActionSelect) BoolsX(ctx context.Context) []bool {
	v, err := ras.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (ras *RuleActionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ras.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{ruleaction.Label}
	default:
		err = fmt.Errorf("ent: RuleActionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ras *RuleActionSelect) BoolX(ctx context.Context) bool {
	v, err := ras.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ras *RuleActionSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ras.fields {
		if !ruleaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := ras.sqlQuery().Query()
	if err := ras.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ras *RuleActionSelect) sqlQuery() sql.Querier {
	selector := ras.sql
	selector.Select(selector.Columns(ras.fields...)...)
	return selector
}
