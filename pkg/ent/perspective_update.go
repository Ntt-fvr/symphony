// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/perspective"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// PerspectiveUpdate is the builder for updating Perspective entities.
type PerspectiveUpdate struct {
	config
	hooks    []Hook
	mutation *PerspectiveMutation
}

// Where adds a new predicate for the builder.
func (pu *PerspectiveUpdate) Where(ps ...predicate.Perspective) *PerspectiveUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetName sets the name field.
func (pu *PerspectiveUpdate) SetName(s string) *PerspectiveUpdate {
	pu.mutation.SetName(s)
	return pu
}

// AddPerspectiveFkIDs adds the perspectiveFk edge to Kqi by ids.
func (pu *PerspectiveUpdate) AddPerspectiveFkIDs(ids ...int) *PerspectiveUpdate {
	pu.mutation.AddPerspectiveFkIDs(ids...)
	return pu
}

// AddPerspectiveFk adds the perspectiveFk edges to Kqi.
func (pu *PerspectiveUpdate) AddPerspectiveFk(k ...*Kqi) *PerspectiveUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return pu.AddPerspectiveFkIDs(ids...)
}

// Mutation returns the PerspectiveMutation object of the builder.
func (pu *PerspectiveUpdate) Mutation() *PerspectiveMutation {
	return pu.mutation
}

// ClearPerspectiveFk clears all "perspectiveFk" edges to type Kqi.
func (pu *PerspectiveUpdate) ClearPerspectiveFk() *PerspectiveUpdate {
	pu.mutation.ClearPerspectiveFk()
	return pu
}

// RemovePerspectiveFkIDs removes the perspectiveFk edge to Kqi by ids.
func (pu *PerspectiveUpdate) RemovePerspectiveFkIDs(ids ...int) *PerspectiveUpdate {
	pu.mutation.RemovePerspectiveFkIDs(ids...)
	return pu
}

// RemovePerspectiveFk removes perspectiveFk edges to Kqi.
func (pu *PerspectiveUpdate) RemovePerspectiveFk(k ...*Kqi) *PerspectiveUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return pu.RemovePerspectiveFkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PerspectiveUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PerspectiveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PerspectiveUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PerspectiveUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PerspectiveUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PerspectiveUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := perspective.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PerspectiveUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := perspective.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (pu *PerspectiveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   perspective.Table,
			Columns: perspective.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: perspective.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: perspective.FieldUpdateTime,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: perspective.FieldName,
		})
	}
	if pu.mutation.PerspectiveFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   perspective.PerspectiveFkTable,
			Columns: []string{perspective.PerspectiveFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPerspectiveFkIDs(); len(nodes) > 0 && !pu.mutation.PerspectiveFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   perspective.PerspectiveFkTable,
			Columns: []string{perspective.PerspectiveFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PerspectiveFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   perspective.PerspectiveFkTable,
			Columns: []string{perspective.PerspectiveFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{perspective.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PerspectiveUpdateOne is the builder for updating a single Perspective entity.
type PerspectiveUpdateOne struct {
	config
	hooks    []Hook
	mutation *PerspectiveMutation
}

// SetName sets the name field.
func (puo *PerspectiveUpdateOne) SetName(s string) *PerspectiveUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// AddPerspectiveFkIDs adds the perspectiveFk edge to Kqi by ids.
func (puo *PerspectiveUpdateOne) AddPerspectiveFkIDs(ids ...int) *PerspectiveUpdateOne {
	puo.mutation.AddPerspectiveFkIDs(ids...)
	return puo
}

// AddPerspectiveFk adds the perspectiveFk edges to Kqi.
func (puo *PerspectiveUpdateOne) AddPerspectiveFk(k ...*Kqi) *PerspectiveUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return puo.AddPerspectiveFkIDs(ids...)
}

// Mutation returns the PerspectiveMutation object of the builder.
func (puo *PerspectiveUpdateOne) Mutation() *PerspectiveMutation {
	return puo.mutation
}

// ClearPerspectiveFk clears all "perspectiveFk" edges to type Kqi.
func (puo *PerspectiveUpdateOne) ClearPerspectiveFk() *PerspectiveUpdateOne {
	puo.mutation.ClearPerspectiveFk()
	return puo
}

// RemovePerspectiveFkIDs removes the perspectiveFk edge to Kqi by ids.
func (puo *PerspectiveUpdateOne) RemovePerspectiveFkIDs(ids ...int) *PerspectiveUpdateOne {
	puo.mutation.RemovePerspectiveFkIDs(ids...)
	return puo
}

// RemovePerspectiveFk removes perspectiveFk edges to Kqi.
func (puo *PerspectiveUpdateOne) RemovePerspectiveFk(k ...*Kqi) *PerspectiveUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return puo.RemovePerspectiveFkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PerspectiveUpdateOne) Save(ctx context.Context) (*Perspective, error) {
	var (
		err  error
		node *Perspective
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PerspectiveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PerspectiveUpdateOne) SaveX(ctx context.Context) *Perspective {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PerspectiveUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PerspectiveUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PerspectiveUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := perspective.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PerspectiveUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := perspective.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (puo *PerspectiveUpdateOne) sqlSave(ctx context.Context) (_node *Perspective, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   perspective.Table,
			Columns: perspective.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: perspective.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Perspective.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: perspective.FieldUpdateTime,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: perspective.FieldName,
		})
	}
	if puo.mutation.PerspectiveFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   perspective.PerspectiveFkTable,
			Columns: []string{perspective.PerspectiveFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPerspectiveFkIDs(); len(nodes) > 0 && !puo.mutation.PerspectiveFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   perspective.PerspectiveFkTable,
			Columns: []string{perspective.PerspectiveFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PerspectiveFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   perspective.PerspectiveFkTable,
			Columns: []string{perspective.PerspectiveFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Perspective{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{perspective.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
