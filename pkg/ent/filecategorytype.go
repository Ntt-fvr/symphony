// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/filecategorytype"
)

// FileCategoryType is the model entity for the FileCategoryType schema.
type FileCategoryType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileCategoryTypeQuery when eager-loading is set.
	Edges FileCategoryTypeEdges `json:"edges"`
}

// FileCategoryTypeEdges holds the relations/edges for other nodes in the graph.
type FileCategoryTypeEdges struct {
	// Files holds the value of the files edge.
	Files []*File
	// LocationType holds the value of the locationType edge.
	LocationType []*LocationType
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e FileCategoryTypeEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[0] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// LocationTypeOrErr returns the LocationType value or an error if the edge
// was not loaded in eager-loading.
func (e FileCategoryTypeEdges) LocationTypeOrErr() ([]*LocationType, error) {
	if e.loadedTypes[1] {
		return e.LocationType, nil
	}
	return nil, &NotLoadedError{edge: "locationType"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileCategoryType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // create_time
		&sql.NullTime{},  // update_time
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileCategoryType fields.
func (fct *FileCategoryType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(filecategorytype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	fct.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		fct.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		fct.UpdateTime = value.Time
	}
	return nil
}

// QueryFiles queries the files edge of the FileCategoryType.
func (fct *FileCategoryType) QueryFiles() *FileQuery {
	return (&FileCategoryTypeClient{config: fct.config}).QueryFiles(fct)
}

// QueryLocationType queries the locationType edge of the FileCategoryType.
func (fct *FileCategoryType) QueryLocationType() *LocationTypeQuery {
	return (&FileCategoryTypeClient{config: fct.config}).QueryLocationType(fct)
}

// Update returns a builder for updating this FileCategoryType.
// Note that, you need to call FileCategoryType.Unwrap() before calling this method, if this FileCategoryType
// was returned from a transaction, and the transaction was committed or rolled back.
func (fct *FileCategoryType) Update() *FileCategoryTypeUpdateOne {
	return (&FileCategoryTypeClient{config: fct.config}).UpdateOne(fct)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (fct *FileCategoryType) Unwrap() *FileCategoryType {
	tx, ok := fct.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileCategoryType is not a transactional entity")
	}
	fct.config.driver = tx.drv
	return fct
}

// String implements the fmt.Stringer.
func (fct *FileCategoryType) String() string {
	var builder strings.Builder
	builder.WriteString("FileCategoryType(")
	builder.WriteString(fmt.Sprintf("id=%v", fct.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(fct.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(fct.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FileCategoryTypes is a parsable slice of FileCategoryType.
type FileCategoryTypes []*FileCategoryType

func (fct FileCategoryTypes) config(cfg config) {
	for _i := range fct {
		fct[_i].config = cfg
	}
}
