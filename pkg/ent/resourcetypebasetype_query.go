// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetypebasetype"
)

// ResourceTypeBaseTypeQuery is the builder for querying ResourceTypeBaseType entities.
type ResourceTypeBaseTypeQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ResourceTypeBaseType
	// eager-loading edges.
	withResourceBaseType *ResourceTypeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rtbtq *ResourceTypeBaseTypeQuery) Where(ps ...predicate.ResourceTypeBaseType) *ResourceTypeBaseTypeQuery {
	rtbtq.predicates = append(rtbtq.predicates, ps...)
	return rtbtq
}

// Limit adds a limit step to the query.
func (rtbtq *ResourceTypeBaseTypeQuery) Limit(limit int) *ResourceTypeBaseTypeQuery {
	rtbtq.limit = &limit
	return rtbtq
}

// Offset adds an offset step to the query.
func (rtbtq *ResourceTypeBaseTypeQuery) Offset(offset int) *ResourceTypeBaseTypeQuery {
	rtbtq.offset = &offset
	return rtbtq
}

// Order adds an order step to the query.
func (rtbtq *ResourceTypeBaseTypeQuery) Order(o ...OrderFunc) *ResourceTypeBaseTypeQuery {
	rtbtq.order = append(rtbtq.order, o...)
	return rtbtq
}

// QueryResourceBaseType chains the current query on the resource_base_type edge.
func (rtbtq *ResourceTypeBaseTypeQuery) QueryResourceBaseType() *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: rtbtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtbtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtbtq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcetypebasetype.Table, resourcetypebasetype.FieldID, selector),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcetypebasetype.ResourceBaseTypeTable, resourcetypebasetype.ResourceBaseTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtbtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResourceTypeBaseType entity in the query. Returns *NotFoundError when no resourcetypebasetype was found.
func (rtbtq *ResourceTypeBaseTypeQuery) First(ctx context.Context) (*ResourceTypeBaseType, error) {
	nodes, err := rtbtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resourcetypebasetype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rtbtq *ResourceTypeBaseTypeQuery) FirstX(ctx context.Context) *ResourceTypeBaseType {
	node, err := rtbtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ResourceTypeBaseType id in the query. Returns *NotFoundError when no id was found.
func (rtbtq *ResourceTypeBaseTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rtbtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resourcetypebasetype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rtbtq *ResourceTypeBaseTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := rtbtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ResourceTypeBaseType entity in the query, returns an error if not exactly one entity was returned.
func (rtbtq *ResourceTypeBaseTypeQuery) Only(ctx context.Context) (*ResourceTypeBaseType, error) {
	nodes, err := rtbtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resourcetypebasetype.Label}
	default:
		return nil, &NotSingularError{resourcetypebasetype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rtbtq *ResourceTypeBaseTypeQuery) OnlyX(ctx context.Context) *ResourceTypeBaseType {
	node, err := rtbtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ResourceTypeBaseType id in the query, returns an error if not exactly one id was returned.
func (rtbtq *ResourceTypeBaseTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rtbtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resourcetypebasetype.Label}
	default:
		err = &NotSingularError{resourcetypebasetype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rtbtq *ResourceTypeBaseTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := rtbtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResourceTypeBaseTypes.
func (rtbtq *ResourceTypeBaseTypeQuery) All(ctx context.Context) ([]*ResourceTypeBaseType, error) {
	if err := rtbtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rtbtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rtbtq *ResourceTypeBaseTypeQuery) AllX(ctx context.Context) []*ResourceTypeBaseType {
	nodes, err := rtbtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ResourceTypeBaseType ids.
func (rtbtq *ResourceTypeBaseTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rtbtq.Select(resourcetypebasetype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rtbtq *ResourceTypeBaseTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := rtbtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rtbtq *ResourceTypeBaseTypeQuery) Count(ctx context.Context) (int, error) {
	if err := rtbtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rtbtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rtbtq *ResourceTypeBaseTypeQuery) CountX(ctx context.Context) int {
	count, err := rtbtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rtbtq *ResourceTypeBaseTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := rtbtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rtbtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rtbtq *ResourceTypeBaseTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := rtbtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rtbtq *ResourceTypeBaseTypeQuery) Clone() *ResourceTypeBaseTypeQuery {
	if rtbtq == nil {
		return nil
	}
	return &ResourceTypeBaseTypeQuery{
		config:               rtbtq.config,
		limit:                rtbtq.limit,
		offset:               rtbtq.offset,
		order:                append([]OrderFunc{}, rtbtq.order...),
		unique:               append([]string{}, rtbtq.unique...),
		predicates:           append([]predicate.ResourceTypeBaseType{}, rtbtq.predicates...),
		withResourceBaseType: rtbtq.withResourceBaseType.Clone(),
		// clone intermediate query.
		sql:  rtbtq.sql.Clone(),
		path: rtbtq.path,
	}
}

//  WithResourceBaseType tells the query-builder to eager-loads the nodes that are connected to
// the "resource_base_type" edge. The optional arguments used to configure the query builder of the edge.
func (rtbtq *ResourceTypeBaseTypeQuery) WithResourceBaseType(opts ...func(*ResourceTypeQuery)) *ResourceTypeBaseTypeQuery {
	query := &ResourceTypeQuery{config: rtbtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtbtq.withResourceBaseType = query
	return rtbtq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResourceTypeBaseType.Query().
//		GroupBy(resourcetypebasetype.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rtbtq *ResourceTypeBaseTypeQuery) GroupBy(field string, fields ...string) *ResourceTypeBaseTypeGroupBy {
	group := &ResourceTypeBaseTypeGroupBy{config: rtbtq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rtbtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rtbtq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ResourceTypeBaseType.Query().
//		Select(resourcetypebasetype.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rtbtq *ResourceTypeBaseTypeQuery) Select(field string, fields ...string) *ResourceTypeBaseTypeSelect {
	selector := &ResourceTypeBaseTypeSelect{config: rtbtq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rtbtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rtbtq.sqlQuery(), nil
	}
	return selector
}

func (rtbtq *ResourceTypeBaseTypeQuery) prepareQuery(ctx context.Context) error {
	if rtbtq.path != nil {
		prev, err := rtbtq.path(ctx)
		if err != nil {
			return err
		}
		rtbtq.sql = prev
	}
	if err := resourcetypebasetype.Policy.EvalQuery(ctx, rtbtq); err != nil {
		return err
	}
	return nil
}

func (rtbtq *ResourceTypeBaseTypeQuery) sqlAll(ctx context.Context) ([]*ResourceTypeBaseType, error) {
	var (
		nodes       = []*ResourceTypeBaseType{}
		_spec       = rtbtq.querySpec()
		loadedTypes = [1]bool{
			rtbtq.withResourceBaseType != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &ResourceTypeBaseType{config: rtbtq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rtbtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rtbtq.withResourceBaseType; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ResourceTypeBaseType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ResourceBaseType = []*ResourceType{}
		}
		query.withFKs = true
		query.Where(predicate.ResourceType(func(s *sql.Selector) {
			s.Where(sql.InValues(resourcetypebasetype.ResourceBaseTypeColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.resource_type_base_type_resource_base_type
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "resource_type_base_type_resource_base_type" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_type_base_type_resource_base_type" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ResourceBaseType = append(node.Edges.ResourceBaseType, n)
		}
	}

	return nodes, nil
}

func (rtbtq *ResourceTypeBaseTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rtbtq.querySpec()
	return sqlgraph.CountNodes(ctx, rtbtq.driver, _spec)
}

func (rtbtq *ResourceTypeBaseTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rtbtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rtbtq *ResourceTypeBaseTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetypebasetype.Table,
			Columns: resourcetypebasetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetypebasetype.FieldID,
			},
		},
		From:   rtbtq.sql,
		Unique: true,
	}
	if ps := rtbtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rtbtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rtbtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rtbtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, resourcetypebasetype.ValidColumn)
			}
		}
	}
	return _spec
}

func (rtbtq *ResourceTypeBaseTypeQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rtbtq.driver.Dialect())
	t1 := builder.Table(resourcetypebasetype.Table)
	selector := builder.Select(t1.Columns(resourcetypebasetype.Columns...)...).From(t1)
	if rtbtq.sql != nil {
		selector = rtbtq.sql
		selector.Select(selector.Columns(resourcetypebasetype.Columns...)...)
	}
	for _, p := range rtbtq.predicates {
		p(selector)
	}
	for _, p := range rtbtq.order {
		p(selector, resourcetypebasetype.ValidColumn)
	}
	if offset := rtbtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rtbtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ResourceTypeBaseTypeGroupBy is the builder for group-by ResourceTypeBaseType entities.
type ResourceTypeBaseTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Aggregate(fns ...AggregateFunc) *ResourceTypeBaseTypeGroupBy {
	rtbtgb.fns = append(rtbtgb.fns, fns...)
	return rtbtgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rtbtgb.path(ctx)
	if err != nil {
		return err
	}
	rtbtgb.sql = query
	return rtbtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rtbtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rtbtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeBaseTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rtbtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := rtbtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rtbtgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetypebasetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeBaseTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) StringX(ctx context.Context) string {
	v, err := rtbtgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rtbtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeBaseTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rtbtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := rtbtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rtbtgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetypebasetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeBaseTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) IntX(ctx context.Context) int {
	v, err := rtbtgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rtbtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeBaseTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rtbtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rtbtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rtbtgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetypebasetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeBaseTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rtbtgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rtbtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeBaseTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rtbtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rtbtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rtbtgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetypebasetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeBaseTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rtbtgb *ResourceTypeBaseTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := rtbtgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rtbtgb *ResourceTypeBaseTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rtbtgb.fields {
		if !resourcetypebasetype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rtbtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rtbtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rtbtgb *ResourceTypeBaseTypeGroupBy) sqlQuery() *sql.Selector {
	selector := rtbtgb.sql
	columns := make([]string, 0, len(rtbtgb.fields)+len(rtbtgb.fns))
	columns = append(columns, rtbtgb.fields...)
	for _, fn := range rtbtgb.fns {
		columns = append(columns, fn(selector, resourcetypebasetype.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(rtbtgb.fields...)
}

// ResourceTypeBaseTypeSelect is the builder for select fields of ResourceTypeBaseType entities.
type ResourceTypeBaseTypeSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rtbts *ResourceTypeBaseTypeSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rtbts.path(ctx)
	if err != nil {
		return err
	}
	rtbts.sql = query
	return rtbts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rtbts *ResourceTypeBaseTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rtbts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rtbts *ResourceTypeBaseTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rtbts.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeBaseTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rtbts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rtbts *ResourceTypeBaseTypeSelect) StringsX(ctx context.Context) []string {
	v, err := rtbts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rtbts *ResourceTypeBaseTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rtbts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetypebasetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeBaseTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rtbts *ResourceTypeBaseTypeSelect) StringX(ctx context.Context) string {
	v, err := rtbts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rtbts *ResourceTypeBaseTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rtbts.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeBaseTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rtbts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rtbts *ResourceTypeBaseTypeSelect) IntsX(ctx context.Context) []int {
	v, err := rtbts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rtbts *ResourceTypeBaseTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rtbts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetypebasetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeBaseTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rtbts *ResourceTypeBaseTypeSelect) IntX(ctx context.Context) int {
	v, err := rtbts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rtbts *ResourceTypeBaseTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rtbts.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeBaseTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rtbts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rtbts *ResourceTypeBaseTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rtbts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rtbts *ResourceTypeBaseTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rtbts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetypebasetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeBaseTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rtbts *ResourceTypeBaseTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := rtbts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rtbts *ResourceTypeBaseTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rtbts.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeBaseTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rtbts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rtbts *ResourceTypeBaseTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := rtbts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rtbts *ResourceTypeBaseTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rtbts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetypebasetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeBaseTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rtbts *ResourceTypeBaseTypeSelect) BoolX(ctx context.Context) bool {
	v, err := rtbts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rtbts *ResourceTypeBaseTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rtbts.fields {
		if !resourcetypebasetype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := rtbts.sqlQuery().Query()
	if err := rtbts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rtbts *ResourceTypeBaseTypeSelect) sqlQuery() sql.Querier {
	selector := rtbts.sql
	selector.Select(selector.Columns(rtbts.fields...)...)
	return selector
}
