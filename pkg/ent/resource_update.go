// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resource"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationship"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
)

// ResourceUpdate is the builder for updating Resource entities.
type ResourceUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceMutation
}

// Where adds a new predicate for the builder.
func (ru *ResourceUpdate) Where(ps ...predicate.Resource) *ResourceUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetName sets the name field.
func (ru *ResourceUpdate) SetName(s string) *ResourceUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetAvailable sets the available field.
func (ru *ResourceUpdate) SetAvailable(b bool) *ResourceUpdate {
	ru.mutation.SetAvailable(b)
	return ru
}

// SetNillableAvailable sets the available field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableAvailable(b *bool) *ResourceUpdate {
	if b != nil {
		ru.SetAvailable(*b)
	}
	return ru
}

// ClearAvailable clears the value of available.
func (ru *ResourceUpdate) ClearAvailable() *ResourceUpdate {
	ru.mutation.ClearAvailable()
	return ru
}

// SetResourcespecID sets the resourcespec edge to ResourceSpecification by id.
func (ru *ResourceUpdate) SetResourcespecID(id int) *ResourceUpdate {
	ru.mutation.SetResourcespecID(id)
	return ru
}

// SetNillableResourcespecID sets the resourcespec edge to ResourceSpecification by id if the given value is not nil.
func (ru *ResourceUpdate) SetNillableResourcespecID(id *int) *ResourceUpdate {
	if id != nil {
		ru = ru.SetResourcespecID(*id)
	}
	return ru
}

// SetResourcespec sets the resourcespec edge to ResourceSpecification.
func (ru *ResourceUpdate) SetResourcespec(r *ResourceSpecification) *ResourceUpdate {
	return ru.SetResourcespecID(r.ID)
}

// AddResourceAIDs adds the resource_a edge to ResourceRelationship by ids.
func (ru *ResourceUpdate) AddResourceAIDs(ids ...int) *ResourceUpdate {
	ru.mutation.AddResourceAIDs(ids...)
	return ru
}

// AddResourceA adds the resource_a edges to ResourceRelationship.
func (ru *ResourceUpdate) AddResourceA(r ...*ResourceRelationship) *ResourceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddResourceAIDs(ids...)
}

// AddResourceBIDs adds the resource_b edge to ResourceRelationship by ids.
func (ru *ResourceUpdate) AddResourceBIDs(ids ...int) *ResourceUpdate {
	ru.mutation.AddResourceBIDs(ids...)
	return ru
}

// AddResourceB adds the resource_b edges to ResourceRelationship.
func (ru *ResourceUpdate) AddResourceB(r ...*ResourceRelationship) *ResourceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddResourceBIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (ru *ResourceUpdate) Mutation() *ResourceMutation {
	return ru.mutation
}

// ClearResourcespec clears the "resourcespec" edge to type ResourceSpecification.
func (ru *ResourceUpdate) ClearResourcespec() *ResourceUpdate {
	ru.mutation.ClearResourcespec()
	return ru
}

// ClearResourceA clears all "resource_a" edges to type ResourceRelationship.
func (ru *ResourceUpdate) ClearResourceA() *ResourceUpdate {
	ru.mutation.ClearResourceA()
	return ru
}

// RemoveResourceAIDs removes the resource_a edge to ResourceRelationship by ids.
func (ru *ResourceUpdate) RemoveResourceAIDs(ids ...int) *ResourceUpdate {
	ru.mutation.RemoveResourceAIDs(ids...)
	return ru
}

// RemoveResourceA removes resource_a edges to ResourceRelationship.
func (ru *ResourceUpdate) RemoveResourceA(r ...*ResourceRelationship) *ResourceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveResourceAIDs(ids...)
}

// ClearResourceB clears all "resource_b" edges to type ResourceRelationship.
func (ru *ResourceUpdate) ClearResourceB() *ResourceUpdate {
	ru.mutation.ClearResourceB()
	return ru
}

// RemoveResourceBIDs removes the resource_b edge to ResourceRelationship by ids.
func (ru *ResourceUpdate) RemoveResourceBIDs(ids ...int) *ResourceUpdate {
	ru.mutation.RemoveResourceBIDs(ids...)
	return ru
}

// RemoveResourceB removes resource_b edges to ResourceRelationship.
func (ru *ResourceUpdate) RemoveResourceB(r ...*ResourceRelationship) *ResourceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveResourceBIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResourceUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResourceUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResourceUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		v := resource.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResourceUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := resource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ru *ResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resource.Table,
			Columns: resource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resource.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resource.FieldUpdateTime,
		})
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resource.FieldName,
		})
	}
	if value, ok := ru.mutation.Available(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resource.FieldAvailable,
		})
	}
	if ru.mutation.AvailableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: resource.FieldAvailable,
		})
	}
	if ru.mutation.ResourcespecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.ResourcespecTable,
			Columns: []string{resource.ResourcespecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ResourcespecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.ResourcespecTable,
			Columns: []string{resource.ResourcespecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ResourceACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceATable,
			Columns: []string{resource.ResourceAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedResourceAIDs(); len(nodes) > 0 && !ru.mutation.ResourceACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceATable,
			Columns: []string{resource.ResourceAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ResourceAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceATable,
			Columns: []string{resource.ResourceAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ResourceBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceBTable,
			Columns: []string{resource.ResourceBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedResourceBIDs(); len(nodes) > 0 && !ru.mutation.ResourceBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceBTable,
			Columns: []string{resource.ResourceBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ResourceBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceBTable,
			Columns: []string{resource.ResourceBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceUpdateOne is the builder for updating a single Resource entity.
type ResourceUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceMutation
}

// SetName sets the name field.
func (ruo *ResourceUpdateOne) SetName(s string) *ResourceUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetAvailable sets the available field.
func (ruo *ResourceUpdateOne) SetAvailable(b bool) *ResourceUpdateOne {
	ruo.mutation.SetAvailable(b)
	return ruo
}

// SetNillableAvailable sets the available field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableAvailable(b *bool) *ResourceUpdateOne {
	if b != nil {
		ruo.SetAvailable(*b)
	}
	return ruo
}

// ClearAvailable clears the value of available.
func (ruo *ResourceUpdateOne) ClearAvailable() *ResourceUpdateOne {
	ruo.mutation.ClearAvailable()
	return ruo
}

// SetResourcespecID sets the resourcespec edge to ResourceSpecification by id.
func (ruo *ResourceUpdateOne) SetResourcespecID(id int) *ResourceUpdateOne {
	ruo.mutation.SetResourcespecID(id)
	return ruo
}

// SetNillableResourcespecID sets the resourcespec edge to ResourceSpecification by id if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableResourcespecID(id *int) *ResourceUpdateOne {
	if id != nil {
		ruo = ruo.SetResourcespecID(*id)
	}
	return ruo
}

// SetResourcespec sets the resourcespec edge to ResourceSpecification.
func (ruo *ResourceUpdateOne) SetResourcespec(r *ResourceSpecification) *ResourceUpdateOne {
	return ruo.SetResourcespecID(r.ID)
}

// AddResourceAIDs adds the resource_a edge to ResourceRelationship by ids.
func (ruo *ResourceUpdateOne) AddResourceAIDs(ids ...int) *ResourceUpdateOne {
	ruo.mutation.AddResourceAIDs(ids...)
	return ruo
}

// AddResourceA adds the resource_a edges to ResourceRelationship.
func (ruo *ResourceUpdateOne) AddResourceA(r ...*ResourceRelationship) *ResourceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddResourceAIDs(ids...)
}

// AddResourceBIDs adds the resource_b edge to ResourceRelationship by ids.
func (ruo *ResourceUpdateOne) AddResourceBIDs(ids ...int) *ResourceUpdateOne {
	ruo.mutation.AddResourceBIDs(ids...)
	return ruo
}

// AddResourceB adds the resource_b edges to ResourceRelationship.
func (ruo *ResourceUpdateOne) AddResourceB(r ...*ResourceRelationship) *ResourceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddResourceBIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (ruo *ResourceUpdateOne) Mutation() *ResourceMutation {
	return ruo.mutation
}

// ClearResourcespec clears the "resourcespec" edge to type ResourceSpecification.
func (ruo *ResourceUpdateOne) ClearResourcespec() *ResourceUpdateOne {
	ruo.mutation.ClearResourcespec()
	return ruo
}

// ClearResourceA clears all "resource_a" edges to type ResourceRelationship.
func (ruo *ResourceUpdateOne) ClearResourceA() *ResourceUpdateOne {
	ruo.mutation.ClearResourceA()
	return ruo
}

// RemoveResourceAIDs removes the resource_a edge to ResourceRelationship by ids.
func (ruo *ResourceUpdateOne) RemoveResourceAIDs(ids ...int) *ResourceUpdateOne {
	ruo.mutation.RemoveResourceAIDs(ids...)
	return ruo
}

// RemoveResourceA removes resource_a edges to ResourceRelationship.
func (ruo *ResourceUpdateOne) RemoveResourceA(r ...*ResourceRelationship) *ResourceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveResourceAIDs(ids...)
}

// ClearResourceB clears all "resource_b" edges to type ResourceRelationship.
func (ruo *ResourceUpdateOne) ClearResourceB() *ResourceUpdateOne {
	ruo.mutation.ClearResourceB()
	return ruo
}

// RemoveResourceBIDs removes the resource_b edge to ResourceRelationship by ids.
func (ruo *ResourceUpdateOne) RemoveResourceBIDs(ids ...int) *ResourceUpdateOne {
	ruo.mutation.RemoveResourceBIDs(ids...)
	return ruo
}

// RemoveResourceB removes resource_b edges to ResourceRelationship.
func (ruo *ResourceUpdateOne) RemoveResourceB(r ...*ResourceRelationship) *ResourceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveResourceBIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *ResourceUpdateOne) Save(ctx context.Context) (*Resource, error) {
	var (
		err  error
		node *Resource
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResourceUpdateOne) SaveX(ctx context.Context) *Resource {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResourceUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResourceUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		v := resource.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResourceUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := resource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ruo *ResourceUpdateOne) sqlSave(ctx context.Context) (_node *Resource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resource.Table,
			Columns: resource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resource.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Resource.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resource.FieldUpdateTime,
		})
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resource.FieldName,
		})
	}
	if value, ok := ruo.mutation.Available(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resource.FieldAvailable,
		})
	}
	if ruo.mutation.AvailableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: resource.FieldAvailable,
		})
	}
	if ruo.mutation.ResourcespecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.ResourcespecTable,
			Columns: []string{resource.ResourcespecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ResourcespecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.ResourcespecTable,
			Columns: []string{resource.ResourcespecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ResourceACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceATable,
			Columns: []string{resource.ResourceAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedResourceAIDs(); len(nodes) > 0 && !ruo.mutation.ResourceACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceATable,
			Columns: []string{resource.ResourceAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ResourceAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceATable,
			Columns: []string{resource.ResourceAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ResourceBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceBTable,
			Columns: []string{resource.ResourceBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedResourceBIDs(); len(nodes) > 0 && !ruo.mutation.ResourceBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceBTable,
			Columns: []string{resource.ResourceBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ResourceBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ResourceBTable,
			Columns: []string{resource.ResourceBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Resource{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
