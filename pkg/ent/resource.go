// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/resource"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
)

// Resource is the model entity for the Resource schema.
type Resource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Available holds the value of the "available" field.
	Available *bool `json:"available,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceQuery when eager-loading is set.
	Edges                                           ResourceEdges `json:"edges"`
	resource_specification_resource_specification_r *int
}

// ResourceEdges holds the relations/edges for other nodes in the graph.
type ResourceEdges struct {
	// Resourcespec holds the value of the resourcespec edge.
	Resourcespec *ResourceSpecification
	// ResourceA holds the value of the resource_a edge.
	ResourceA []*ResourceRelationship
	// ResourceB holds the value of the resource_b edge.
	ResourceB []*ResourceRelationship
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ResourcespecOrErr returns the Resourcespec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceEdges) ResourcespecOrErr() (*ResourceSpecification, error) {
	if e.loadedTypes[0] {
		if e.Resourcespec == nil {
			// The edge resourcespec was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcespecification.Label}
		}
		return e.Resourcespec, nil
	}
	return nil, &NotLoadedError{edge: "resourcespec"}
}

// ResourceAOrErr returns the ResourceA value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) ResourceAOrErr() ([]*ResourceRelationship, error) {
	if e.loadedTypes[1] {
		return e.ResourceA, nil
	}
	return nil, &NotLoadedError{edge: "resource_a"}
}

// ResourceBOrErr returns the ResourceB value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) ResourceBOrErr() ([]*ResourceRelationship, error) {
	if e.loadedTypes[2] {
		return e.ResourceB, nil
	}
	return nil, &NotLoadedError{edge: "resource_b"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resource) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullBool{},   // available
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Resource) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // resource_specification_resource_specification_r
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resource fields.
func (r *Resource) assignValues(values ...interface{}) error {
	if m, n := len(values), len(resource.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		r.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		r.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		r.Name = value.String
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field available", values[3])
	} else if value.Valid {
		r.Available = new(bool)
		*r.Available = value.Bool
	}
	values = values[4:]
	if len(values) == len(resource.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_specification_resource_specification_r", value)
		} else if value.Valid {
			r.resource_specification_resource_specification_r = new(int)
			*r.resource_specification_resource_specification_r = int(value.Int64)
		}
	}
	return nil
}

// QueryResourcespec queries the resourcespec edge of the Resource.
func (r *Resource) QueryResourcespec() *ResourceSpecificationQuery {
	return (&ResourceClient{config: r.config}).QueryResourcespec(r)
}

// QueryResourceA queries the resource_a edge of the Resource.
func (r *Resource) QueryResourceA() *ResourceRelationshipQuery {
	return (&ResourceClient{config: r.config}).QueryResourceA(r)
}

// QueryResourceB queries the resource_b edge of the Resource.
func (r *Resource) QueryResourceB() *ResourceRelationshipQuery {
	return (&ResourceClient{config: r.config}).QueryResourceB(r)
}

// Update returns a builder for updating this Resource.
// Note that, you need to call Resource.Unwrap() before calling this method, if this Resource
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resource) Update() *ResourceUpdateOne {
	return (&ResourceClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Resource) Unwrap() *Resource {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resource is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resource) String() string {
	var builder strings.Builder
	builder.WriteString("Resource(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	if v := r.Available; v != nil {
		builder.WriteString(", available=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Resources is a parsable slice of Resource.
type Resources []*Resource

func (r Resources) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
