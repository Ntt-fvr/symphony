// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/temporalfrecuency"
)

// TemporalFrecuencyUpdate is the builder for updating TemporalFrecuency entities.
type TemporalFrecuencyUpdate struct {
	config
	hooks    []Hook
	mutation *TemporalFrecuencyMutation
}

// Where adds a new predicate for the builder.
func (tfu *TemporalFrecuencyUpdate) Where(ps ...predicate.TemporalFrecuency) *TemporalFrecuencyUpdate {
	tfu.mutation.predicates = append(tfu.mutation.predicates, ps...)
	return tfu
}

// SetName sets the name field.
func (tfu *TemporalFrecuencyUpdate) SetName(s string) *TemporalFrecuencyUpdate {
	tfu.mutation.SetName(s)
	return tfu
}

// AddTemporalFrecuencyFkIDs adds the temporalFrecuencyFk edge to Kqi by ids.
func (tfu *TemporalFrecuencyUpdate) AddTemporalFrecuencyFkIDs(ids ...int) *TemporalFrecuencyUpdate {
	tfu.mutation.AddTemporalFrecuencyFkIDs(ids...)
	return tfu
}

// AddTemporalFrecuencyFk adds the temporalFrecuencyFk edges to Kqi.
func (tfu *TemporalFrecuencyUpdate) AddTemporalFrecuencyFk(k ...*Kqi) *TemporalFrecuencyUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tfu.AddTemporalFrecuencyFkIDs(ids...)
}

// Mutation returns the TemporalFrecuencyMutation object of the builder.
func (tfu *TemporalFrecuencyUpdate) Mutation() *TemporalFrecuencyMutation {
	return tfu.mutation
}

// ClearTemporalFrecuencyFk clears all "temporalFrecuencyFk" edges to type Kqi.
func (tfu *TemporalFrecuencyUpdate) ClearTemporalFrecuencyFk() *TemporalFrecuencyUpdate {
	tfu.mutation.ClearTemporalFrecuencyFk()
	return tfu
}

// RemoveTemporalFrecuencyFkIDs removes the temporalFrecuencyFk edge to Kqi by ids.
func (tfu *TemporalFrecuencyUpdate) RemoveTemporalFrecuencyFkIDs(ids ...int) *TemporalFrecuencyUpdate {
	tfu.mutation.RemoveTemporalFrecuencyFkIDs(ids...)
	return tfu
}

// RemoveTemporalFrecuencyFk removes temporalFrecuencyFk edges to Kqi.
func (tfu *TemporalFrecuencyUpdate) RemoveTemporalFrecuencyFk(k ...*Kqi) *TemporalFrecuencyUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tfu.RemoveTemporalFrecuencyFkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfu *TemporalFrecuencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tfu.defaults()
	if len(tfu.hooks) == 0 {
		if err = tfu.check(); err != nil {
			return 0, err
		}
		affected, err = tfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemporalFrecuencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tfu.check(); err != nil {
				return 0, err
			}
			tfu.mutation = mutation
			affected, err = tfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tfu.hooks) - 1; i >= 0; i-- {
			mut = tfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tfu *TemporalFrecuencyUpdate) SaveX(ctx context.Context) int {
	affected, err := tfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfu *TemporalFrecuencyUpdate) Exec(ctx context.Context) error {
	_, err := tfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfu *TemporalFrecuencyUpdate) ExecX(ctx context.Context) {
	if err := tfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfu *TemporalFrecuencyUpdate) defaults() {
	if _, ok := tfu.mutation.UpdateTime(); !ok {
		v := temporalfrecuency.UpdateDefaultUpdateTime()
		tfu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfu *TemporalFrecuencyUpdate) check() error {
	if v, ok := tfu.mutation.Name(); ok {
		if err := temporalfrecuency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (tfu *TemporalFrecuencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   temporalfrecuency.Table,
			Columns: temporalfrecuency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: temporalfrecuency.FieldID,
			},
		},
	}
	if ps := tfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: temporalfrecuency.FieldUpdateTime,
		})
	}
	if value, ok := tfu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: temporalfrecuency.FieldName,
		})
	}
	if tfu.mutation.TemporalFrecuencyFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalfrecuency.TemporalFrecuencyFkTable,
			Columns: []string{temporalfrecuency.TemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.RemovedTemporalFrecuencyFkIDs(); len(nodes) > 0 && !tfu.mutation.TemporalFrecuencyFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalfrecuency.TemporalFrecuencyFkTable,
			Columns: []string{temporalfrecuency.TemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.TemporalFrecuencyFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalfrecuency.TemporalFrecuencyFkTable,
			Columns: []string{temporalfrecuency.TemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temporalfrecuency.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TemporalFrecuencyUpdateOne is the builder for updating a single TemporalFrecuency entity.
type TemporalFrecuencyUpdateOne struct {
	config
	hooks    []Hook
	mutation *TemporalFrecuencyMutation
}

// SetName sets the name field.
func (tfuo *TemporalFrecuencyUpdateOne) SetName(s string) *TemporalFrecuencyUpdateOne {
	tfuo.mutation.SetName(s)
	return tfuo
}

// AddTemporalFrecuencyFkIDs adds the temporalFrecuencyFk edge to Kqi by ids.
func (tfuo *TemporalFrecuencyUpdateOne) AddTemporalFrecuencyFkIDs(ids ...int) *TemporalFrecuencyUpdateOne {
	tfuo.mutation.AddTemporalFrecuencyFkIDs(ids...)
	return tfuo
}

// AddTemporalFrecuencyFk adds the temporalFrecuencyFk edges to Kqi.
func (tfuo *TemporalFrecuencyUpdateOne) AddTemporalFrecuencyFk(k ...*Kqi) *TemporalFrecuencyUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tfuo.AddTemporalFrecuencyFkIDs(ids...)
}

// Mutation returns the TemporalFrecuencyMutation object of the builder.
func (tfuo *TemporalFrecuencyUpdateOne) Mutation() *TemporalFrecuencyMutation {
	return tfuo.mutation
}

// ClearTemporalFrecuencyFk clears all "temporalFrecuencyFk" edges to type Kqi.
func (tfuo *TemporalFrecuencyUpdateOne) ClearTemporalFrecuencyFk() *TemporalFrecuencyUpdateOne {
	tfuo.mutation.ClearTemporalFrecuencyFk()
	return tfuo
}

// RemoveTemporalFrecuencyFkIDs removes the temporalFrecuencyFk edge to Kqi by ids.
func (tfuo *TemporalFrecuencyUpdateOne) RemoveTemporalFrecuencyFkIDs(ids ...int) *TemporalFrecuencyUpdateOne {
	tfuo.mutation.RemoveTemporalFrecuencyFkIDs(ids...)
	return tfuo
}

// RemoveTemporalFrecuencyFk removes temporalFrecuencyFk edges to Kqi.
func (tfuo *TemporalFrecuencyUpdateOne) RemoveTemporalFrecuencyFk(k ...*Kqi) *TemporalFrecuencyUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return tfuo.RemoveTemporalFrecuencyFkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tfuo *TemporalFrecuencyUpdateOne) Save(ctx context.Context) (*TemporalFrecuency, error) {
	var (
		err  error
		node *TemporalFrecuency
	)
	tfuo.defaults()
	if len(tfuo.hooks) == 0 {
		if err = tfuo.check(); err != nil {
			return nil, err
		}
		node, err = tfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemporalFrecuencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tfuo.check(); err != nil {
				return nil, err
			}
			tfuo.mutation = mutation
			node, err = tfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tfuo.hooks) - 1; i >= 0; i-- {
			mut = tfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tfuo *TemporalFrecuencyUpdateOne) SaveX(ctx context.Context) *TemporalFrecuency {
	node, err := tfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfuo *TemporalFrecuencyUpdateOne) Exec(ctx context.Context) error {
	_, err := tfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfuo *TemporalFrecuencyUpdateOne) ExecX(ctx context.Context) {
	if err := tfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfuo *TemporalFrecuencyUpdateOne) defaults() {
	if _, ok := tfuo.mutation.UpdateTime(); !ok {
		v := temporalfrecuency.UpdateDefaultUpdateTime()
		tfuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfuo *TemporalFrecuencyUpdateOne) check() error {
	if v, ok := tfuo.mutation.Name(); ok {
		if err := temporalfrecuency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (tfuo *TemporalFrecuencyUpdateOne) sqlSave(ctx context.Context) (_node *TemporalFrecuency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   temporalfrecuency.Table,
			Columns: temporalfrecuency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: temporalfrecuency.FieldID,
			},
		},
	}
	id, ok := tfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TemporalFrecuency.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tfuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: temporalfrecuency.FieldUpdateTime,
		})
	}
	if value, ok := tfuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: temporalfrecuency.FieldName,
		})
	}
	if tfuo.mutation.TemporalFrecuencyFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalfrecuency.TemporalFrecuencyFkTable,
			Columns: []string{temporalfrecuency.TemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.RemovedTemporalFrecuencyFkIDs(); len(nodes) > 0 && !tfuo.mutation.TemporalFrecuencyFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalfrecuency.TemporalFrecuencyFkTable,
			Columns: []string{temporalfrecuency.TemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.TemporalFrecuencyFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalfrecuency.TemporalFrecuencyFkTable,
			Columns: []string{temporalfrecuency.TemporalFrecuencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TemporalFrecuency{config: tfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temporalfrecuency.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
