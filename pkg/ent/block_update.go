// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/flowdraft"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// BlockUpdate is the builder for updating Block entities.
type BlockUpdate struct {
	config
	hooks      []Hook
	mutation   *BlockMutation
	predicates []predicate.Block
}

// Where adds a new predicate for the builder.
func (bu *BlockUpdate) Where(ps ...predicate.Block) *BlockUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetName sets the name field.
func (bu *BlockUpdate) SetName(s string) *BlockUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetType sets the type field.
func (bu *BlockUpdate) SetType(b block.Type) *BlockUpdate {
	bu.mutation.SetType(b)
	return bu
}

// AddPrevBlockIDs adds the prev_blocks edge to Block by ids.
func (bu *BlockUpdate) AddPrevBlockIDs(ids ...int) *BlockUpdate {
	bu.mutation.AddPrevBlockIDs(ids...)
	return bu
}

// AddPrevBlocks adds the prev_blocks edges to Block.
func (bu *BlockUpdate) AddPrevBlocks(b ...*Block) *BlockUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddPrevBlockIDs(ids...)
}

// AddNextBlockIDs adds the next_blocks edge to Block by ids.
func (bu *BlockUpdate) AddNextBlockIDs(ids ...int) *BlockUpdate {
	bu.mutation.AddNextBlockIDs(ids...)
	return bu
}

// AddNextBlocks adds the next_blocks edges to Block.
func (bu *BlockUpdate) AddNextBlocks(b ...*Block) *BlockUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddNextBlockIDs(ids...)
}

// SetFlowDraftID sets the flow_draft edge to FlowDraft by id.
func (bu *BlockUpdate) SetFlowDraftID(id int) *BlockUpdate {
	bu.mutation.SetFlowDraftID(id)
	return bu
}

// SetFlowDraft sets the flow_draft edge to FlowDraft.
func (bu *BlockUpdate) SetFlowDraft(f *FlowDraft) *BlockUpdate {
	return bu.SetFlowDraftID(f.ID)
}

// AddSourceBlockIDs adds the source_block edge to Block by ids.
func (bu *BlockUpdate) AddSourceBlockIDs(ids ...int) *BlockUpdate {
	bu.mutation.AddSourceBlockIDs(ids...)
	return bu
}

// AddSourceBlock adds the source_block edges to Block.
func (bu *BlockUpdate) AddSourceBlock(b ...*Block) *BlockUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddSourceBlockIDs(ids...)
}

// SetGotoBlockID sets the goto_block edge to Block by id.
func (bu *BlockUpdate) SetGotoBlockID(id int) *BlockUpdate {
	bu.mutation.SetGotoBlockID(id)
	return bu
}

// SetNillableGotoBlockID sets the goto_block edge to Block by id if the given value is not nil.
func (bu *BlockUpdate) SetNillableGotoBlockID(id *int) *BlockUpdate {
	if id != nil {
		bu = bu.SetGotoBlockID(*id)
	}
	return bu
}

// SetGotoBlock sets the goto_block edge to Block.
func (bu *BlockUpdate) SetGotoBlock(b *Block) *BlockUpdate {
	return bu.SetGotoBlockID(b.ID)
}

// Mutation returns the BlockMutation object of the builder.
func (bu *BlockUpdate) Mutation() *BlockMutation {
	return bu.mutation
}

// ClearPrevBlocks clears all "prev_blocks" edges to type Block.
func (bu *BlockUpdate) ClearPrevBlocks() *BlockUpdate {
	bu.mutation.ClearPrevBlocks()
	return bu
}

// RemovePrevBlockIDs removes the prev_blocks edge to Block by ids.
func (bu *BlockUpdate) RemovePrevBlockIDs(ids ...int) *BlockUpdate {
	bu.mutation.RemovePrevBlockIDs(ids...)
	return bu
}

// RemovePrevBlocks removes prev_blocks edges to Block.
func (bu *BlockUpdate) RemovePrevBlocks(b ...*Block) *BlockUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemovePrevBlockIDs(ids...)
}

// ClearNextBlocks clears all "next_blocks" edges to type Block.
func (bu *BlockUpdate) ClearNextBlocks() *BlockUpdate {
	bu.mutation.ClearNextBlocks()
	return bu
}

// RemoveNextBlockIDs removes the next_blocks edge to Block by ids.
func (bu *BlockUpdate) RemoveNextBlockIDs(ids ...int) *BlockUpdate {
	bu.mutation.RemoveNextBlockIDs(ids...)
	return bu
}

// RemoveNextBlocks removes next_blocks edges to Block.
func (bu *BlockUpdate) RemoveNextBlocks(b ...*Block) *BlockUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveNextBlockIDs(ids...)
}

// ClearFlowDraft clears the "flow_draft" edge to type FlowDraft.
func (bu *BlockUpdate) ClearFlowDraft() *BlockUpdate {
	bu.mutation.ClearFlowDraft()
	return bu
}

// ClearSourceBlock clears all "source_block" edges to type Block.
func (bu *BlockUpdate) ClearSourceBlock() *BlockUpdate {
	bu.mutation.ClearSourceBlock()
	return bu
}

// RemoveSourceBlockIDs removes the source_block edge to Block by ids.
func (bu *BlockUpdate) RemoveSourceBlockIDs(ids ...int) *BlockUpdate {
	bu.mutation.RemoveSourceBlockIDs(ids...)
	return bu
}

// RemoveSourceBlock removes source_block edges to Block.
func (bu *BlockUpdate) RemoveSourceBlock(b ...*Block) *BlockUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveSourceBlockIDs(ids...)
}

// ClearGotoBlock clears the "goto_block" edge to type Block.
func (bu *BlockUpdate) ClearGotoBlock() *BlockUpdate {
	bu.mutation.ClearGotoBlock()
	return bu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BlockUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := bu.mutation.UpdateTime(); !ok {
		v := block.UpdateDefaultUpdateTime()
		bu.mutation.SetUpdateTime(v)
	}
	if v, ok := bu.mutation.Name(); ok {
		if err := block.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := bu.mutation.GetType(); ok {
		if err := block.TypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}

	if _, ok := bu.mutation.FlowDraftID(); bu.mutation.FlowDraftCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"flow_draft\"")
	}

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlockUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlockUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlockUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BlockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   block.Table,
			Columns: block.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: block.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: block.FieldUpdateTime,
		})
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldName,
		})
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldType,
		})
	}
	if bu.mutation.PrevBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   block.PrevBlocksTable,
			Columns: block.PrevBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedPrevBlocksIDs(); len(nodes) > 0 && !bu.mutation.PrevBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   block.PrevBlocksTable,
			Columns: block.PrevBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PrevBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   block.PrevBlocksTable,
			Columns: block.PrevBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.NextBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.NextBlocksTable,
			Columns: block.NextBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedNextBlocksIDs(); len(nodes) > 0 && !bu.mutation.NextBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.NextBlocksTable,
			Columns: block.NextBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.NextBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.NextBlocksTable,
			Columns: block.NextBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FlowDraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowDraftTable,
			Columns: []string{block.FlowDraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FlowDraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowDraftTable,
			Columns: []string{block.FlowDraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.SourceBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedSourceBlockIDs(); len(nodes) > 0 && !bu.mutation.SourceBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.SourceBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.GotoBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.GotoBlockTable,
			Columns: []string{block.GotoBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.GotoBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.GotoBlockTable,
			Columns: []string{block.GotoBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BlockUpdateOne is the builder for updating a single Block entity.
type BlockUpdateOne struct {
	config
	hooks    []Hook
	mutation *BlockMutation
}

// SetName sets the name field.
func (buo *BlockUpdateOne) SetName(s string) *BlockUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetType sets the type field.
func (buo *BlockUpdateOne) SetType(b block.Type) *BlockUpdateOne {
	buo.mutation.SetType(b)
	return buo
}

// AddPrevBlockIDs adds the prev_blocks edge to Block by ids.
func (buo *BlockUpdateOne) AddPrevBlockIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.AddPrevBlockIDs(ids...)
	return buo
}

// AddPrevBlocks adds the prev_blocks edges to Block.
func (buo *BlockUpdateOne) AddPrevBlocks(b ...*Block) *BlockUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddPrevBlockIDs(ids...)
}

// AddNextBlockIDs adds the next_blocks edge to Block by ids.
func (buo *BlockUpdateOne) AddNextBlockIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.AddNextBlockIDs(ids...)
	return buo
}

// AddNextBlocks adds the next_blocks edges to Block.
func (buo *BlockUpdateOne) AddNextBlocks(b ...*Block) *BlockUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddNextBlockIDs(ids...)
}

// SetFlowDraftID sets the flow_draft edge to FlowDraft by id.
func (buo *BlockUpdateOne) SetFlowDraftID(id int) *BlockUpdateOne {
	buo.mutation.SetFlowDraftID(id)
	return buo
}

// SetFlowDraft sets the flow_draft edge to FlowDraft.
func (buo *BlockUpdateOne) SetFlowDraft(f *FlowDraft) *BlockUpdateOne {
	return buo.SetFlowDraftID(f.ID)
}

// AddSourceBlockIDs adds the source_block edge to Block by ids.
func (buo *BlockUpdateOne) AddSourceBlockIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.AddSourceBlockIDs(ids...)
	return buo
}

// AddSourceBlock adds the source_block edges to Block.
func (buo *BlockUpdateOne) AddSourceBlock(b ...*Block) *BlockUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddSourceBlockIDs(ids...)
}

// SetGotoBlockID sets the goto_block edge to Block by id.
func (buo *BlockUpdateOne) SetGotoBlockID(id int) *BlockUpdateOne {
	buo.mutation.SetGotoBlockID(id)
	return buo
}

// SetNillableGotoBlockID sets the goto_block edge to Block by id if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableGotoBlockID(id *int) *BlockUpdateOne {
	if id != nil {
		buo = buo.SetGotoBlockID(*id)
	}
	return buo
}

// SetGotoBlock sets the goto_block edge to Block.
func (buo *BlockUpdateOne) SetGotoBlock(b *Block) *BlockUpdateOne {
	return buo.SetGotoBlockID(b.ID)
}

// Mutation returns the BlockMutation object of the builder.
func (buo *BlockUpdateOne) Mutation() *BlockMutation {
	return buo.mutation
}

// ClearPrevBlocks clears all "prev_blocks" edges to type Block.
func (buo *BlockUpdateOne) ClearPrevBlocks() *BlockUpdateOne {
	buo.mutation.ClearPrevBlocks()
	return buo
}

// RemovePrevBlockIDs removes the prev_blocks edge to Block by ids.
func (buo *BlockUpdateOne) RemovePrevBlockIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.RemovePrevBlockIDs(ids...)
	return buo
}

// RemovePrevBlocks removes prev_blocks edges to Block.
func (buo *BlockUpdateOne) RemovePrevBlocks(b ...*Block) *BlockUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemovePrevBlockIDs(ids...)
}

// ClearNextBlocks clears all "next_blocks" edges to type Block.
func (buo *BlockUpdateOne) ClearNextBlocks() *BlockUpdateOne {
	buo.mutation.ClearNextBlocks()
	return buo
}

// RemoveNextBlockIDs removes the next_blocks edge to Block by ids.
func (buo *BlockUpdateOne) RemoveNextBlockIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.RemoveNextBlockIDs(ids...)
	return buo
}

// RemoveNextBlocks removes next_blocks edges to Block.
func (buo *BlockUpdateOne) RemoveNextBlocks(b ...*Block) *BlockUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveNextBlockIDs(ids...)
}

// ClearFlowDraft clears the "flow_draft" edge to type FlowDraft.
func (buo *BlockUpdateOne) ClearFlowDraft() *BlockUpdateOne {
	buo.mutation.ClearFlowDraft()
	return buo
}

// ClearSourceBlock clears all "source_block" edges to type Block.
func (buo *BlockUpdateOne) ClearSourceBlock() *BlockUpdateOne {
	buo.mutation.ClearSourceBlock()
	return buo
}

// RemoveSourceBlockIDs removes the source_block edge to Block by ids.
func (buo *BlockUpdateOne) RemoveSourceBlockIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.RemoveSourceBlockIDs(ids...)
	return buo
}

// RemoveSourceBlock removes source_block edges to Block.
func (buo *BlockUpdateOne) RemoveSourceBlock(b ...*Block) *BlockUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveSourceBlockIDs(ids...)
}

// ClearGotoBlock clears the "goto_block" edge to type Block.
func (buo *BlockUpdateOne) ClearGotoBlock() *BlockUpdateOne {
	buo.mutation.ClearGotoBlock()
	return buo
}

// Save executes the query and returns the updated entity.
func (buo *BlockUpdateOne) Save(ctx context.Context) (*Block, error) {
	if _, ok := buo.mutation.UpdateTime(); !ok {
		v := block.UpdateDefaultUpdateTime()
		buo.mutation.SetUpdateTime(v)
	}
	if v, ok := buo.mutation.Name(); ok {
		if err := block.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := buo.mutation.GetType(); ok {
		if err := block.TypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}

	if _, ok := buo.mutation.FlowDraftID(); buo.mutation.FlowDraftCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"flow_draft\"")
	}

	var (
		err  error
		node *Block
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlockUpdateOne) SaveX(ctx context.Context) *Block {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BlockUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlockUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BlockUpdateOne) sqlSave(ctx context.Context) (b *Block, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   block.Table,
			Columns: block.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: block.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Block.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: block.FieldUpdateTime,
		})
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldName,
		})
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldType,
		})
	}
	if buo.mutation.PrevBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   block.PrevBlocksTable,
			Columns: block.PrevBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedPrevBlocksIDs(); len(nodes) > 0 && !buo.mutation.PrevBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   block.PrevBlocksTable,
			Columns: block.PrevBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PrevBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   block.PrevBlocksTable,
			Columns: block.PrevBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.NextBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.NextBlocksTable,
			Columns: block.NextBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedNextBlocksIDs(); len(nodes) > 0 && !buo.mutation.NextBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.NextBlocksTable,
			Columns: block.NextBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.NextBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   block.NextBlocksTable,
			Columns: block.NextBlocksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FlowDraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowDraftTable,
			Columns: []string{block.FlowDraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FlowDraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowDraftTable,
			Columns: []string{block.FlowDraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.SourceBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedSourceBlockIDs(); len(nodes) > 0 && !buo.mutation.SourceBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.SourceBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.GotoBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.GotoBlockTable,
			Columns: []string{block.GotoBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.GotoBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.GotoBlockTable,
			Columns: []string{block.GotoBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Block{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
