// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetyperelationship"
)

// ResourceTypeRelationshipUpdate is the builder for updating ResourceTypeRelationship entities.
type ResourceTypeRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceTypeRelationshipMutation
}

// Where adds a new predicate for the builder.
func (rtru *ResourceTypeRelationshipUpdate) Where(ps ...predicate.ResourceTypeRelationship) *ResourceTypeRelationshipUpdate {
	rtru.mutation.predicates = append(rtru.mutation.predicates, ps...)
	return rtru
}

// SetResourceRelationshipType sets the ResourceRelationshipType field.
func (rtru *ResourceTypeRelationshipUpdate) SetResourceRelationshipType(rrt resourcetyperelationship.ResourceRelationshipType) *ResourceTypeRelationshipUpdate {
	rtru.mutation.SetResourceRelationshipType(rrt)
	return rtru
}

// SetResourceRelationshipMultiplicity sets the ResourceRelationshipMultiplicity field.
func (rtru *ResourceTypeRelationshipUpdate) SetResourceRelationshipMultiplicity(rrm resourcetyperelationship.ResourceRelationshipMultiplicity) *ResourceTypeRelationshipUpdate {
	rtru.mutation.SetResourceRelationshipMultiplicity(rrm)
	return rtru
}

// SetResourcetypeaID sets the resourcetypea edge to ResourceType by id.
func (rtru *ResourceTypeRelationshipUpdate) SetResourcetypeaID(id int) *ResourceTypeRelationshipUpdate {
	rtru.mutation.SetResourcetypeaID(id)
	return rtru
}

// SetNillableResourcetypeaID sets the resourcetypea edge to ResourceType by id if the given value is not nil.
func (rtru *ResourceTypeRelationshipUpdate) SetNillableResourcetypeaID(id *int) *ResourceTypeRelationshipUpdate {
	if id != nil {
		rtru = rtru.SetResourcetypeaID(*id)
	}
	return rtru
}

// SetResourcetypea sets the resourcetypea edge to ResourceType.
func (rtru *ResourceTypeRelationshipUpdate) SetResourcetypea(r *ResourceType) *ResourceTypeRelationshipUpdate {
	return rtru.SetResourcetypeaID(r.ID)
}

// SetResourcetypebID sets the resourcetypeb edge to ResourceType by id.
func (rtru *ResourceTypeRelationshipUpdate) SetResourcetypebID(id int) *ResourceTypeRelationshipUpdate {
	rtru.mutation.SetResourcetypebID(id)
	return rtru
}

// SetNillableResourcetypebID sets the resourcetypeb edge to ResourceType by id if the given value is not nil.
func (rtru *ResourceTypeRelationshipUpdate) SetNillableResourcetypebID(id *int) *ResourceTypeRelationshipUpdate {
	if id != nil {
		rtru = rtru.SetResourcetypebID(*id)
	}
	return rtru
}

// SetResourcetypeb sets the resourcetypeb edge to ResourceType.
func (rtru *ResourceTypeRelationshipUpdate) SetResourcetypeb(r *ResourceType) *ResourceTypeRelationshipUpdate {
	return rtru.SetResourcetypebID(r.ID)
}

// SetLocationTypeID sets the locationType edge to LocationType by id.
func (rtru *ResourceTypeRelationshipUpdate) SetLocationTypeID(id int) *ResourceTypeRelationshipUpdate {
	rtru.mutation.SetLocationTypeID(id)
	return rtru
}

// SetNillableLocationTypeID sets the locationType edge to LocationType by id if the given value is not nil.
func (rtru *ResourceTypeRelationshipUpdate) SetNillableLocationTypeID(id *int) *ResourceTypeRelationshipUpdate {
	if id != nil {
		rtru = rtru.SetLocationTypeID(*id)
	}
	return rtru
}

// SetLocationType sets the locationType edge to LocationType.
func (rtru *ResourceTypeRelationshipUpdate) SetLocationType(l *LocationType) *ResourceTypeRelationshipUpdate {
	return rtru.SetLocationTypeID(l.ID)
}

// Mutation returns the ResourceTypeRelationshipMutation object of the builder.
func (rtru *ResourceTypeRelationshipUpdate) Mutation() *ResourceTypeRelationshipMutation {
	return rtru.mutation
}

// ClearResourcetypea clears the "resourcetypea" edge to type ResourceType.
func (rtru *ResourceTypeRelationshipUpdate) ClearResourcetypea() *ResourceTypeRelationshipUpdate {
	rtru.mutation.ClearResourcetypea()
	return rtru
}

// ClearResourcetypeb clears the "resourcetypeb" edge to type ResourceType.
func (rtru *ResourceTypeRelationshipUpdate) ClearResourcetypeb() *ResourceTypeRelationshipUpdate {
	rtru.mutation.ClearResourcetypeb()
	return rtru
}

// ClearLocationType clears the "locationType" edge to type LocationType.
func (rtru *ResourceTypeRelationshipUpdate) ClearLocationType() *ResourceTypeRelationshipUpdate {
	rtru.mutation.ClearLocationType()
	return rtru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtru *ResourceTypeRelationshipUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rtru.defaults()
	if len(rtru.hooks) == 0 {
		if err = rtru.check(); err != nil {
			return 0, err
		}
		affected, err = rtru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceTypeRelationshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtru.check(); err != nil {
				return 0, err
			}
			rtru.mutation = mutation
			affected, err = rtru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rtru.hooks) - 1; i >= 0; i-- {
			mut = rtru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtru *ResourceTypeRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := rtru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtru *ResourceTypeRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := rtru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtru *ResourceTypeRelationshipUpdate) ExecX(ctx context.Context) {
	if err := rtru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtru *ResourceTypeRelationshipUpdate) defaults() {
	if _, ok := rtru.mutation.UpdateTime(); !ok {
		v := resourcetyperelationship.UpdateDefaultUpdateTime()
		rtru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtru *ResourceTypeRelationshipUpdate) check() error {
	if v, ok := rtru.mutation.ResourceRelationshipType(); ok {
		if err := resourcetyperelationship.ResourceRelationshipTypeValidator(v); err != nil {
			return &ValidationError{Name: "ResourceRelationshipType", err: fmt.Errorf("ent: validator failed for field \"ResourceRelationshipType\": %w", err)}
		}
	}
	if v, ok := rtru.mutation.ResourceRelationshipMultiplicity(); ok {
		if err := resourcetyperelationship.ResourceRelationshipMultiplicityValidator(v); err != nil {
			return &ValidationError{Name: "ResourceRelationshipMultiplicity", err: fmt.Errorf("ent: validator failed for field \"ResourceRelationshipMultiplicity\": %w", err)}
		}
	}
	return nil
}

func (rtru *ResourceTypeRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetyperelationship.Table,
			Columns: resourcetyperelationship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetyperelationship.FieldID,
			},
		},
	}
	if ps := rtru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcetyperelationship.FieldUpdateTime,
		})
	}
	if value, ok := rtru.mutation.ResourceRelationshipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcetyperelationship.FieldResourceRelationshipType,
		})
	}
	if value, ok := rtru.mutation.ResourceRelationshipMultiplicity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcetyperelationship.FieldResourceRelationshipMultiplicity,
		})
	}
	if rtru.mutation.ResourcetypeaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.ResourcetypeaTable,
			Columns: []string{resourcetyperelationship.ResourcetypeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtru.mutation.ResourcetypeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.ResourcetypeaTable,
			Columns: []string{resourcetyperelationship.ResourcetypeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtru.mutation.ResourcetypebCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.ResourcetypebTable,
			Columns: []string{resourcetyperelationship.ResourcetypebColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtru.mutation.ResourcetypebIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.ResourcetypebTable,
			Columns: []string{resourcetyperelationship.ResourcetypebColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtru.mutation.LocationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.LocationTypeTable,
			Columns: []string{resourcetyperelationship.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtru.mutation.LocationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.LocationTypeTable,
			Columns: []string{resourcetyperelationship.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcetyperelationship.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceTypeRelationshipUpdateOne is the builder for updating a single ResourceTypeRelationship entity.
type ResourceTypeRelationshipUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceTypeRelationshipMutation
}

// SetResourceRelationshipType sets the ResourceRelationshipType field.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetResourceRelationshipType(rrt resourcetyperelationship.ResourceRelationshipType) *ResourceTypeRelationshipUpdateOne {
	rtruo.mutation.SetResourceRelationshipType(rrt)
	return rtruo
}

// SetResourceRelationshipMultiplicity sets the ResourceRelationshipMultiplicity field.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetResourceRelationshipMultiplicity(rrm resourcetyperelationship.ResourceRelationshipMultiplicity) *ResourceTypeRelationshipUpdateOne {
	rtruo.mutation.SetResourceRelationshipMultiplicity(rrm)
	return rtruo
}

// SetResourcetypeaID sets the resourcetypea edge to ResourceType by id.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetResourcetypeaID(id int) *ResourceTypeRelationshipUpdateOne {
	rtruo.mutation.SetResourcetypeaID(id)
	return rtruo
}

// SetNillableResourcetypeaID sets the resourcetypea edge to ResourceType by id if the given value is not nil.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetNillableResourcetypeaID(id *int) *ResourceTypeRelationshipUpdateOne {
	if id != nil {
		rtruo = rtruo.SetResourcetypeaID(*id)
	}
	return rtruo
}

// SetResourcetypea sets the resourcetypea edge to ResourceType.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetResourcetypea(r *ResourceType) *ResourceTypeRelationshipUpdateOne {
	return rtruo.SetResourcetypeaID(r.ID)
}

// SetResourcetypebID sets the resourcetypeb edge to ResourceType by id.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetResourcetypebID(id int) *ResourceTypeRelationshipUpdateOne {
	rtruo.mutation.SetResourcetypebID(id)
	return rtruo
}

// SetNillableResourcetypebID sets the resourcetypeb edge to ResourceType by id if the given value is not nil.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetNillableResourcetypebID(id *int) *ResourceTypeRelationshipUpdateOne {
	if id != nil {
		rtruo = rtruo.SetResourcetypebID(*id)
	}
	return rtruo
}

// SetResourcetypeb sets the resourcetypeb edge to ResourceType.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetResourcetypeb(r *ResourceType) *ResourceTypeRelationshipUpdateOne {
	return rtruo.SetResourcetypebID(r.ID)
}

// SetLocationTypeID sets the locationType edge to LocationType by id.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetLocationTypeID(id int) *ResourceTypeRelationshipUpdateOne {
	rtruo.mutation.SetLocationTypeID(id)
	return rtruo
}

// SetNillableLocationTypeID sets the locationType edge to LocationType by id if the given value is not nil.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetNillableLocationTypeID(id *int) *ResourceTypeRelationshipUpdateOne {
	if id != nil {
		rtruo = rtruo.SetLocationTypeID(*id)
	}
	return rtruo
}

// SetLocationType sets the locationType edge to LocationType.
func (rtruo *ResourceTypeRelationshipUpdateOne) SetLocationType(l *LocationType) *ResourceTypeRelationshipUpdateOne {
	return rtruo.SetLocationTypeID(l.ID)
}

// Mutation returns the ResourceTypeRelationshipMutation object of the builder.
func (rtruo *ResourceTypeRelationshipUpdateOne) Mutation() *ResourceTypeRelationshipMutation {
	return rtruo.mutation
}

// ClearResourcetypea clears the "resourcetypea" edge to type ResourceType.
func (rtruo *ResourceTypeRelationshipUpdateOne) ClearResourcetypea() *ResourceTypeRelationshipUpdateOne {
	rtruo.mutation.ClearResourcetypea()
	return rtruo
}

// ClearResourcetypeb clears the "resourcetypeb" edge to type ResourceType.
func (rtruo *ResourceTypeRelationshipUpdateOne) ClearResourcetypeb() *ResourceTypeRelationshipUpdateOne {
	rtruo.mutation.ClearResourcetypeb()
	return rtruo
}

// ClearLocationType clears the "locationType" edge to type LocationType.
func (rtruo *ResourceTypeRelationshipUpdateOne) ClearLocationType() *ResourceTypeRelationshipUpdateOne {
	rtruo.mutation.ClearLocationType()
	return rtruo
}

// Save executes the query and returns the updated entity.
func (rtruo *ResourceTypeRelationshipUpdateOne) Save(ctx context.Context) (*ResourceTypeRelationship, error) {
	var (
		err  error
		node *ResourceTypeRelationship
	)
	rtruo.defaults()
	if len(rtruo.hooks) == 0 {
		if err = rtruo.check(); err != nil {
			return nil, err
		}
		node, err = rtruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceTypeRelationshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtruo.check(); err != nil {
				return nil, err
			}
			rtruo.mutation = mutation
			node, err = rtruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rtruo.hooks) - 1; i >= 0; i-- {
			mut = rtruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtruo *ResourceTypeRelationshipUpdateOne) SaveX(ctx context.Context) *ResourceTypeRelationship {
	node, err := rtruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtruo *ResourceTypeRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := rtruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtruo *ResourceTypeRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := rtruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtruo *ResourceTypeRelationshipUpdateOne) defaults() {
	if _, ok := rtruo.mutation.UpdateTime(); !ok {
		v := resourcetyperelationship.UpdateDefaultUpdateTime()
		rtruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtruo *ResourceTypeRelationshipUpdateOne) check() error {
	if v, ok := rtruo.mutation.ResourceRelationshipType(); ok {
		if err := resourcetyperelationship.ResourceRelationshipTypeValidator(v); err != nil {
			return &ValidationError{Name: "ResourceRelationshipType", err: fmt.Errorf("ent: validator failed for field \"ResourceRelationshipType\": %w", err)}
		}
	}
	if v, ok := rtruo.mutation.ResourceRelationshipMultiplicity(); ok {
		if err := resourcetyperelationship.ResourceRelationshipMultiplicityValidator(v); err != nil {
			return &ValidationError{Name: "ResourceRelationshipMultiplicity", err: fmt.Errorf("ent: validator failed for field \"ResourceRelationshipMultiplicity\": %w", err)}
		}
	}
	return nil
}

func (rtruo *ResourceTypeRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *ResourceTypeRelationship, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetyperelationship.Table,
			Columns: resourcetyperelationship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetyperelationship.FieldID,
			},
		},
	}
	id, ok := rtruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceTypeRelationship.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rtruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcetyperelationship.FieldUpdateTime,
		})
	}
	if value, ok := rtruo.mutation.ResourceRelationshipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcetyperelationship.FieldResourceRelationshipType,
		})
	}
	if value, ok := rtruo.mutation.ResourceRelationshipMultiplicity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcetyperelationship.FieldResourceRelationshipMultiplicity,
		})
	}
	if rtruo.mutation.ResourcetypeaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.ResourcetypeaTable,
			Columns: []string{resourcetyperelationship.ResourcetypeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtruo.mutation.ResourcetypeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.ResourcetypeaTable,
			Columns: []string{resourcetyperelationship.ResourcetypeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtruo.mutation.ResourcetypebCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.ResourcetypebTable,
			Columns: []string{resourcetyperelationship.ResourcetypebColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtruo.mutation.ResourcetypebIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.ResourcetypebTable,
			Columns: []string{resourcetyperelationship.ResourcetypebColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtruo.mutation.LocationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.LocationTypeTable,
			Columns: []string{resourcetyperelationship.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtruo.mutation.LocationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.LocationTypeTable,
			Columns: []string{resourcetyperelationship.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceTypeRelationship{config: rtruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rtruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcetyperelationship.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
