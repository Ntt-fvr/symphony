// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/property"
	"github.com/facebookincubator/symphony/pkg/ent/propertytypevalue"
	"github.com/facebookincubator/symphony/pkg/ent/propertyvalue"
)

// PropertyValueUpdate is the builder for updating PropertyValue entities.
type PropertyValueUpdate struct {
	config
	hooks    []Hook
	mutation *PropertyValueMutation
}

// Where adds a new predicate for the builder.
func (pvu *PropertyValueUpdate) Where(ps ...predicate.PropertyValue) *PropertyValueUpdate {
	pvu.mutation.predicates = append(pvu.mutation.predicates, ps...)
	return pvu
}

// SetName sets the name field.
func (pvu *PropertyValueUpdate) SetName(s string) *PropertyValueUpdate {
	pvu.mutation.SetName(s)
	return pvu
}

// SetPropertyID sets the property edge to Property by id.
func (pvu *PropertyValueUpdate) SetPropertyID(id int) *PropertyValueUpdate {
	pvu.mutation.SetPropertyID(id)
	return pvu
}

// SetNillablePropertyID sets the property edge to Property by id if the given value is not nil.
func (pvu *PropertyValueUpdate) SetNillablePropertyID(id *int) *PropertyValueUpdate {
	if id != nil {
		pvu = pvu.SetPropertyID(*id)
	}
	return pvu
}

// SetProperty sets the property edge to Property.
func (pvu *PropertyValueUpdate) SetProperty(p *Property) *PropertyValueUpdate {
	return pvu.SetPropertyID(p.ID)
}

// SetPropertyTypeValueID sets the property_type_value edge to PropertyTypeValue by id.
func (pvu *PropertyValueUpdate) SetPropertyTypeValueID(id int) *PropertyValueUpdate {
	pvu.mutation.SetPropertyTypeValueID(id)
	return pvu
}

// SetNillablePropertyTypeValueID sets the property_type_value edge to PropertyTypeValue by id if the given value is not nil.
func (pvu *PropertyValueUpdate) SetNillablePropertyTypeValueID(id *int) *PropertyValueUpdate {
	if id != nil {
		pvu = pvu.SetPropertyTypeValueID(*id)
	}
	return pvu
}

// SetPropertyTypeValue sets the property_type_value edge to PropertyTypeValue.
func (pvu *PropertyValueUpdate) SetPropertyTypeValue(p *PropertyTypeValue) *PropertyValueUpdate {
	return pvu.SetPropertyTypeValueID(p.ID)
}

// SetPropertyValueDependenceID sets the property_value_dependence edge to PropertyValue by id.
func (pvu *PropertyValueUpdate) SetPropertyValueDependenceID(id int) *PropertyValueUpdate {
	pvu.mutation.SetPropertyValueDependenceID(id)
	return pvu
}

// SetNillablePropertyValueDependenceID sets the property_value_dependence edge to PropertyValue by id if the given value is not nil.
func (pvu *PropertyValueUpdate) SetNillablePropertyValueDependenceID(id *int) *PropertyValueUpdate {
	if id != nil {
		pvu = pvu.SetPropertyValueDependenceID(*id)
	}
	return pvu
}

// SetPropertyValueDependence sets the property_value_dependence edge to PropertyValue.
func (pvu *PropertyValueUpdate) SetPropertyValueDependence(p *PropertyValue) *PropertyValueUpdate {
	return pvu.SetPropertyValueDependenceID(p.ID)
}

// AddPropertyValueIDs adds the property_value edge to PropertyValue by ids.
func (pvu *PropertyValueUpdate) AddPropertyValueIDs(ids ...int) *PropertyValueUpdate {
	pvu.mutation.AddPropertyValueIDs(ids...)
	return pvu
}

// AddPropertyValue adds the property_value edges to PropertyValue.
func (pvu *PropertyValueUpdate) AddPropertyValue(p ...*PropertyValue) *PropertyValueUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvu.AddPropertyValueIDs(ids...)
}

// Mutation returns the PropertyValueMutation object of the builder.
func (pvu *PropertyValueUpdate) Mutation() *PropertyValueMutation {
	return pvu.mutation
}

// ClearProperty clears the "property" edge to type Property.
func (pvu *PropertyValueUpdate) ClearProperty() *PropertyValueUpdate {
	pvu.mutation.ClearProperty()
	return pvu
}

// ClearPropertyTypeValue clears the "property_type_value" edge to type PropertyTypeValue.
func (pvu *PropertyValueUpdate) ClearPropertyTypeValue() *PropertyValueUpdate {
	pvu.mutation.ClearPropertyTypeValue()
	return pvu
}

// ClearPropertyValueDependence clears the "property_value_dependence" edge to type PropertyValue.
func (pvu *PropertyValueUpdate) ClearPropertyValueDependence() *PropertyValueUpdate {
	pvu.mutation.ClearPropertyValueDependence()
	return pvu
}

// ClearPropertyValue clears all "property_value" edges to type PropertyValue.
func (pvu *PropertyValueUpdate) ClearPropertyValue() *PropertyValueUpdate {
	pvu.mutation.ClearPropertyValue()
	return pvu
}

// RemovePropertyValueIDs removes the property_value edge to PropertyValue by ids.
func (pvu *PropertyValueUpdate) RemovePropertyValueIDs(ids ...int) *PropertyValueUpdate {
	pvu.mutation.RemovePropertyValueIDs(ids...)
	return pvu
}

// RemovePropertyValue removes property_value edges to PropertyValue.
func (pvu *PropertyValueUpdate) RemovePropertyValue(p ...*PropertyValue) *PropertyValueUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvu.RemovePropertyValueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *PropertyValueUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pvu.defaults()
	if len(pvu.hooks) == 0 {
		if err = pvu.check(); err != nil {
			return 0, err
		}
		affected, err = pvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PropertyValueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvu.check(); err != nil {
				return 0, err
			}
			pvu.mutation = mutation
			affected, err = pvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pvu.hooks) - 1; i >= 0; i-- {
			mut = pvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *PropertyValueUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *PropertyValueUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *PropertyValueUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvu *PropertyValueUpdate) defaults() {
	if _, ok := pvu.mutation.UpdateTime(); !ok {
		v := propertyvalue.UpdateDefaultUpdateTime()
		pvu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvu *PropertyValueUpdate) check() error {
	if v, ok := pvu.mutation.Name(); ok {
		if err := propertyvalue.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (pvu *PropertyValueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   propertyvalue.Table,
			Columns: propertyvalue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: propertyvalue.FieldID,
			},
		},
	}
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: propertyvalue.FieldUpdateTime,
		})
	}
	if value, ok := pvu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: propertyvalue.FieldName,
		})
	}
	if pvu.mutation.PropertyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyTable,
			Columns: []string{propertyvalue.PropertyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: property.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.PropertyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyTable,
			Columns: []string{propertyvalue.PropertyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: property.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvu.mutation.PropertyTypeValueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyTypeValueTable,
			Columns: []string{propertyvalue.PropertyTypeValueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertytypevalue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.PropertyTypeValueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyTypeValueTable,
			Columns: []string{propertyvalue.PropertyTypeValueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertytypevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvu.mutation.PropertyValueDependenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyValueDependenceTable,
			Columns: []string{propertyvalue.PropertyValueDependenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertyvalue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.PropertyValueDependenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyValueDependenceTable,
			Columns: []string{propertyvalue.PropertyValueDependenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertyvalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvu.mutation.PropertyValueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyvalue.PropertyValueTable,
			Columns: []string{propertyvalue.PropertyValueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertyvalue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.RemovedPropertyValueIDs(); len(nodes) > 0 && !pvu.mutation.PropertyValueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyvalue.PropertyValueTable,
			Columns: []string{propertyvalue.PropertyValueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertyvalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.PropertyValueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyvalue.PropertyValueTable,
			Columns: []string{propertyvalue.PropertyValueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertyvalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{propertyvalue.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PropertyValueUpdateOne is the builder for updating a single PropertyValue entity.
type PropertyValueUpdateOne struct {
	config
	hooks    []Hook
	mutation *PropertyValueMutation
}

// SetName sets the name field.
func (pvuo *PropertyValueUpdateOne) SetName(s string) *PropertyValueUpdateOne {
	pvuo.mutation.SetName(s)
	return pvuo
}

// SetPropertyID sets the property edge to Property by id.
func (pvuo *PropertyValueUpdateOne) SetPropertyID(id int) *PropertyValueUpdateOne {
	pvuo.mutation.SetPropertyID(id)
	return pvuo
}

// SetNillablePropertyID sets the property edge to Property by id if the given value is not nil.
func (pvuo *PropertyValueUpdateOne) SetNillablePropertyID(id *int) *PropertyValueUpdateOne {
	if id != nil {
		pvuo = pvuo.SetPropertyID(*id)
	}
	return pvuo
}

// SetProperty sets the property edge to Property.
func (pvuo *PropertyValueUpdateOne) SetProperty(p *Property) *PropertyValueUpdateOne {
	return pvuo.SetPropertyID(p.ID)
}

// SetPropertyTypeValueID sets the property_type_value edge to PropertyTypeValue by id.
func (pvuo *PropertyValueUpdateOne) SetPropertyTypeValueID(id int) *PropertyValueUpdateOne {
	pvuo.mutation.SetPropertyTypeValueID(id)
	return pvuo
}

// SetNillablePropertyTypeValueID sets the property_type_value edge to PropertyTypeValue by id if the given value is not nil.
func (pvuo *PropertyValueUpdateOne) SetNillablePropertyTypeValueID(id *int) *PropertyValueUpdateOne {
	if id != nil {
		pvuo = pvuo.SetPropertyTypeValueID(*id)
	}
	return pvuo
}

// SetPropertyTypeValue sets the property_type_value edge to PropertyTypeValue.
func (pvuo *PropertyValueUpdateOne) SetPropertyTypeValue(p *PropertyTypeValue) *PropertyValueUpdateOne {
	return pvuo.SetPropertyTypeValueID(p.ID)
}

// SetPropertyValueDependenceID sets the property_value_dependence edge to PropertyValue by id.
func (pvuo *PropertyValueUpdateOne) SetPropertyValueDependenceID(id int) *PropertyValueUpdateOne {
	pvuo.mutation.SetPropertyValueDependenceID(id)
	return pvuo
}

// SetNillablePropertyValueDependenceID sets the property_value_dependence edge to PropertyValue by id if the given value is not nil.
func (pvuo *PropertyValueUpdateOne) SetNillablePropertyValueDependenceID(id *int) *PropertyValueUpdateOne {
	if id != nil {
		pvuo = pvuo.SetPropertyValueDependenceID(*id)
	}
	return pvuo
}

// SetPropertyValueDependence sets the property_value_dependence edge to PropertyValue.
func (pvuo *PropertyValueUpdateOne) SetPropertyValueDependence(p *PropertyValue) *PropertyValueUpdateOne {
	return pvuo.SetPropertyValueDependenceID(p.ID)
}

// AddPropertyValueIDs adds the property_value edge to PropertyValue by ids.
func (pvuo *PropertyValueUpdateOne) AddPropertyValueIDs(ids ...int) *PropertyValueUpdateOne {
	pvuo.mutation.AddPropertyValueIDs(ids...)
	return pvuo
}

// AddPropertyValue adds the property_value edges to PropertyValue.
func (pvuo *PropertyValueUpdateOne) AddPropertyValue(p ...*PropertyValue) *PropertyValueUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvuo.AddPropertyValueIDs(ids...)
}

// Mutation returns the PropertyValueMutation object of the builder.
func (pvuo *PropertyValueUpdateOne) Mutation() *PropertyValueMutation {
	return pvuo.mutation
}

// ClearProperty clears the "property" edge to type Property.
func (pvuo *PropertyValueUpdateOne) ClearProperty() *PropertyValueUpdateOne {
	pvuo.mutation.ClearProperty()
	return pvuo
}

// ClearPropertyTypeValue clears the "property_type_value" edge to type PropertyTypeValue.
func (pvuo *PropertyValueUpdateOne) ClearPropertyTypeValue() *PropertyValueUpdateOne {
	pvuo.mutation.ClearPropertyTypeValue()
	return pvuo
}

// ClearPropertyValueDependence clears the "property_value_dependence" edge to type PropertyValue.
func (pvuo *PropertyValueUpdateOne) ClearPropertyValueDependence() *PropertyValueUpdateOne {
	pvuo.mutation.ClearPropertyValueDependence()
	return pvuo
}

// ClearPropertyValue clears all "property_value" edges to type PropertyValue.
func (pvuo *PropertyValueUpdateOne) ClearPropertyValue() *PropertyValueUpdateOne {
	pvuo.mutation.ClearPropertyValue()
	return pvuo
}

// RemovePropertyValueIDs removes the property_value edge to PropertyValue by ids.
func (pvuo *PropertyValueUpdateOne) RemovePropertyValueIDs(ids ...int) *PropertyValueUpdateOne {
	pvuo.mutation.RemovePropertyValueIDs(ids...)
	return pvuo
}

// RemovePropertyValue removes property_value edges to PropertyValue.
func (pvuo *PropertyValueUpdateOne) RemovePropertyValue(p ...*PropertyValue) *PropertyValueUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvuo.RemovePropertyValueIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (pvuo *PropertyValueUpdateOne) Save(ctx context.Context) (*PropertyValue, error) {
	var (
		err  error
		node *PropertyValue
	)
	pvuo.defaults()
	if len(pvuo.hooks) == 0 {
		if err = pvuo.check(); err != nil {
			return nil, err
		}
		node, err = pvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PropertyValueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvuo.check(); err != nil {
				return nil, err
			}
			pvuo.mutation = mutation
			node, err = pvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pvuo.hooks) - 1; i >= 0; i-- {
			mut = pvuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *PropertyValueUpdateOne) SaveX(ctx context.Context) *PropertyValue {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *PropertyValueUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *PropertyValueUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvuo *PropertyValueUpdateOne) defaults() {
	if _, ok := pvuo.mutation.UpdateTime(); !ok {
		v := propertyvalue.UpdateDefaultUpdateTime()
		pvuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvuo *PropertyValueUpdateOne) check() error {
	if v, ok := pvuo.mutation.Name(); ok {
		if err := propertyvalue.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (pvuo *PropertyValueUpdateOne) sqlSave(ctx context.Context) (_node *PropertyValue, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   propertyvalue.Table,
			Columns: propertyvalue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: propertyvalue.FieldID,
			},
		},
	}
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PropertyValue.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := pvuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: propertyvalue.FieldUpdateTime,
		})
	}
	if value, ok := pvuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: propertyvalue.FieldName,
		})
	}
	if pvuo.mutation.PropertyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyTable,
			Columns: []string{propertyvalue.PropertyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: property.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.PropertyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyTable,
			Columns: []string{propertyvalue.PropertyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: property.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvuo.mutation.PropertyTypeValueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyTypeValueTable,
			Columns: []string{propertyvalue.PropertyTypeValueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertytypevalue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.PropertyTypeValueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyTypeValueTable,
			Columns: []string{propertyvalue.PropertyTypeValueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertytypevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvuo.mutation.PropertyValueDependenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyValueDependenceTable,
			Columns: []string{propertyvalue.PropertyValueDependenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertyvalue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.PropertyValueDependenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertyvalue.PropertyValueDependenceTable,
			Columns: []string{propertyvalue.PropertyValueDependenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertyvalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvuo.mutation.PropertyValueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyvalue.PropertyValueTable,
			Columns: []string{propertyvalue.PropertyValueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertyvalue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.RemovedPropertyValueIDs(); len(nodes) > 0 && !pvuo.mutation.PropertyValueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyvalue.PropertyValueTable,
			Columns: []string{propertyvalue.PropertyValueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertyvalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.PropertyValueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertyvalue.PropertyValueTable,
			Columns: []string{propertyvalue.PropertyValueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertyvalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PropertyValue{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{propertyvalue.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
