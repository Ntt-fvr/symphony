// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/event"
	"github.com/facebookincubator/symphony/pkg/ent/eventseverity"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EventTypeName holds the value of the "eventTypeName" field.
	EventTypeName string `json:"eventTypeName,omitempty"`
	// SpecificProblem holds the value of the "specificProblem" field.
	SpecificProblem string `json:"specificProblem,omitempty"`
	// AdditionalInfo holds the value of the "additionalInfo" field.
	AdditionalInfo string `json:"additionalInfo,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges                             EventEdges `json:"edges"`
	event_severity_eventseverityevent *int
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Eventseverity holds the value of the eventseverity edge.
	Eventseverity *EventSeverity
	// RuleEvent holds the value of the ruleEvent edge.
	RuleEvent []*Rule
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventseverityOrErr returns the Eventseverity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) EventseverityOrErr() (*EventSeverity, error) {
	if e.loadedTypes[0] {
		if e.Eventseverity == nil {
			// The edge eventseverity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: eventseverity.Label}
		}
		return e.Eventseverity, nil
	}
	return nil, &NotLoadedError{edge: "eventseverity"}
}

// RuleEventOrErr returns the RuleEvent value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) RuleEventOrErr() ([]*Rule, error) {
	if e.loadedTypes[1] {
		return e.RuleEvent, nil
	}
	return nil, &NotLoadedError{edge: "ruleEvent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullString{}, // eventTypeName
		&sql.NullString{}, // specificProblem
		&sql.NullString{}, // additionalInfo
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Event) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // event_severity_eventseverityevent
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(values ...interface{}) error {
	if m, n := len(values), len(event.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		e.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		e.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		e.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field eventTypeName", values[3])
	} else if value.Valid {
		e.EventTypeName = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field specificProblem", values[4])
	} else if value.Valid {
		e.SpecificProblem = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field additionalInfo", values[5])
	} else if value.Valid {
		e.AdditionalInfo = value.String
	}
	values = values[6:]
	if len(values) == len(event.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_severity_eventseverityevent", value)
		} else if value.Valid {
			e.event_severity_eventseverityevent = new(int)
			*e.event_severity_eventseverityevent = int(value.Int64)
		}
	}
	return nil
}

// QueryEventseverity queries the eventseverity edge of the Event.
func (e *Event) QueryEventseverity() *EventSeverityQuery {
	return (&EventClient{config: e.config}).QueryEventseverity(e)
}

// QueryRuleEvent queries the ruleEvent edge of the Event.
func (e *Event) QueryRuleEvent() *RuleQuery {
	return (&EventClient{config: e.config}).QueryRuleEvent(e)
}

// Update returns a builder for updating this Event.
// Note that, you need to call Event.Unwrap() before calling this method, if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(e.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(e.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteString(", eventTypeName=")
	builder.WriteString(e.EventTypeName)
	builder.WriteString(", specificProblem=")
	builder.WriteString(e.SpecificProblem)
	builder.WriteString(", additionalInfo=")
	builder.WriteString(e.AdditionalInfo)
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
