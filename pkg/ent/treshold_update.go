// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/kpi"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/rule"
	"github.com/facebookincubator/symphony/pkg/ent/treshold"
)

// TresholdUpdate is the builder for updating Treshold entities.
type TresholdUpdate struct {
	config
	hooks    []Hook
	mutation *TresholdMutation
}

// Where adds a new predicate for the builder.
func (tu *TresholdUpdate) Where(ps ...predicate.Treshold) *TresholdUpdate {
	tu.mutation.predicates = append(tu.mutation.predicates, ps...)
	return tu
}

// SetName sets the name field.
func (tu *TresholdUpdate) SetName(s string) *TresholdUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetDescription sets the description field.
func (tu *TresholdUpdate) SetDescription(s string) *TresholdUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetStatus sets the status field.
func (tu *TresholdUpdate) SetStatus(b bool) *TresholdUpdate {
	tu.mutation.SetStatus(b)
	return tu
}

// SetKpiID sets the kpi edge to Kpi by id.
func (tu *TresholdUpdate) SetKpiID(id int) *TresholdUpdate {
	tu.mutation.SetKpiID(id)
	return tu
}

// SetNillableKpiID sets the kpi edge to Kpi by id if the given value is not nil.
func (tu *TresholdUpdate) SetNillableKpiID(id *int) *TresholdUpdate {
	if id != nil {
		tu = tu.SetKpiID(*id)
	}
	return tu
}

// SetKpi sets the kpi edge to Kpi.
func (tu *TresholdUpdate) SetKpi(k *Kpi) *TresholdUpdate {
	return tu.SetKpiID(k.ID)
}

// AddRuletresholdIDs adds the ruletreshold edge to Rule by ids.
func (tu *TresholdUpdate) AddRuletresholdIDs(ids ...int) *TresholdUpdate {
	tu.mutation.AddRuletresholdIDs(ids...)
	return tu
}

// AddRuletreshold adds the ruletreshold edges to Rule.
func (tu *TresholdUpdate) AddRuletreshold(r ...*Rule) *TresholdUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.AddRuletresholdIDs(ids...)
}

// Mutation returns the TresholdMutation object of the builder.
func (tu *TresholdUpdate) Mutation() *TresholdMutation {
	return tu.mutation
}

// ClearKpi clears the "kpi" edge to type Kpi.
func (tu *TresholdUpdate) ClearKpi() *TresholdUpdate {
	tu.mutation.ClearKpi()
	return tu
}

// ClearRuletreshold clears all "ruletreshold" edges to type Rule.
func (tu *TresholdUpdate) ClearRuletreshold() *TresholdUpdate {
	tu.mutation.ClearRuletreshold()
	return tu
}

// RemoveRuletresholdIDs removes the ruletreshold edge to Rule by ids.
func (tu *TresholdUpdate) RemoveRuletresholdIDs(ids ...int) *TresholdUpdate {
	tu.mutation.RemoveRuletresholdIDs(ids...)
	return tu
}

// RemoveRuletreshold removes ruletreshold edges to Rule.
func (tu *TresholdUpdate) RemoveRuletreshold(r ...*Rule) *TresholdUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.RemoveRuletresholdIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TresholdUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TresholdMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TresholdUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TresholdUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TresholdUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TresholdUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := treshold.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TresholdUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := treshold.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := treshold.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (tu *TresholdUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treshold.Table,
			Columns: treshold.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: treshold.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: treshold.FieldUpdateTime,
		})
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treshold.FieldName,
		})
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treshold.FieldDescription,
		})
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: treshold.FieldStatus,
		})
	}
	if tu.mutation.KpiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   treshold.KpiTable,
			Columns: []string{treshold.KpiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.KpiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   treshold.KpiTable,
			Columns: []string{treshold.KpiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.RuletresholdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treshold.RuletresholdTable,
			Columns: []string{treshold.RuletresholdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedRuletresholdIDs(); len(nodes) > 0 && !tu.mutation.RuletresholdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treshold.RuletresholdTable,
			Columns: []string{treshold.RuletresholdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RuletresholdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treshold.RuletresholdTable,
			Columns: []string{treshold.RuletresholdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treshold.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TresholdUpdateOne is the builder for updating a single Treshold entity.
type TresholdUpdateOne struct {
	config
	hooks    []Hook
	mutation *TresholdMutation
}

// SetName sets the name field.
func (tuo *TresholdUpdateOne) SetName(s string) *TresholdUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetDescription sets the description field.
func (tuo *TresholdUpdateOne) SetDescription(s string) *TresholdUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetStatus sets the status field.
func (tuo *TresholdUpdateOne) SetStatus(b bool) *TresholdUpdateOne {
	tuo.mutation.SetStatus(b)
	return tuo
}

// SetKpiID sets the kpi edge to Kpi by id.
func (tuo *TresholdUpdateOne) SetKpiID(id int) *TresholdUpdateOne {
	tuo.mutation.SetKpiID(id)
	return tuo
}

// SetNillableKpiID sets the kpi edge to Kpi by id if the given value is not nil.
func (tuo *TresholdUpdateOne) SetNillableKpiID(id *int) *TresholdUpdateOne {
	if id != nil {
		tuo = tuo.SetKpiID(*id)
	}
	return tuo
}

// SetKpi sets the kpi edge to Kpi.
func (tuo *TresholdUpdateOne) SetKpi(k *Kpi) *TresholdUpdateOne {
	return tuo.SetKpiID(k.ID)
}

// AddRuletresholdIDs adds the ruletreshold edge to Rule by ids.
func (tuo *TresholdUpdateOne) AddRuletresholdIDs(ids ...int) *TresholdUpdateOne {
	tuo.mutation.AddRuletresholdIDs(ids...)
	return tuo
}

// AddRuletreshold adds the ruletreshold edges to Rule.
func (tuo *TresholdUpdateOne) AddRuletreshold(r ...*Rule) *TresholdUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.AddRuletresholdIDs(ids...)
}

// Mutation returns the TresholdMutation object of the builder.
func (tuo *TresholdUpdateOne) Mutation() *TresholdMutation {
	return tuo.mutation
}

// ClearKpi clears the "kpi" edge to type Kpi.
func (tuo *TresholdUpdateOne) ClearKpi() *TresholdUpdateOne {
	tuo.mutation.ClearKpi()
	return tuo
}

// ClearRuletreshold clears all "ruletreshold" edges to type Rule.
func (tuo *TresholdUpdateOne) ClearRuletreshold() *TresholdUpdateOne {
	tuo.mutation.ClearRuletreshold()
	return tuo
}

// RemoveRuletresholdIDs removes the ruletreshold edge to Rule by ids.
func (tuo *TresholdUpdateOne) RemoveRuletresholdIDs(ids ...int) *TresholdUpdateOne {
	tuo.mutation.RemoveRuletresholdIDs(ids...)
	return tuo
}

// RemoveRuletreshold removes ruletreshold edges to Rule.
func (tuo *TresholdUpdateOne) RemoveRuletreshold(r ...*Rule) *TresholdUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.RemoveRuletresholdIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tuo *TresholdUpdateOne) Save(ctx context.Context) (*Treshold, error) {
	var (
		err  error
		node *Treshold
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TresholdMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TresholdUpdateOne) SaveX(ctx context.Context) *Treshold {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TresholdUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TresholdUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TresholdUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := treshold.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TresholdUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := treshold.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := treshold.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (tuo *TresholdUpdateOne) sqlSave(ctx context.Context) (_node *Treshold, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treshold.Table,
			Columns: treshold.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: treshold.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Treshold.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: treshold.FieldUpdateTime,
		})
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treshold.FieldName,
		})
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treshold.FieldDescription,
		})
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: treshold.FieldStatus,
		})
	}
	if tuo.mutation.KpiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   treshold.KpiTable,
			Columns: []string{treshold.KpiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.KpiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   treshold.KpiTable,
			Columns: []string{treshold.KpiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.RuletresholdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treshold.RuletresholdTable,
			Columns: []string{treshold.RuletresholdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedRuletresholdIDs(); len(nodes) > 0 && !tuo.mutation.RuletresholdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treshold.RuletresholdTable,
			Columns: []string{treshold.RuletresholdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RuletresholdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   treshold.RuletresholdTable,
			Columns: []string{treshold.RuletresholdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Treshold{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treshold.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
