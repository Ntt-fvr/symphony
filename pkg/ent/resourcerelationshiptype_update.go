// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/permissionspolicy"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationship"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationshiptype"
)

// ResourceRelationshipTypeUpdate is the builder for updating ResourceRelationshipType entities.
type ResourceRelationshipTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceRelationshipTypeMutation
}

// Where adds a new predicate for the builder.
func (rrtu *ResourceRelationshipTypeUpdate) Where(ps ...predicate.ResourceRelationshipType) *ResourceRelationshipTypeUpdate {
	rrtu.mutation.predicates = append(rrtu.mutation.predicates, ps...)
	return rrtu
}

// SetName sets the name field.
func (rrtu *ResourceRelationshipTypeUpdate) SetName(s string) *ResourceRelationshipTypeUpdate {
	rrtu.mutation.SetName(s)
	return rrtu
}

// AddResourceRelationshipFkIDs adds the resource_relationship_fk edge to ResourceRelationship by ids.
func (rrtu *ResourceRelationshipTypeUpdate) AddResourceRelationshipFkIDs(ids ...int) *ResourceRelationshipTypeUpdate {
	rrtu.mutation.AddResourceRelationshipFkIDs(ids...)
	return rrtu
}

// AddResourceRelationshipFk adds the resource_relationship_fk edges to ResourceRelationship.
func (rrtu *ResourceRelationshipTypeUpdate) AddResourceRelationshipFk(r ...*ResourceRelationship) *ResourceRelationshipTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrtu.AddResourceRelationshipFkIDs(ids...)
}

// AddPolicyIDs adds the policies edge to PermissionsPolicy by ids.
func (rrtu *ResourceRelationshipTypeUpdate) AddPolicyIDs(ids ...int) *ResourceRelationshipTypeUpdate {
	rrtu.mutation.AddPolicyIDs(ids...)
	return rrtu
}

// AddPolicies adds the policies edges to PermissionsPolicy.
func (rrtu *ResourceRelationshipTypeUpdate) AddPolicies(p ...*PermissionsPolicy) *ResourceRelationshipTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rrtu.AddPolicyIDs(ids...)
}

// Mutation returns the ResourceRelationshipTypeMutation object of the builder.
func (rrtu *ResourceRelationshipTypeUpdate) Mutation() *ResourceRelationshipTypeMutation {
	return rrtu.mutation
}

// ClearResourceRelationshipFk clears all "resource_relationship_fk" edges to type ResourceRelationship.
func (rrtu *ResourceRelationshipTypeUpdate) ClearResourceRelationshipFk() *ResourceRelationshipTypeUpdate {
	rrtu.mutation.ClearResourceRelationshipFk()
	return rrtu
}

// RemoveResourceRelationshipFkIDs removes the resource_relationship_fk edge to ResourceRelationship by ids.
func (rrtu *ResourceRelationshipTypeUpdate) RemoveResourceRelationshipFkIDs(ids ...int) *ResourceRelationshipTypeUpdate {
	rrtu.mutation.RemoveResourceRelationshipFkIDs(ids...)
	return rrtu
}

// RemoveResourceRelationshipFk removes resource_relationship_fk edges to ResourceRelationship.
func (rrtu *ResourceRelationshipTypeUpdate) RemoveResourceRelationshipFk(r ...*ResourceRelationship) *ResourceRelationshipTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrtu.RemoveResourceRelationshipFkIDs(ids...)
}

// ClearPolicies clears all "policies" edges to type PermissionsPolicy.
func (rrtu *ResourceRelationshipTypeUpdate) ClearPolicies() *ResourceRelationshipTypeUpdate {
	rrtu.mutation.ClearPolicies()
	return rrtu
}

// RemovePolicyIDs removes the policies edge to PermissionsPolicy by ids.
func (rrtu *ResourceRelationshipTypeUpdate) RemovePolicyIDs(ids ...int) *ResourceRelationshipTypeUpdate {
	rrtu.mutation.RemovePolicyIDs(ids...)
	return rrtu
}

// RemovePolicies removes policies edges to PermissionsPolicy.
func (rrtu *ResourceRelationshipTypeUpdate) RemovePolicies(p ...*PermissionsPolicy) *ResourceRelationshipTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rrtu.RemovePolicyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rrtu *ResourceRelationshipTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rrtu.defaults()
	if len(rrtu.hooks) == 0 {
		if err = rrtu.check(); err != nil {
			return 0, err
		}
		affected, err = rrtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceRelationshipTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rrtu.check(); err != nil {
				return 0, err
			}
			rrtu.mutation = mutation
			affected, err = rrtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rrtu.hooks) - 1; i >= 0; i-- {
			mut = rrtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rrtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rrtu *ResourceRelationshipTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := rrtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rrtu *ResourceRelationshipTypeUpdate) Exec(ctx context.Context) error {
	_, err := rrtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrtu *ResourceRelationshipTypeUpdate) ExecX(ctx context.Context) {
	if err := rrtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrtu *ResourceRelationshipTypeUpdate) defaults() {
	if _, ok := rrtu.mutation.UpdateTime(); !ok {
		v := resourcerelationshiptype.UpdateDefaultUpdateTime()
		rrtu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrtu *ResourceRelationshipTypeUpdate) check() error {
	if v, ok := rrtu.mutation.Name(); ok {
		if err := resourcerelationshiptype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rrtu *ResourceRelationshipTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcerelationshiptype.Table,
			Columns: resourcerelationshiptype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcerelationshiptype.FieldID,
			},
		},
	}
	if ps := rrtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rrtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcerelationshiptype.FieldUpdateTime,
		})
	}
	if value, ok := rrtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcerelationshiptype.FieldName,
		})
	}
	if rrtu.mutation.ResourceRelationshipFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshiptype.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrtu.mutation.RemovedResourceRelationshipFkIDs(); len(nodes) > 0 && !rrtu.mutation.ResourceRelationshipFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshiptype.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrtu.mutation.ResourceRelationshipFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshiptype.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rrtu.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.PoliciesTable,
			Columns: []string{resourcerelationshiptype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrtu.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !rrtu.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.PoliciesTable,
			Columns: []string{resourcerelationshiptype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrtu.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.PoliciesTable,
			Columns: []string{resourcerelationshiptype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rrtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcerelationshiptype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceRelationshipTypeUpdateOne is the builder for updating a single ResourceRelationshipType entity.
type ResourceRelationshipTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceRelationshipTypeMutation
}

// SetName sets the name field.
func (rrtuo *ResourceRelationshipTypeUpdateOne) SetName(s string) *ResourceRelationshipTypeUpdateOne {
	rrtuo.mutation.SetName(s)
	return rrtuo
}

// AddResourceRelationshipFkIDs adds the resource_relationship_fk edge to ResourceRelationship by ids.
func (rrtuo *ResourceRelationshipTypeUpdateOne) AddResourceRelationshipFkIDs(ids ...int) *ResourceRelationshipTypeUpdateOne {
	rrtuo.mutation.AddResourceRelationshipFkIDs(ids...)
	return rrtuo
}

// AddResourceRelationshipFk adds the resource_relationship_fk edges to ResourceRelationship.
func (rrtuo *ResourceRelationshipTypeUpdateOne) AddResourceRelationshipFk(r ...*ResourceRelationship) *ResourceRelationshipTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrtuo.AddResourceRelationshipFkIDs(ids...)
}

// AddPolicyIDs adds the policies edge to PermissionsPolicy by ids.
func (rrtuo *ResourceRelationshipTypeUpdateOne) AddPolicyIDs(ids ...int) *ResourceRelationshipTypeUpdateOne {
	rrtuo.mutation.AddPolicyIDs(ids...)
	return rrtuo
}

// AddPolicies adds the policies edges to PermissionsPolicy.
func (rrtuo *ResourceRelationshipTypeUpdateOne) AddPolicies(p ...*PermissionsPolicy) *ResourceRelationshipTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rrtuo.AddPolicyIDs(ids...)
}

// Mutation returns the ResourceRelationshipTypeMutation object of the builder.
func (rrtuo *ResourceRelationshipTypeUpdateOne) Mutation() *ResourceRelationshipTypeMutation {
	return rrtuo.mutation
}

// ClearResourceRelationshipFk clears all "resource_relationship_fk" edges to type ResourceRelationship.
func (rrtuo *ResourceRelationshipTypeUpdateOne) ClearResourceRelationshipFk() *ResourceRelationshipTypeUpdateOne {
	rrtuo.mutation.ClearResourceRelationshipFk()
	return rrtuo
}

// RemoveResourceRelationshipFkIDs removes the resource_relationship_fk edge to ResourceRelationship by ids.
func (rrtuo *ResourceRelationshipTypeUpdateOne) RemoveResourceRelationshipFkIDs(ids ...int) *ResourceRelationshipTypeUpdateOne {
	rrtuo.mutation.RemoveResourceRelationshipFkIDs(ids...)
	return rrtuo
}

// RemoveResourceRelationshipFk removes resource_relationship_fk edges to ResourceRelationship.
func (rrtuo *ResourceRelationshipTypeUpdateOne) RemoveResourceRelationshipFk(r ...*ResourceRelationship) *ResourceRelationshipTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrtuo.RemoveResourceRelationshipFkIDs(ids...)
}

// ClearPolicies clears all "policies" edges to type PermissionsPolicy.
func (rrtuo *ResourceRelationshipTypeUpdateOne) ClearPolicies() *ResourceRelationshipTypeUpdateOne {
	rrtuo.mutation.ClearPolicies()
	return rrtuo
}

// RemovePolicyIDs removes the policies edge to PermissionsPolicy by ids.
func (rrtuo *ResourceRelationshipTypeUpdateOne) RemovePolicyIDs(ids ...int) *ResourceRelationshipTypeUpdateOne {
	rrtuo.mutation.RemovePolicyIDs(ids...)
	return rrtuo
}

// RemovePolicies removes policies edges to PermissionsPolicy.
func (rrtuo *ResourceRelationshipTypeUpdateOne) RemovePolicies(p ...*PermissionsPolicy) *ResourceRelationshipTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rrtuo.RemovePolicyIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (rrtuo *ResourceRelationshipTypeUpdateOne) Save(ctx context.Context) (*ResourceRelationshipType, error) {
	var (
		err  error
		node *ResourceRelationshipType
	)
	rrtuo.defaults()
	if len(rrtuo.hooks) == 0 {
		if err = rrtuo.check(); err != nil {
			return nil, err
		}
		node, err = rrtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceRelationshipTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rrtuo.check(); err != nil {
				return nil, err
			}
			rrtuo.mutation = mutation
			node, err = rrtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rrtuo.hooks) - 1; i >= 0; i-- {
			mut = rrtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rrtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rrtuo *ResourceRelationshipTypeUpdateOne) SaveX(ctx context.Context) *ResourceRelationshipType {
	node, err := rrtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rrtuo *ResourceRelationshipTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := rrtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrtuo *ResourceRelationshipTypeUpdateOne) ExecX(ctx context.Context) {
	if err := rrtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrtuo *ResourceRelationshipTypeUpdateOne) defaults() {
	if _, ok := rrtuo.mutation.UpdateTime(); !ok {
		v := resourcerelationshiptype.UpdateDefaultUpdateTime()
		rrtuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrtuo *ResourceRelationshipTypeUpdateOne) check() error {
	if v, ok := rrtuo.mutation.Name(); ok {
		if err := resourcerelationshiptype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rrtuo *ResourceRelationshipTypeUpdateOne) sqlSave(ctx context.Context) (_node *ResourceRelationshipType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcerelationshiptype.Table,
			Columns: resourcerelationshiptype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcerelationshiptype.FieldID,
			},
		},
	}
	id, ok := rrtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceRelationshipType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rrtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcerelationshiptype.FieldUpdateTime,
		})
	}
	if value, ok := rrtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcerelationshiptype.FieldName,
		})
	}
	if rrtuo.mutation.ResourceRelationshipFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshiptype.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrtuo.mutation.RemovedResourceRelationshipFkIDs(); len(nodes) > 0 && !rrtuo.mutation.ResourceRelationshipFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshiptype.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrtuo.mutation.ResourceRelationshipFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.ResourceRelationshipFkTable,
			Columns: []string{resourcerelationshiptype.ResourceRelationshipFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rrtuo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.PoliciesTable,
			Columns: []string{resourcerelationshiptype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrtuo.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !rrtuo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.PoliciesTable,
			Columns: []string{resourcerelationshiptype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rrtuo.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcerelationshiptype.PoliciesTable,
			Columns: []string{resourcerelationshiptype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceRelationshipType{config: rrtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rrtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcerelationshiptype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
