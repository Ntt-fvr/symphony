// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetyperelationship"
)

// ResourceTypeRelationshipCreate is the builder for creating a ResourceTypeRelationship entity.
type ResourceTypeRelationshipCreate struct {
	config
	mutation *ResourceTypeRelationshipMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (rtrc *ResourceTypeRelationshipCreate) SetCreateTime(t time.Time) *ResourceTypeRelationshipCreate {
	rtrc.mutation.SetCreateTime(t)
	return rtrc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (rtrc *ResourceTypeRelationshipCreate) SetNillableCreateTime(t *time.Time) *ResourceTypeRelationshipCreate {
	if t != nil {
		rtrc.SetCreateTime(*t)
	}
	return rtrc
}

// SetUpdateTime sets the update_time field.
func (rtrc *ResourceTypeRelationshipCreate) SetUpdateTime(t time.Time) *ResourceTypeRelationshipCreate {
	rtrc.mutation.SetUpdateTime(t)
	return rtrc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (rtrc *ResourceTypeRelationshipCreate) SetNillableUpdateTime(t *time.Time) *ResourceTypeRelationshipCreate {
	if t != nil {
		rtrc.SetUpdateTime(*t)
	}
	return rtrc
}

// SetResourceRelationshipType sets the ResourceRelationshipType field.
func (rtrc *ResourceTypeRelationshipCreate) SetResourceRelationshipType(rrt resourcetyperelationship.ResourceRelationshipType) *ResourceTypeRelationshipCreate {
	rtrc.mutation.SetResourceRelationshipType(rrt)
	return rtrc
}

// SetResourceRelationshipMultiplicity sets the ResourceRelationshipMultiplicity field.
func (rtrc *ResourceTypeRelationshipCreate) SetResourceRelationshipMultiplicity(rrm resourcetyperelationship.ResourceRelationshipMultiplicity) *ResourceTypeRelationshipCreate {
	rtrc.mutation.SetResourceRelationshipMultiplicity(rrm)
	return rtrc
}

// SetResourcetypeaID sets the resourcetypea edge to ResourceType by id.
func (rtrc *ResourceTypeRelationshipCreate) SetResourcetypeaID(id int) *ResourceTypeRelationshipCreate {
	rtrc.mutation.SetResourcetypeaID(id)
	return rtrc
}

// SetNillableResourcetypeaID sets the resourcetypea edge to ResourceType by id if the given value is not nil.
func (rtrc *ResourceTypeRelationshipCreate) SetNillableResourcetypeaID(id *int) *ResourceTypeRelationshipCreate {
	if id != nil {
		rtrc = rtrc.SetResourcetypeaID(*id)
	}
	return rtrc
}

// SetResourcetypea sets the resourcetypea edge to ResourceType.
func (rtrc *ResourceTypeRelationshipCreate) SetResourcetypea(r *ResourceType) *ResourceTypeRelationshipCreate {
	return rtrc.SetResourcetypeaID(r.ID)
}

// SetResourcetypebID sets the resourcetypeb edge to ResourceType by id.
func (rtrc *ResourceTypeRelationshipCreate) SetResourcetypebID(id int) *ResourceTypeRelationshipCreate {
	rtrc.mutation.SetResourcetypebID(id)
	return rtrc
}

// SetNillableResourcetypebID sets the resourcetypeb edge to ResourceType by id if the given value is not nil.
func (rtrc *ResourceTypeRelationshipCreate) SetNillableResourcetypebID(id *int) *ResourceTypeRelationshipCreate {
	if id != nil {
		rtrc = rtrc.SetResourcetypebID(*id)
	}
	return rtrc
}

// SetResourcetypeb sets the resourcetypeb edge to ResourceType.
func (rtrc *ResourceTypeRelationshipCreate) SetResourcetypeb(r *ResourceType) *ResourceTypeRelationshipCreate {
	return rtrc.SetResourcetypebID(r.ID)
}

// SetLocationTypeID sets the locationType edge to LocationType by id.
func (rtrc *ResourceTypeRelationshipCreate) SetLocationTypeID(id int) *ResourceTypeRelationshipCreate {
	rtrc.mutation.SetLocationTypeID(id)
	return rtrc
}

// SetNillableLocationTypeID sets the locationType edge to LocationType by id if the given value is not nil.
func (rtrc *ResourceTypeRelationshipCreate) SetNillableLocationTypeID(id *int) *ResourceTypeRelationshipCreate {
	if id != nil {
		rtrc = rtrc.SetLocationTypeID(*id)
	}
	return rtrc
}

// SetLocationType sets the locationType edge to LocationType.
func (rtrc *ResourceTypeRelationshipCreate) SetLocationType(l *LocationType) *ResourceTypeRelationshipCreate {
	return rtrc.SetLocationTypeID(l.ID)
}

// Mutation returns the ResourceTypeRelationshipMutation object of the builder.
func (rtrc *ResourceTypeRelationshipCreate) Mutation() *ResourceTypeRelationshipMutation {
	return rtrc.mutation
}

// Save creates the ResourceTypeRelationship in the database.
func (rtrc *ResourceTypeRelationshipCreate) Save(ctx context.Context) (*ResourceTypeRelationship, error) {
	var (
		err  error
		node *ResourceTypeRelationship
	)
	rtrc.defaults()
	if len(rtrc.hooks) == 0 {
		if err = rtrc.check(); err != nil {
			return nil, err
		}
		node, err = rtrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceTypeRelationshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtrc.check(); err != nil {
				return nil, err
			}
			rtrc.mutation = mutation
			node, err = rtrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rtrc.hooks) - 1; i >= 0; i-- {
			mut = rtrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rtrc *ResourceTypeRelationshipCreate) SaveX(ctx context.Context) *ResourceTypeRelationship {
	v, err := rtrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rtrc *ResourceTypeRelationshipCreate) defaults() {
	if _, ok := rtrc.mutation.CreateTime(); !ok {
		v := resourcetyperelationship.DefaultCreateTime()
		rtrc.mutation.SetCreateTime(v)
	}
	if _, ok := rtrc.mutation.UpdateTime(); !ok {
		v := resourcetyperelationship.DefaultUpdateTime()
		rtrc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtrc *ResourceTypeRelationshipCreate) check() error {
	if _, ok := rtrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := rtrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := rtrc.mutation.ResourceRelationshipType(); !ok {
		return &ValidationError{Name: "ResourceRelationshipType", err: errors.New("ent: missing required field \"ResourceRelationshipType\"")}
	}
	if v, ok := rtrc.mutation.ResourceRelationshipType(); ok {
		if err := resourcetyperelationship.ResourceRelationshipTypeValidator(v); err != nil {
			return &ValidationError{Name: "ResourceRelationshipType", err: fmt.Errorf("ent: validator failed for field \"ResourceRelationshipType\": %w", err)}
		}
	}
	if _, ok := rtrc.mutation.ResourceRelationshipMultiplicity(); !ok {
		return &ValidationError{Name: "ResourceRelationshipMultiplicity", err: errors.New("ent: missing required field \"ResourceRelationshipMultiplicity\"")}
	}
	if v, ok := rtrc.mutation.ResourceRelationshipMultiplicity(); ok {
		if err := resourcetyperelationship.ResourceRelationshipMultiplicityValidator(v); err != nil {
			return &ValidationError{Name: "ResourceRelationshipMultiplicity", err: fmt.Errorf("ent: validator failed for field \"ResourceRelationshipMultiplicity\": %w", err)}
		}
	}
	return nil
}

func (rtrc *ResourceTypeRelationshipCreate) sqlSave(ctx context.Context) (*ResourceTypeRelationship, error) {
	_node, _spec := rtrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rtrc *ResourceTypeRelationshipCreate) createSpec() (*ResourceTypeRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceTypeRelationship{config: rtrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: resourcetyperelationship.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetyperelationship.FieldID,
			},
		}
	)
	if value, ok := rtrc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcetyperelationship.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := rtrc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcetyperelationship.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := rtrc.mutation.ResourceRelationshipType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcetyperelationship.FieldResourceRelationshipType,
		})
		_node.ResourceRelationshipType = value
	}
	if value, ok := rtrc.mutation.ResourceRelationshipMultiplicity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcetyperelationship.FieldResourceRelationshipMultiplicity,
		})
		_node.ResourceRelationshipMultiplicity = value
	}
	if nodes := rtrc.mutation.ResourcetypeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.ResourcetypeaTable,
			Columns: []string{resourcetyperelationship.ResourcetypeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtrc.mutation.ResourcetypebIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.ResourcetypebTable,
			Columns: []string{resourcetyperelationship.ResourcetypebColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtrc.mutation.LocationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcetyperelationship.LocationTypeTable,
			Columns: []string{resourcetyperelationship.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ResourceTypeRelationshipCreateBulk is the builder for creating a bulk of ResourceTypeRelationship entities.
type ResourceTypeRelationshipCreateBulk struct {
	config
	builders []*ResourceTypeRelationshipCreate
}

// Save creates the ResourceTypeRelationship entities in the database.
func (rtrcb *ResourceTypeRelationshipCreateBulk) Save(ctx context.Context) ([]*ResourceTypeRelationship, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtrcb.builders))
	nodes := make([]*ResourceTypeRelationship, len(rtrcb.builders))
	mutators := make([]Mutator, len(rtrcb.builders))
	for i := range rtrcb.builders {
		func(i int, root context.Context) {
			builder := rtrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceTypeRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rtrcb *ResourceTypeRelationshipCreateBulk) SaveX(ctx context.Context) []*ResourceTypeRelationship {
	v, err := rtrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
