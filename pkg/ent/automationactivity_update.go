// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/automationactivity"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/user"
)

// AutomationActivityUpdate is the builder for updating AutomationActivity entities.
type AutomationActivityUpdate struct {
	config
	hooks    []Hook
	mutation *AutomationActivityMutation
}

// Where adds a new predicate for the builder.
func (aau *AutomationActivityUpdate) Where(ps ...predicate.AutomationActivity) *AutomationActivityUpdate {
	aau.mutation.predicates = append(aau.mutation.predicates, ps...)
	return aau
}

// SetActivityType sets the activity_type field.
func (aau *AutomationActivityUpdate) SetActivityType(at automationactivity.ActivityType) *AutomationActivityUpdate {
	aau.mutation.SetActivityType(at)
	return aau
}

// SetAutomationEntityType sets the automation_entity_type field.
func (aau *AutomationActivityUpdate) SetAutomationEntityType(aet automationactivity.AutomationEntityType) *AutomationActivityUpdate {
	aau.mutation.SetAutomationEntityType(aet)
	return aau
}

// SetOldValue sets the old_value field.
func (aau *AutomationActivityUpdate) SetOldValue(s string) *AutomationActivityUpdate {
	aau.mutation.SetOldValue(s)
	return aau
}

// SetNillableOldValue sets the old_value field if the given value is not nil.
func (aau *AutomationActivityUpdate) SetNillableOldValue(s *string) *AutomationActivityUpdate {
	if s != nil {
		aau.SetOldValue(*s)
	}
	return aau
}

// ClearOldValue clears the value of old_value.
func (aau *AutomationActivityUpdate) ClearOldValue() *AutomationActivityUpdate {
	aau.mutation.ClearOldValue()
	return aau
}

// SetNewValue sets the new_value field.
func (aau *AutomationActivityUpdate) SetNewValue(s string) *AutomationActivityUpdate {
	aau.mutation.SetNewValue(s)
	return aau
}

// SetNillableNewValue sets the new_value field if the given value is not nil.
func (aau *AutomationActivityUpdate) SetNillableNewValue(s *string) *AutomationActivityUpdate {
	if s != nil {
		aau.SetNewValue(*s)
	}
	return aau
}

// ClearNewValue clears the value of new_value.
func (aau *AutomationActivityUpdate) ClearNewValue() *AutomationActivityUpdate {
	aau.mutation.ClearNewValue()
	return aau
}

// SetAuthorID sets the author edge to User by id.
func (aau *AutomationActivityUpdate) SetAuthorID(id int) *AutomationActivityUpdate {
	aau.mutation.SetAuthorID(id)
	return aau
}

// SetNillableAuthorID sets the author edge to User by id if the given value is not nil.
func (aau *AutomationActivityUpdate) SetNillableAuthorID(id *int) *AutomationActivityUpdate {
	if id != nil {
		aau = aau.SetAuthorID(*id)
	}
	return aau
}

// SetAuthor sets the author edge to User.
func (aau *AutomationActivityUpdate) SetAuthor(u *User) *AutomationActivityUpdate {
	return aau.SetAuthorID(u.ID)
}

// SetFlowInstanceID sets the flow_instance edge to FlowInstance by id.
func (aau *AutomationActivityUpdate) SetFlowInstanceID(id int) *AutomationActivityUpdate {
	aau.mutation.SetFlowInstanceID(id)
	return aau
}

// SetNillableFlowInstanceID sets the flow_instance edge to FlowInstance by id if the given value is not nil.
func (aau *AutomationActivityUpdate) SetNillableFlowInstanceID(id *int) *AutomationActivityUpdate {
	if id != nil {
		aau = aau.SetFlowInstanceID(*id)
	}
	return aau
}

// SetFlowInstance sets the flow_instance edge to FlowInstance.
func (aau *AutomationActivityUpdate) SetFlowInstance(f *FlowInstance) *AutomationActivityUpdate {
	return aau.SetFlowInstanceID(f.ID)
}

// SetBlockInstanceID sets the block_instance edge to BlockInstance by id.
func (aau *AutomationActivityUpdate) SetBlockInstanceID(id int) *AutomationActivityUpdate {
	aau.mutation.SetBlockInstanceID(id)
	return aau
}

// SetNillableBlockInstanceID sets the block_instance edge to BlockInstance by id if the given value is not nil.
func (aau *AutomationActivityUpdate) SetNillableBlockInstanceID(id *int) *AutomationActivityUpdate {
	if id != nil {
		aau = aau.SetBlockInstanceID(*id)
	}
	return aau
}

// SetBlockInstance sets the block_instance edge to BlockInstance.
func (aau *AutomationActivityUpdate) SetBlockInstance(b *BlockInstance) *AutomationActivityUpdate {
	return aau.SetBlockInstanceID(b.ID)
}

// Mutation returns the AutomationActivityMutation object of the builder.
func (aau *AutomationActivityUpdate) Mutation() *AutomationActivityMutation {
	return aau.mutation
}

// ClearAuthor clears the "author" edge to type User.
func (aau *AutomationActivityUpdate) ClearAuthor() *AutomationActivityUpdate {
	aau.mutation.ClearAuthor()
	return aau
}

// ClearFlowInstance clears the "flow_instance" edge to type FlowInstance.
func (aau *AutomationActivityUpdate) ClearFlowInstance() *AutomationActivityUpdate {
	aau.mutation.ClearFlowInstance()
	return aau
}

// ClearBlockInstance clears the "block_instance" edge to type BlockInstance.
func (aau *AutomationActivityUpdate) ClearBlockInstance() *AutomationActivityUpdate {
	aau.mutation.ClearBlockInstance()
	return aau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *AutomationActivityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aau.defaults()
	if len(aau.hooks) == 0 {
		if err = aau.check(); err != nil {
			return 0, err
		}
		affected, err = aau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AutomationActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aau.check(); err != nil {
				return 0, err
			}
			aau.mutation = mutation
			affected, err = aau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aau.hooks) - 1; i >= 0; i-- {
			mut = aau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aau *AutomationActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *AutomationActivityUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *AutomationActivityUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aau *AutomationActivityUpdate) defaults() {
	if _, ok := aau.mutation.UpdateTime(); !ok {
		v := automationactivity.UpdateDefaultUpdateTime()
		aau.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aau *AutomationActivityUpdate) check() error {
	if v, ok := aau.mutation.ActivityType(); ok {
		if err := automationactivity.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf("ent: validator failed for field \"activity_type\": %w", err)}
		}
	}
	if v, ok := aau.mutation.AutomationEntityType(); ok {
		if err := automationactivity.AutomationEntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "automation_entity_type", err: fmt.Errorf("ent: validator failed for field \"automation_entity_type\": %w", err)}
		}
	}
	return nil
}

func (aau *AutomationActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   automationactivity.Table,
			Columns: automationactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: automationactivity.FieldID,
			},
		},
	}
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: automationactivity.FieldUpdateTime,
		})
	}
	if value, ok := aau.mutation.ActivityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: automationactivity.FieldActivityType,
		})
	}
	if value, ok := aau.mutation.AutomationEntityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: automationactivity.FieldAutomationEntityType,
		})
	}
	if value, ok := aau.mutation.OldValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: automationactivity.FieldOldValue,
		})
	}
	if aau.mutation.OldValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: automationactivity.FieldOldValue,
		})
	}
	if value, ok := aau.mutation.NewValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: automationactivity.FieldNewValue,
		})
	}
	if aau.mutation.NewValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: automationactivity.FieldNewValue,
		})
	}
	if aau.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   automationactivity.AuthorTable,
			Columns: []string{automationactivity.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   automationactivity.AuthorTable,
			Columns: []string{automationactivity.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aau.mutation.FlowInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   automationactivity.FlowInstanceTable,
			Columns: []string{automationactivity.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.FlowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   automationactivity.FlowInstanceTable,
			Columns: []string{automationactivity.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aau.mutation.BlockInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   automationactivity.BlockInstanceTable,
			Columns: []string{automationactivity.BlockInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.BlockInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   automationactivity.BlockInstanceTable,
			Columns: []string{automationactivity.BlockInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{automationactivity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AutomationActivityUpdateOne is the builder for updating a single AutomationActivity entity.
type AutomationActivityUpdateOne struct {
	config
	hooks    []Hook
	mutation *AutomationActivityMutation
}

// SetActivityType sets the activity_type field.
func (aauo *AutomationActivityUpdateOne) SetActivityType(at automationactivity.ActivityType) *AutomationActivityUpdateOne {
	aauo.mutation.SetActivityType(at)
	return aauo
}

// SetAutomationEntityType sets the automation_entity_type field.
func (aauo *AutomationActivityUpdateOne) SetAutomationEntityType(aet automationactivity.AutomationEntityType) *AutomationActivityUpdateOne {
	aauo.mutation.SetAutomationEntityType(aet)
	return aauo
}

// SetOldValue sets the old_value field.
func (aauo *AutomationActivityUpdateOne) SetOldValue(s string) *AutomationActivityUpdateOne {
	aauo.mutation.SetOldValue(s)
	return aauo
}

// SetNillableOldValue sets the old_value field if the given value is not nil.
func (aauo *AutomationActivityUpdateOne) SetNillableOldValue(s *string) *AutomationActivityUpdateOne {
	if s != nil {
		aauo.SetOldValue(*s)
	}
	return aauo
}

// ClearOldValue clears the value of old_value.
func (aauo *AutomationActivityUpdateOne) ClearOldValue() *AutomationActivityUpdateOne {
	aauo.mutation.ClearOldValue()
	return aauo
}

// SetNewValue sets the new_value field.
func (aauo *AutomationActivityUpdateOne) SetNewValue(s string) *AutomationActivityUpdateOne {
	aauo.mutation.SetNewValue(s)
	return aauo
}

// SetNillableNewValue sets the new_value field if the given value is not nil.
func (aauo *AutomationActivityUpdateOne) SetNillableNewValue(s *string) *AutomationActivityUpdateOne {
	if s != nil {
		aauo.SetNewValue(*s)
	}
	return aauo
}

// ClearNewValue clears the value of new_value.
func (aauo *AutomationActivityUpdateOne) ClearNewValue() *AutomationActivityUpdateOne {
	aauo.mutation.ClearNewValue()
	return aauo
}

// SetAuthorID sets the author edge to User by id.
func (aauo *AutomationActivityUpdateOne) SetAuthorID(id int) *AutomationActivityUpdateOne {
	aauo.mutation.SetAuthorID(id)
	return aauo
}

// SetNillableAuthorID sets the author edge to User by id if the given value is not nil.
func (aauo *AutomationActivityUpdateOne) SetNillableAuthorID(id *int) *AutomationActivityUpdateOne {
	if id != nil {
		aauo = aauo.SetAuthorID(*id)
	}
	return aauo
}

// SetAuthor sets the author edge to User.
func (aauo *AutomationActivityUpdateOne) SetAuthor(u *User) *AutomationActivityUpdateOne {
	return aauo.SetAuthorID(u.ID)
}

// SetFlowInstanceID sets the flow_instance edge to FlowInstance by id.
func (aauo *AutomationActivityUpdateOne) SetFlowInstanceID(id int) *AutomationActivityUpdateOne {
	aauo.mutation.SetFlowInstanceID(id)
	return aauo
}

// SetNillableFlowInstanceID sets the flow_instance edge to FlowInstance by id if the given value is not nil.
func (aauo *AutomationActivityUpdateOne) SetNillableFlowInstanceID(id *int) *AutomationActivityUpdateOne {
	if id != nil {
		aauo = aauo.SetFlowInstanceID(*id)
	}
	return aauo
}

// SetFlowInstance sets the flow_instance edge to FlowInstance.
func (aauo *AutomationActivityUpdateOne) SetFlowInstance(f *FlowInstance) *AutomationActivityUpdateOne {
	return aauo.SetFlowInstanceID(f.ID)
}

// SetBlockInstanceID sets the block_instance edge to BlockInstance by id.
func (aauo *AutomationActivityUpdateOne) SetBlockInstanceID(id int) *AutomationActivityUpdateOne {
	aauo.mutation.SetBlockInstanceID(id)
	return aauo
}

// SetNillableBlockInstanceID sets the block_instance edge to BlockInstance by id if the given value is not nil.
func (aauo *AutomationActivityUpdateOne) SetNillableBlockInstanceID(id *int) *AutomationActivityUpdateOne {
	if id != nil {
		aauo = aauo.SetBlockInstanceID(*id)
	}
	return aauo
}

// SetBlockInstance sets the block_instance edge to BlockInstance.
func (aauo *AutomationActivityUpdateOne) SetBlockInstance(b *BlockInstance) *AutomationActivityUpdateOne {
	return aauo.SetBlockInstanceID(b.ID)
}

// Mutation returns the AutomationActivityMutation object of the builder.
func (aauo *AutomationActivityUpdateOne) Mutation() *AutomationActivityMutation {
	return aauo.mutation
}

// ClearAuthor clears the "author" edge to type User.
func (aauo *AutomationActivityUpdateOne) ClearAuthor() *AutomationActivityUpdateOne {
	aauo.mutation.ClearAuthor()
	return aauo
}

// ClearFlowInstance clears the "flow_instance" edge to type FlowInstance.
func (aauo *AutomationActivityUpdateOne) ClearFlowInstance() *AutomationActivityUpdateOne {
	aauo.mutation.ClearFlowInstance()
	return aauo
}

// ClearBlockInstance clears the "block_instance" edge to type BlockInstance.
func (aauo *AutomationActivityUpdateOne) ClearBlockInstance() *AutomationActivityUpdateOne {
	aauo.mutation.ClearBlockInstance()
	return aauo
}

// Save executes the query and returns the updated entity.
func (aauo *AutomationActivityUpdateOne) Save(ctx context.Context) (*AutomationActivity, error) {
	var (
		err  error
		node *AutomationActivity
	)
	aauo.defaults()
	if len(aauo.hooks) == 0 {
		if err = aauo.check(); err != nil {
			return nil, err
		}
		node, err = aauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AutomationActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aauo.check(); err != nil {
				return nil, err
			}
			aauo.mutation = mutation
			node, err = aauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aauo.hooks) - 1; i >= 0; i-- {
			mut = aauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *AutomationActivityUpdateOne) SaveX(ctx context.Context) *AutomationActivity {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *AutomationActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *AutomationActivityUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aauo *AutomationActivityUpdateOne) defaults() {
	if _, ok := aauo.mutation.UpdateTime(); !ok {
		v := automationactivity.UpdateDefaultUpdateTime()
		aauo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aauo *AutomationActivityUpdateOne) check() error {
	if v, ok := aauo.mutation.ActivityType(); ok {
		if err := automationactivity.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf("ent: validator failed for field \"activity_type\": %w", err)}
		}
	}
	if v, ok := aauo.mutation.AutomationEntityType(); ok {
		if err := automationactivity.AutomationEntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "automation_entity_type", err: fmt.Errorf("ent: validator failed for field \"automation_entity_type\": %w", err)}
		}
	}
	return nil
}

func (aauo *AutomationActivityUpdateOne) sqlSave(ctx context.Context) (_node *AutomationActivity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   automationactivity.Table,
			Columns: automationactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: automationactivity.FieldID,
			},
		},
	}
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AutomationActivity.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := aauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: automationactivity.FieldUpdateTime,
		})
	}
	if value, ok := aauo.mutation.ActivityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: automationactivity.FieldActivityType,
		})
	}
	if value, ok := aauo.mutation.AutomationEntityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: automationactivity.FieldAutomationEntityType,
		})
	}
	if value, ok := aauo.mutation.OldValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: automationactivity.FieldOldValue,
		})
	}
	if aauo.mutation.OldValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: automationactivity.FieldOldValue,
		})
	}
	if value, ok := aauo.mutation.NewValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: automationactivity.FieldNewValue,
		})
	}
	if aauo.mutation.NewValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: automationactivity.FieldNewValue,
		})
	}
	if aauo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   automationactivity.AuthorTable,
			Columns: []string{automationactivity.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   automationactivity.AuthorTable,
			Columns: []string{automationactivity.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aauo.mutation.FlowInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   automationactivity.FlowInstanceTable,
			Columns: []string{automationactivity.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.FlowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   automationactivity.FlowInstanceTable,
			Columns: []string{automationactivity.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aauo.mutation.BlockInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   automationactivity.BlockInstanceTable,
			Columns: []string{automationactivity.BlockInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.BlockInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   automationactivity.BlockInstanceTable,
			Columns: []string{automationactivity.BlockInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AutomationActivity{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{automationactivity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
