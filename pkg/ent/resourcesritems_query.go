// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecificationrelationship"
	"github.com/facebookincubator/symphony/pkg/ent/resourcesritems"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
)

// ResourceSRItemsQuery is the builder for querying ResourceSRItems entities.
type ResourceSRItemsQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ResourceSRItems
	// eager-loading edges.
	withResourcesr   *ResourceSpecificationRelationshipQuery
	withResourcetype *ResourceTypeQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rsiq *ResourceSRItemsQuery) Where(ps ...predicate.ResourceSRItems) *ResourceSRItemsQuery {
	rsiq.predicates = append(rsiq.predicates, ps...)
	return rsiq
}

// Limit adds a limit step to the query.
func (rsiq *ResourceSRItemsQuery) Limit(limit int) *ResourceSRItemsQuery {
	rsiq.limit = &limit
	return rsiq
}

// Offset adds an offset step to the query.
func (rsiq *ResourceSRItemsQuery) Offset(offset int) *ResourceSRItemsQuery {
	rsiq.offset = &offset
	return rsiq
}

// Order adds an order step to the query.
func (rsiq *ResourceSRItemsQuery) Order(o ...OrderFunc) *ResourceSRItemsQuery {
	rsiq.order = append(rsiq.order, o...)
	return rsiq
}

// QueryResourcesr chains the current query on the resourcesr edge.
func (rsiq *ResourceSRItemsQuery) QueryResourcesr() *ResourceSpecificationRelationshipQuery {
	query := &ResourceSpecificationRelationshipQuery{config: rsiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsiq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcesritems.Table, resourcesritems.FieldID, selector),
			sqlgraph.To(resourcespecificationrelationship.Table, resourcespecificationrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcesritems.ResourcesrTable, resourcesritems.ResourcesrColumn),
		)
		fromU = sqlgraph.SetNeighbors(rsiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResourcetype chains the current query on the resourcetype edge.
func (rsiq *ResourceSRItemsQuery) QueryResourcetype() *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: rsiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsiq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcesritems.Table, resourcesritems.FieldID, selector),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcesritems.ResourcetypeTable, resourcesritems.ResourcetypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(rsiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResourceSRItems entity in the query. Returns *NotFoundError when no resourcesritems was found.
func (rsiq *ResourceSRItemsQuery) First(ctx context.Context) (*ResourceSRItems, error) {
	nodes, err := rsiq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resourcesritems.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rsiq *ResourceSRItemsQuery) FirstX(ctx context.Context) *ResourceSRItems {
	node, err := rsiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ResourceSRItems id in the query. Returns *NotFoundError when no id was found.
func (rsiq *ResourceSRItemsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rsiq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resourcesritems.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rsiq *ResourceSRItemsQuery) FirstIDX(ctx context.Context) int {
	id, err := rsiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ResourceSRItems entity in the query, returns an error if not exactly one entity was returned.
func (rsiq *ResourceSRItemsQuery) Only(ctx context.Context) (*ResourceSRItems, error) {
	nodes, err := rsiq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resourcesritems.Label}
	default:
		return nil, &NotSingularError{resourcesritems.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rsiq *ResourceSRItemsQuery) OnlyX(ctx context.Context) *ResourceSRItems {
	node, err := rsiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ResourceSRItems id in the query, returns an error if not exactly one id was returned.
func (rsiq *ResourceSRItemsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rsiq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resourcesritems.Label}
	default:
		err = &NotSingularError{resourcesritems.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rsiq *ResourceSRItemsQuery) OnlyIDX(ctx context.Context) int {
	id, err := rsiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResourceSRItemsSlice.
func (rsiq *ResourceSRItemsQuery) All(ctx context.Context) ([]*ResourceSRItems, error) {
	if err := rsiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rsiq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rsiq *ResourceSRItemsQuery) AllX(ctx context.Context) []*ResourceSRItems {
	nodes, err := rsiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ResourceSRItems ids.
func (rsiq *ResourceSRItemsQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rsiq.Select(resourcesritems.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rsiq *ResourceSRItemsQuery) IDsX(ctx context.Context) []int {
	ids, err := rsiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rsiq *ResourceSRItemsQuery) Count(ctx context.Context) (int, error) {
	if err := rsiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rsiq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rsiq *ResourceSRItemsQuery) CountX(ctx context.Context) int {
	count, err := rsiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rsiq *ResourceSRItemsQuery) Exist(ctx context.Context) (bool, error) {
	if err := rsiq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rsiq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rsiq *ResourceSRItemsQuery) ExistX(ctx context.Context) bool {
	exist, err := rsiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rsiq *ResourceSRItemsQuery) Clone() *ResourceSRItemsQuery {
	if rsiq == nil {
		return nil
	}
	return &ResourceSRItemsQuery{
		config:           rsiq.config,
		limit:            rsiq.limit,
		offset:           rsiq.offset,
		order:            append([]OrderFunc{}, rsiq.order...),
		unique:           append([]string{}, rsiq.unique...),
		predicates:       append([]predicate.ResourceSRItems{}, rsiq.predicates...),
		withResourcesr:   rsiq.withResourcesr.Clone(),
		withResourcetype: rsiq.withResourcetype.Clone(),
		// clone intermediate query.
		sql:  rsiq.sql.Clone(),
		path: rsiq.path,
	}
}

//  WithResourcesr tells the query-builder to eager-loads the nodes that are connected to
// the "resourcesr" edge. The optional arguments used to configure the query builder of the edge.
func (rsiq *ResourceSRItemsQuery) WithResourcesr(opts ...func(*ResourceSpecificationRelationshipQuery)) *ResourceSRItemsQuery {
	query := &ResourceSpecificationRelationshipQuery{config: rsiq.config}
	for _, opt := range opts {
		opt(query)
	}
	rsiq.withResourcesr = query
	return rsiq
}

//  WithResourcetype tells the query-builder to eager-loads the nodes that are connected to
// the "resourcetype" edge. The optional arguments used to configure the query builder of the edge.
func (rsiq *ResourceSRItemsQuery) WithResourcetype(opts ...func(*ResourceTypeQuery)) *ResourceSRItemsQuery {
	query := &ResourceTypeQuery{config: rsiq.config}
	for _, opt := range opts {
		opt(query)
	}
	rsiq.withResourcetype = query
	return rsiq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResourceSRItems.Query().
//		GroupBy(resourcesritems.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rsiq *ResourceSRItemsQuery) GroupBy(field string, fields ...string) *ResourceSRItemsGroupBy {
	group := &ResourceSRItemsGroupBy{config: rsiq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rsiq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ResourceSRItems.Query().
//		Select(resourcesritems.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rsiq *ResourceSRItemsQuery) Select(field string, fields ...string) *ResourceSRItemsSelect {
	selector := &ResourceSRItemsSelect{config: rsiq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rsiq.sqlQuery(), nil
	}
	return selector
}

func (rsiq *ResourceSRItemsQuery) prepareQuery(ctx context.Context) error {
	if rsiq.path != nil {
		prev, err := rsiq.path(ctx)
		if err != nil {
			return err
		}
		rsiq.sql = prev
	}
	if err := resourcesritems.Policy.EvalQuery(ctx, rsiq); err != nil {
		return err
	}
	return nil
}

func (rsiq *ResourceSRItemsQuery) sqlAll(ctx context.Context) ([]*ResourceSRItems, error) {
	var (
		nodes       = []*ResourceSRItems{}
		withFKs     = rsiq.withFKs
		_spec       = rsiq.querySpec()
		loadedTypes = [2]bool{
			rsiq.withResourcesr != nil,
			rsiq.withResourcetype != nil,
		}
	)
	if rsiq.withResourcesr != nil || rsiq.withResourcetype != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, resourcesritems.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &ResourceSRItems{config: rsiq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rsiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rsiq.withResourcesr; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourceSRItems)
		for i := range nodes {
			if fk := nodes[i].resource_specification_relationship_resource_sr; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcespecificationrelationship.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_specification_relationship_resource_sr" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Resourcesr = n
			}
		}
	}

	if query := rsiq.withResourcetype; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourceSRItems)
		for i := range nodes {
			if fk := nodes[i].resource_type_resourcetype_items; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_type_resourcetype_items" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Resourcetype = n
			}
		}
	}

	return nodes, nil
}

func (rsiq *ResourceSRItemsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rsiq.querySpec()
	return sqlgraph.CountNodes(ctx, rsiq.driver, _spec)
}

func (rsiq *ResourceSRItemsQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rsiq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rsiq *ResourceSRItemsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcesritems.Table,
			Columns: resourcesritems.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcesritems.FieldID,
			},
		},
		From:   rsiq.sql,
		Unique: true,
	}
	if ps := rsiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rsiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rsiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rsiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, resourcesritems.ValidColumn)
			}
		}
	}
	return _spec
}

func (rsiq *ResourceSRItemsQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rsiq.driver.Dialect())
	t1 := builder.Table(resourcesritems.Table)
	selector := builder.Select(t1.Columns(resourcesritems.Columns...)...).From(t1)
	if rsiq.sql != nil {
		selector = rsiq.sql
		selector.Select(selector.Columns(resourcesritems.Columns...)...)
	}
	for _, p := range rsiq.predicates {
		p(selector)
	}
	for _, p := range rsiq.order {
		p(selector, resourcesritems.ValidColumn)
	}
	if offset := rsiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rsiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ResourceSRItemsGroupBy is the builder for group-by ResourceSRItems entities.
type ResourceSRItemsGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rsigb *ResourceSRItemsGroupBy) Aggregate(fns ...AggregateFunc) *ResourceSRItemsGroupBy {
	rsigb.fns = append(rsigb.fns, fns...)
	return rsigb
}

// Scan applies the group-by query and scan the result into the given value.
func (rsigb *ResourceSRItemsGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rsigb.path(ctx)
	if err != nil {
		return err
	}
	rsigb.sql = query
	return rsigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rsigb *ResourceSRItemsGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rsigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rsigb *ResourceSRItemsGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rsigb.fields) > 1 {
		return nil, errors.New("ent: ResourceSRItemsGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rsigb *ResourceSRItemsGroupBy) StringsX(ctx context.Context) []string {
	v, err := rsigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rsigb *ResourceSRItemsGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rsigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcesritems.Label}
	default:
		err = fmt.Errorf("ent: ResourceSRItemsGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rsigb *ResourceSRItemsGroupBy) StringX(ctx context.Context) string {
	v, err := rsigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rsigb *ResourceSRItemsGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rsigb.fields) > 1 {
		return nil, errors.New("ent: ResourceSRItemsGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rsigb *ResourceSRItemsGroupBy) IntsX(ctx context.Context) []int {
	v, err := rsigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rsigb *ResourceSRItemsGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rsigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcesritems.Label}
	default:
		err = fmt.Errorf("ent: ResourceSRItemsGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rsigb *ResourceSRItemsGroupBy) IntX(ctx context.Context) int {
	v, err := rsigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rsigb *ResourceSRItemsGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rsigb.fields) > 1 {
		return nil, errors.New("ent: ResourceSRItemsGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rsigb *ResourceSRItemsGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rsigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rsigb *ResourceSRItemsGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rsigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcesritems.Label}
	default:
		err = fmt.Errorf("ent: ResourceSRItemsGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rsigb *ResourceSRItemsGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rsigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rsigb *ResourceSRItemsGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rsigb.fields) > 1 {
		return nil, errors.New("ent: ResourceSRItemsGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rsigb *ResourceSRItemsGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rsigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rsigb *ResourceSRItemsGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rsigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcesritems.Label}
	default:
		err = fmt.Errorf("ent: ResourceSRItemsGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rsigb *ResourceSRItemsGroupBy) BoolX(ctx context.Context) bool {
	v, err := rsigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rsigb *ResourceSRItemsGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rsigb.fields {
		if !resourcesritems.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rsigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rsigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rsigb *ResourceSRItemsGroupBy) sqlQuery() *sql.Selector {
	selector := rsigb.sql
	columns := make([]string, 0, len(rsigb.fields)+len(rsigb.fns))
	columns = append(columns, rsigb.fields...)
	for _, fn := range rsigb.fns {
		columns = append(columns, fn(selector, resourcesritems.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(rsigb.fields...)
}

// ResourceSRItemsSelect is the builder for select fields of ResourceSRItems entities.
type ResourceSRItemsSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rsis *ResourceSRItemsSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rsis.path(ctx)
	if err != nil {
		return err
	}
	rsis.sql = query
	return rsis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rsis *ResourceSRItemsSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rsis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rsis *ResourceSRItemsSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rsis.fields) > 1 {
		return nil, errors.New("ent: ResourceSRItemsSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rsis *ResourceSRItemsSelect) StringsX(ctx context.Context) []string {
	v, err := rsis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rsis *ResourceSRItemsSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rsis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcesritems.Label}
	default:
		err = fmt.Errorf("ent: ResourceSRItemsSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rsis *ResourceSRItemsSelect) StringX(ctx context.Context) string {
	v, err := rsis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rsis *ResourceSRItemsSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rsis.fields) > 1 {
		return nil, errors.New("ent: ResourceSRItemsSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rsis *ResourceSRItemsSelect) IntsX(ctx context.Context) []int {
	v, err := rsis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rsis *ResourceSRItemsSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rsis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcesritems.Label}
	default:
		err = fmt.Errorf("ent: ResourceSRItemsSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rsis *ResourceSRItemsSelect) IntX(ctx context.Context) int {
	v, err := rsis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rsis *ResourceSRItemsSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rsis.fields) > 1 {
		return nil, errors.New("ent: ResourceSRItemsSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rsis *ResourceSRItemsSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rsis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rsis *ResourceSRItemsSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rsis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcesritems.Label}
	default:
		err = fmt.Errorf("ent: ResourceSRItemsSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rsis *ResourceSRItemsSelect) Float64X(ctx context.Context) float64 {
	v, err := rsis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rsis *ResourceSRItemsSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rsis.fields) > 1 {
		return nil, errors.New("ent: ResourceSRItemsSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rsis *ResourceSRItemsSelect) BoolsX(ctx context.Context) []bool {
	v, err := rsis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rsis *ResourceSRItemsSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rsis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcesritems.Label}
	default:
		err = fmt.Errorf("ent: ResourceSRItemsSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rsis *ResourceSRItemsSelect) BoolX(ctx context.Context) bool {
	v, err := rsis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rsis *ResourceSRItemsSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rsis.fields {
		if !resourcesritems.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := rsis.sqlQuery().Query()
	if err := rsis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rsis *ResourceSRItemsSelect) sqlQuery() sql.Querier {
	selector := rsis.sql
	selector.Select(selector.Columns(rsis.fields...)...)
	return selector
}
