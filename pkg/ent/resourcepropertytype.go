// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/propertycategory"
	"github.com/facebookincubator/symphony/pkg/ent/resourcepropertytype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
)

// ResourcePropertyType is the model entity for the ResourcePropertyType schema.
type ResourcePropertyType struct {
	config `gqlgen:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Type holds the value of the "type" field.
	Type resourcepropertytype.Type `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// IntVal holds the value of the "int_val" field.
	IntVal *int `json:"intValue" gqlgen:"intValue"`
	// BoolVal holds the value of the "bool_val" field.
	BoolVal *bool `json:"booleanValue" gqlgen:"booleanValue"`
	// FloatVal holds the value of the "float_val" field.
	FloatVal *float64 `json:"floatValue" gqlgen:"floatValue"`
	// LatitudeVal holds the value of the "latitude_val" field.
	LatitudeVal *float64 `json:"latitudeValue" gqlgen:"latitudeValue"`
	// LongitudeVal holds the value of the "longitude_val" field.
	LongitudeVal *float64 `json:"longitudeValue" gqlgen:"longitudeValue"`
	// StringVal holds the value of the "string_val" field.
	StringVal *string `json:"stringValue" gqlgen:"stringValue"`
	// RangeFromVal holds the value of the "range_from_val" field.
	RangeFromVal *float64 `json:"rangeFromValue" gqlgen:"rangeFromValue"`
	// RangeToVal holds the value of the "range_to_val" field.
	RangeToVal *float64 `json:"rangeToValue" gqlgen:"rangeToValue"`
	// IsInstanceProperty holds the value of the "is_instance_property" field.
	IsInstanceProperty bool `json:"is_instance_property,omitempty" gqlgen:"isInstanceProperty"`
	// Editable holds the value of the "editable" field.
	Editable bool `json:"editable,omitempty" gqlgen:"isEditable"`
	// Mandatory holds the value of the "mandatory" field.
	Mandatory bool `json:"mandatory,omitempty" gqlgen:"isMandatory"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty" gqlgen:"isDeleted"`
	// Listable holds the value of the "listable" field.
	Listable bool `json:"listable,omitempty" gqlgen:"isListable"`
	// NodeType holds the value of the "nodeType" field.
	NodeType string `json:"nodeType,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourcePropertyTypeQuery when eager-loading is set.
	Edges                                         ResourcePropertyTypeEdges `json:"edges"`
	property_category_resource_properties_type    *int
	resource_specification_resource_property_type *int
}

// ResourcePropertyTypeEdges holds the relations/edges for other nodes in the graph.
type ResourcePropertyTypeEdges struct {
	// ResourceSpecification holds the value of the resourceSpecification edge.
	ResourceSpecification *ResourceSpecification
	// PropertyCategory holds the value of the property_category edge.
	PropertyCategory *PropertyCategory
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResourceSpecificationOrErr returns the ResourceSpecification value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourcePropertyTypeEdges) ResourceSpecificationOrErr() (*ResourceSpecification, error) {
	if e.loadedTypes[0] {
		if e.ResourceSpecification == nil {
			// The edge resourceSpecification was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcespecification.Label}
		}
		return e.ResourceSpecification, nil
	}
	return nil, &NotLoadedError{edge: "resourceSpecification"}
}

// PropertyCategoryOrErr returns the PropertyCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourcePropertyTypeEdges) PropertyCategoryOrErr() (*PropertyCategory, error) {
	if e.loadedTypes[1] {
		if e.PropertyCategory == nil {
			// The edge property_category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: propertycategory.Label}
		}
		return e.PropertyCategory, nil
	}
	return nil, &NotLoadedError{edge: "property_category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourcePropertyType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullTime{},    // create_time
		&sql.NullTime{},    // update_time
		&sql.NullString{},  // type
		&sql.NullString{},  // name
		&sql.NullString{},  // external_id
		&sql.NullInt64{},   // index
		&sql.NullString{},  // category
		&sql.NullInt64{},   // int_val
		&sql.NullBool{},    // bool_val
		&sql.NullFloat64{}, // float_val
		&sql.NullFloat64{}, // latitude_val
		&sql.NullFloat64{}, // longitude_val
		&sql.NullString{},  // string_val
		&sql.NullFloat64{}, // range_from_val
		&sql.NullFloat64{}, // range_to_val
		&sql.NullBool{},    // is_instance_property
		&sql.NullBool{},    // editable
		&sql.NullBool{},    // mandatory
		&sql.NullBool{},    // deleted
		&sql.NullBool{},    // listable
		&sql.NullString{},  // nodeType
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ResourcePropertyType) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // property_category_resource_properties_type
		&sql.NullInt64{}, // resource_specification_resource_property_type
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourcePropertyType fields.
func (rpt *ResourcePropertyType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(resourcepropertytype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rpt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		rpt.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		rpt.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[2])
	} else if value.Valid {
		rpt.Type = resourcepropertytype.Type(value.String)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[3])
	} else if value.Valid {
		rpt.Name = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field external_id", values[4])
	} else if value.Valid {
		rpt.ExternalID = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field index", values[5])
	} else if value.Valid {
		rpt.Index = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field category", values[6])
	} else if value.Valid {
		rpt.Category = value.String
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field int_val", values[7])
	} else if value.Valid {
		rpt.IntVal = new(int)
		*rpt.IntVal = int(value.Int64)
	}
	if value, ok := values[8].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field bool_val", values[8])
	} else if value.Valid {
		rpt.BoolVal = new(bool)
		*rpt.BoolVal = value.Bool
	}
	if value, ok := values[9].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field float_val", values[9])
	} else if value.Valid {
		rpt.FloatVal = new(float64)
		*rpt.FloatVal = value.Float64
	}
	if value, ok := values[10].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field latitude_val", values[10])
	} else if value.Valid {
		rpt.LatitudeVal = new(float64)
		*rpt.LatitudeVal = value.Float64
	}
	if value, ok := values[11].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field longitude_val", values[11])
	} else if value.Valid {
		rpt.LongitudeVal = new(float64)
		*rpt.LongitudeVal = value.Float64
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_val", values[12])
	} else if value.Valid {
		rpt.StringVal = new(string)
		*rpt.StringVal = value.String
	}
	if value, ok := values[13].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field range_from_val", values[13])
	} else if value.Valid {
		rpt.RangeFromVal = new(float64)
		*rpt.RangeFromVal = value.Float64
	}
	if value, ok := values[14].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field range_to_val", values[14])
	} else if value.Valid {
		rpt.RangeToVal = new(float64)
		*rpt.RangeToVal = value.Float64
	}
	if value, ok := values[15].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field is_instance_property", values[15])
	} else if value.Valid {
		rpt.IsInstanceProperty = value.Bool
	}
	if value, ok := values[16].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field editable", values[16])
	} else if value.Valid {
		rpt.Editable = value.Bool
	}
	if value, ok := values[17].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field mandatory", values[17])
	} else if value.Valid {
		rpt.Mandatory = value.Bool
	}
	if value, ok := values[18].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[18])
	} else if value.Valid {
		rpt.Deleted = value.Bool
	}
	if value, ok := values[19].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field listable", values[19])
	} else if value.Valid {
		rpt.Listable = value.Bool
	}
	if value, ok := values[20].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field nodeType", values[20])
	} else if value.Valid {
		rpt.NodeType = value.String
	}
	values = values[21:]
	if len(values) == len(resourcepropertytype.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field property_category_resource_properties_type", value)
		} else if value.Valid {
			rpt.property_category_resource_properties_type = new(int)
			*rpt.property_category_resource_properties_type = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_specification_resource_property_type", value)
		} else if value.Valid {
			rpt.resource_specification_resource_property_type = new(int)
			*rpt.resource_specification_resource_property_type = int(value.Int64)
		}
	}
	return nil
}

// QueryResourceSpecification queries the resourceSpecification edge of the ResourcePropertyType.
func (rpt *ResourcePropertyType) QueryResourceSpecification() *ResourceSpecificationQuery {
	return (&ResourcePropertyTypeClient{config: rpt.config}).QueryResourceSpecification(rpt)
}

// QueryPropertyCategory queries the property_category edge of the ResourcePropertyType.
func (rpt *ResourcePropertyType) QueryPropertyCategory() *PropertyCategoryQuery {
	return (&ResourcePropertyTypeClient{config: rpt.config}).QueryPropertyCategory(rpt)
}

// Update returns a builder for updating this ResourcePropertyType.
// Note that, you need to call ResourcePropertyType.Unwrap() before calling this method, if this ResourcePropertyType
// was returned from a transaction, and the transaction was committed or rolled back.
func (rpt *ResourcePropertyType) Update() *ResourcePropertyTypeUpdateOne {
	return (&ResourcePropertyTypeClient{config: rpt.config}).UpdateOne(rpt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rpt *ResourcePropertyType) Unwrap() *ResourcePropertyType {
	tx, ok := rpt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourcePropertyType is not a transactional entity")
	}
	rpt.config.driver = tx.drv
	return rpt
}

// String implements the fmt.Stringer.
func (rpt *ResourcePropertyType) String() string {
	var builder strings.Builder
	builder.WriteString("ResourcePropertyType(")
	builder.WriteString(fmt.Sprintf("id=%v", rpt.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(rpt.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(rpt.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", rpt.Type))
	builder.WriteString(", name=")
	builder.WriteString(rpt.Name)
	builder.WriteString(", external_id=")
	builder.WriteString(rpt.ExternalID)
	builder.WriteString(", index=")
	builder.WriteString(fmt.Sprintf("%v", rpt.Index))
	builder.WriteString(", category=")
	builder.WriteString(rpt.Category)
	if v := rpt.IntVal; v != nil {
		builder.WriteString(", int_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := rpt.BoolVal; v != nil {
		builder.WriteString(", bool_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := rpt.FloatVal; v != nil {
		builder.WriteString(", float_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := rpt.LatitudeVal; v != nil {
		builder.WriteString(", latitude_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := rpt.LongitudeVal; v != nil {
		builder.WriteString(", longitude_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := rpt.StringVal; v != nil {
		builder.WriteString(", string_val=")
		builder.WriteString(*v)
	}
	if v := rpt.RangeFromVal; v != nil {
		builder.WriteString(", range_from_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := rpt.RangeToVal; v != nil {
		builder.WriteString(", range_to_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", is_instance_property=")
	builder.WriteString(fmt.Sprintf("%v", rpt.IsInstanceProperty))
	builder.WriteString(", editable=")
	builder.WriteString(fmt.Sprintf("%v", rpt.Editable))
	builder.WriteString(", mandatory=")
	builder.WriteString(fmt.Sprintf("%v", rpt.Mandatory))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", rpt.Deleted))
	builder.WriteString(", listable=")
	builder.WriteString(fmt.Sprintf("%v", rpt.Listable))
	builder.WriteString(", nodeType=")
	builder.WriteString(rpt.NodeType)
	builder.WriteByte(')')
	return builder.String()
}

// ResourcePropertyTypes is a parsable slice of ResourcePropertyType.
type ResourcePropertyTypes []*ResourcePropertyType

func (rpt ResourcePropertyTypes) config(cfg config) {
	for _i := range rpt {
		rpt[_i].config = cfg
	}
}
