// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecificationrelationship"
	"github.com/facebookincubator/symphony/pkg/ent/resourcesritems"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
)

// ResourceSRItemsUpdate is the builder for updating ResourceSRItems entities.
type ResourceSRItemsUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceSRItemsMutation
}

// Where adds a new predicate for the builder.
func (rsiu *ResourceSRItemsUpdate) Where(ps ...predicate.ResourceSRItems) *ResourceSRItemsUpdate {
	rsiu.mutation.predicates = append(rsiu.mutation.predicates, ps...)
	return rsiu
}

// SetName sets the name field.
func (rsiu *ResourceSRItemsUpdate) SetName(s string) *ResourceSRItemsUpdate {
	rsiu.mutation.SetName(s)
	return rsiu
}

// SetResourcesrID sets the resourcesr edge to ResourceSpecificationRelationship by id.
func (rsiu *ResourceSRItemsUpdate) SetResourcesrID(id int) *ResourceSRItemsUpdate {
	rsiu.mutation.SetResourcesrID(id)
	return rsiu
}

// SetNillableResourcesrID sets the resourcesr edge to ResourceSpecificationRelationship by id if the given value is not nil.
func (rsiu *ResourceSRItemsUpdate) SetNillableResourcesrID(id *int) *ResourceSRItemsUpdate {
	if id != nil {
		rsiu = rsiu.SetResourcesrID(*id)
	}
	return rsiu
}

// SetResourcesr sets the resourcesr edge to ResourceSpecificationRelationship.
func (rsiu *ResourceSRItemsUpdate) SetResourcesr(r *ResourceSpecificationRelationship) *ResourceSRItemsUpdate {
	return rsiu.SetResourcesrID(r.ID)
}

// SetResourcetypeID sets the resourcetype edge to ResourceType by id.
func (rsiu *ResourceSRItemsUpdate) SetResourcetypeID(id int) *ResourceSRItemsUpdate {
	rsiu.mutation.SetResourcetypeID(id)
	return rsiu
}

// SetNillableResourcetypeID sets the resourcetype edge to ResourceType by id if the given value is not nil.
func (rsiu *ResourceSRItemsUpdate) SetNillableResourcetypeID(id *int) *ResourceSRItemsUpdate {
	if id != nil {
		rsiu = rsiu.SetResourcetypeID(*id)
	}
	return rsiu
}

// SetResourcetype sets the resourcetype edge to ResourceType.
func (rsiu *ResourceSRItemsUpdate) SetResourcetype(r *ResourceType) *ResourceSRItemsUpdate {
	return rsiu.SetResourcetypeID(r.ID)
}

// Mutation returns the ResourceSRItemsMutation object of the builder.
func (rsiu *ResourceSRItemsUpdate) Mutation() *ResourceSRItemsMutation {
	return rsiu.mutation
}

// ClearResourcesr clears the "resourcesr" edge to type ResourceSpecificationRelationship.
func (rsiu *ResourceSRItemsUpdate) ClearResourcesr() *ResourceSRItemsUpdate {
	rsiu.mutation.ClearResourcesr()
	return rsiu
}

// ClearResourcetype clears the "resourcetype" edge to type ResourceType.
func (rsiu *ResourceSRItemsUpdate) ClearResourcetype() *ResourceSRItemsUpdate {
	rsiu.mutation.ClearResourcetype()
	return rsiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsiu *ResourceSRItemsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rsiu.defaults()
	if len(rsiu.hooks) == 0 {
		if err = rsiu.check(); err != nil {
			return 0, err
		}
		affected, err = rsiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceSRItemsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rsiu.check(); err != nil {
				return 0, err
			}
			rsiu.mutation = mutation
			affected, err = rsiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rsiu.hooks) - 1; i >= 0; i-- {
			mut = rsiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsiu *ResourceSRItemsUpdate) SaveX(ctx context.Context) int {
	affected, err := rsiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsiu *ResourceSRItemsUpdate) Exec(ctx context.Context) error {
	_, err := rsiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsiu *ResourceSRItemsUpdate) ExecX(ctx context.Context) {
	if err := rsiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsiu *ResourceSRItemsUpdate) defaults() {
	if _, ok := rsiu.mutation.UpdateTime(); !ok {
		v := resourcesritems.UpdateDefaultUpdateTime()
		rsiu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsiu *ResourceSRItemsUpdate) check() error {
	if v, ok := rsiu.mutation.Name(); ok {
		if err := resourcesritems.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rsiu *ResourceSRItemsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcesritems.Table,
			Columns: resourcesritems.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcesritems.FieldID,
			},
		},
	}
	if ps := rsiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcesritems.FieldUpdateTime,
		})
	}
	if value, ok := rsiu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesritems.FieldName,
		})
	}
	if rsiu.mutation.ResourcesrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcesritems.ResourcesrTable,
			Columns: []string{resourcesritems.ResourcesrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationrelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsiu.mutation.ResourcesrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcesritems.ResourcesrTable,
			Columns: []string{resourcesritems.ResourcesrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationrelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsiu.mutation.ResourcetypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcesritems.ResourcetypeTable,
			Columns: []string{resourcesritems.ResourcetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsiu.mutation.ResourcetypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcesritems.ResourcetypeTable,
			Columns: []string{resourcesritems.ResourcetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcesritems.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceSRItemsUpdateOne is the builder for updating a single ResourceSRItems entity.
type ResourceSRItemsUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceSRItemsMutation
}

// SetName sets the name field.
func (rsiuo *ResourceSRItemsUpdateOne) SetName(s string) *ResourceSRItemsUpdateOne {
	rsiuo.mutation.SetName(s)
	return rsiuo
}

// SetResourcesrID sets the resourcesr edge to ResourceSpecificationRelationship by id.
func (rsiuo *ResourceSRItemsUpdateOne) SetResourcesrID(id int) *ResourceSRItemsUpdateOne {
	rsiuo.mutation.SetResourcesrID(id)
	return rsiuo
}

// SetNillableResourcesrID sets the resourcesr edge to ResourceSpecificationRelationship by id if the given value is not nil.
func (rsiuo *ResourceSRItemsUpdateOne) SetNillableResourcesrID(id *int) *ResourceSRItemsUpdateOne {
	if id != nil {
		rsiuo = rsiuo.SetResourcesrID(*id)
	}
	return rsiuo
}

// SetResourcesr sets the resourcesr edge to ResourceSpecificationRelationship.
func (rsiuo *ResourceSRItemsUpdateOne) SetResourcesr(r *ResourceSpecificationRelationship) *ResourceSRItemsUpdateOne {
	return rsiuo.SetResourcesrID(r.ID)
}

// SetResourcetypeID sets the resourcetype edge to ResourceType by id.
func (rsiuo *ResourceSRItemsUpdateOne) SetResourcetypeID(id int) *ResourceSRItemsUpdateOne {
	rsiuo.mutation.SetResourcetypeID(id)
	return rsiuo
}

// SetNillableResourcetypeID sets the resourcetype edge to ResourceType by id if the given value is not nil.
func (rsiuo *ResourceSRItemsUpdateOne) SetNillableResourcetypeID(id *int) *ResourceSRItemsUpdateOne {
	if id != nil {
		rsiuo = rsiuo.SetResourcetypeID(*id)
	}
	return rsiuo
}

// SetResourcetype sets the resourcetype edge to ResourceType.
func (rsiuo *ResourceSRItemsUpdateOne) SetResourcetype(r *ResourceType) *ResourceSRItemsUpdateOne {
	return rsiuo.SetResourcetypeID(r.ID)
}

// Mutation returns the ResourceSRItemsMutation object of the builder.
func (rsiuo *ResourceSRItemsUpdateOne) Mutation() *ResourceSRItemsMutation {
	return rsiuo.mutation
}

// ClearResourcesr clears the "resourcesr" edge to type ResourceSpecificationRelationship.
func (rsiuo *ResourceSRItemsUpdateOne) ClearResourcesr() *ResourceSRItemsUpdateOne {
	rsiuo.mutation.ClearResourcesr()
	return rsiuo
}

// ClearResourcetype clears the "resourcetype" edge to type ResourceType.
func (rsiuo *ResourceSRItemsUpdateOne) ClearResourcetype() *ResourceSRItemsUpdateOne {
	rsiuo.mutation.ClearResourcetype()
	return rsiuo
}

// Save executes the query and returns the updated entity.
func (rsiuo *ResourceSRItemsUpdateOne) Save(ctx context.Context) (*ResourceSRItems, error) {
	var (
		err  error
		node *ResourceSRItems
	)
	rsiuo.defaults()
	if len(rsiuo.hooks) == 0 {
		if err = rsiuo.check(); err != nil {
			return nil, err
		}
		node, err = rsiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceSRItemsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rsiuo.check(); err != nil {
				return nil, err
			}
			rsiuo.mutation = mutation
			node, err = rsiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rsiuo.hooks) - 1; i >= 0; i-- {
			mut = rsiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsiuo *ResourceSRItemsUpdateOne) SaveX(ctx context.Context) *ResourceSRItems {
	node, err := rsiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsiuo *ResourceSRItemsUpdateOne) Exec(ctx context.Context) error {
	_, err := rsiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsiuo *ResourceSRItemsUpdateOne) ExecX(ctx context.Context) {
	if err := rsiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsiuo *ResourceSRItemsUpdateOne) defaults() {
	if _, ok := rsiuo.mutation.UpdateTime(); !ok {
		v := resourcesritems.UpdateDefaultUpdateTime()
		rsiuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsiuo *ResourceSRItemsUpdateOne) check() error {
	if v, ok := rsiuo.mutation.Name(); ok {
		if err := resourcesritems.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rsiuo *ResourceSRItemsUpdateOne) sqlSave(ctx context.Context) (_node *ResourceSRItems, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcesritems.Table,
			Columns: resourcesritems.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcesritems.FieldID,
			},
		},
	}
	id, ok := rsiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceSRItems.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rsiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcesritems.FieldUpdateTime,
		})
	}
	if value, ok := rsiuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesritems.FieldName,
		})
	}
	if rsiuo.mutation.ResourcesrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcesritems.ResourcesrTable,
			Columns: []string{resourcesritems.ResourcesrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationrelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsiuo.mutation.ResourcesrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcesritems.ResourcesrTable,
			Columns: []string{resourcesritems.ResourcesrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationrelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsiuo.mutation.ResourcetypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcesritems.ResourcetypeTable,
			Columns: []string{resourcesritems.ResourcetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsiuo.mutation.ResourcetypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcesritems.ResourcetypeTable,
			Columns: []string{resourcesritems.ResourcetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceSRItems{config: rsiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rsiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcesritems.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
