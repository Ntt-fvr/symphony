// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/cost"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/uplitem"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
)

// CostUpdate is the builder for updating Cost entities.
type CostUpdate struct {
	config
	hooks    []Hook
	mutation *CostMutation
}

// Where adds a new predicate for the builder.
func (cu *CostUpdate) Where(ps ...predicate.Cost) *CostUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetItem sets the item field.
func (cu *CostUpdate) SetItem(s string) *CostUpdate {
	cu.mutation.SetItem(s)
	return cu
}

// SetUnit sets the unit field.
func (cu *CostUpdate) SetUnit(f float64) *CostUpdate {
	cu.mutation.ResetUnit()
	cu.mutation.SetUnit(f)
	return cu
}

// AddUnit adds f to unit.
func (cu *CostUpdate) AddUnit(f float64) *CostUpdate {
	cu.mutation.AddUnit(f)
	return cu
}

// SetPrice sets the price field.
func (cu *CostUpdate) SetPrice(f float64) *CostUpdate {
	cu.mutation.ResetPrice()
	cu.mutation.SetPrice(f)
	return cu
}

// AddPrice adds f to price.
func (cu *CostUpdate) AddPrice(f float64) *CostUpdate {
	cu.mutation.AddPrice(f)
	return cu
}

// SetQuantity sets the quantity field.
func (cu *CostUpdate) SetQuantity(i int) *CostUpdate {
	cu.mutation.ResetQuantity()
	cu.mutation.SetQuantity(i)
	return cu
}

// AddQuantity adds i to quantity.
func (cu *CostUpdate) AddQuantity(i int) *CostUpdate {
	cu.mutation.AddQuantity(i)
	return cu
}

// SetTotal sets the total field.
func (cu *CostUpdate) SetTotal(f float64) *CostUpdate {
	cu.mutation.ResetTotal()
	cu.mutation.SetTotal(f)
	return cu
}

// AddTotal adds f to total.
func (cu *CostUpdate) AddTotal(f float64) *CostUpdate {
	cu.mutation.AddTotal(f)
	return cu
}

// SetUplitemID sets the uplitem edge to UplItem by id.
func (cu *CostUpdate) SetUplitemID(id int) *CostUpdate {
	cu.mutation.SetUplitemID(id)
	return cu
}

// SetNillableUplitemID sets the uplitem edge to UplItem by id if the given value is not nil.
func (cu *CostUpdate) SetNillableUplitemID(id *int) *CostUpdate {
	if id != nil {
		cu = cu.SetUplitemID(*id)
	}
	return cu
}

// SetUplitem sets the uplitem edge to UplItem.
func (cu *CostUpdate) SetUplitem(u *UplItem) *CostUpdate {
	return cu.SetUplitemID(u.ID)
}

// SetWorkorderID sets the workorder edge to WorkOrder by id.
func (cu *CostUpdate) SetWorkorderID(id int) *CostUpdate {
	cu.mutation.SetWorkorderID(id)
	return cu
}

// SetNillableWorkorderID sets the workorder edge to WorkOrder by id if the given value is not nil.
func (cu *CostUpdate) SetNillableWorkorderID(id *int) *CostUpdate {
	if id != nil {
		cu = cu.SetWorkorderID(*id)
	}
	return cu
}

// SetWorkorder sets the workorder edge to WorkOrder.
func (cu *CostUpdate) SetWorkorder(w *WorkOrder) *CostUpdate {
	return cu.SetWorkorderID(w.ID)
}

// Mutation returns the CostMutation object of the builder.
func (cu *CostUpdate) Mutation() *CostMutation {
	return cu.mutation
}

// ClearUplitem clears the "uplitem" edge to type UplItem.
func (cu *CostUpdate) ClearUplitem() *CostUpdate {
	cu.mutation.ClearUplitem()
	return cu
}

// ClearWorkorder clears the "workorder" edge to type WorkOrder.
func (cu *CostUpdate) ClearWorkorder() *CostUpdate {
	cu.mutation.ClearWorkorder()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CostUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CostUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CostUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CostUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := cost.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

func (cu *CostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cost.Table,
			Columns: cost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cost.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cost.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.Item(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cost.FieldItem,
		})
	}
	if value, ok := cu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldUnit,
		})
	}
	if value, ok := cu.mutation.AddedUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldUnit,
		})
	}
	if value, ok := cu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldPrice,
		})
	}
	if value, ok := cu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldPrice,
		})
	}
	if value, ok := cu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cost.FieldQuantity,
		})
	}
	if value, ok := cu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cost.FieldQuantity,
		})
	}
	if value, ok := cu.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldTotal,
		})
	}
	if value, ok := cu.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldTotal,
		})
	}
	if cu.mutation.UplitemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.UplitemTable,
			Columns: []string{cost.UplitemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uplitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UplitemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.UplitemTable,
			Columns: []string{cost.UplitemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uplitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WorkorderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.WorkorderTable,
			Columns: []string{cost.WorkorderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WorkorderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.WorkorderTable,
			Columns: []string{cost.WorkorderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cost.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CostUpdateOne is the builder for updating a single Cost entity.
type CostUpdateOne struct {
	config
	hooks    []Hook
	mutation *CostMutation
}

// SetItem sets the item field.
func (cuo *CostUpdateOne) SetItem(s string) *CostUpdateOne {
	cuo.mutation.SetItem(s)
	return cuo
}

// SetUnit sets the unit field.
func (cuo *CostUpdateOne) SetUnit(f float64) *CostUpdateOne {
	cuo.mutation.ResetUnit()
	cuo.mutation.SetUnit(f)
	return cuo
}

// AddUnit adds f to unit.
func (cuo *CostUpdateOne) AddUnit(f float64) *CostUpdateOne {
	cuo.mutation.AddUnit(f)
	return cuo
}

// SetPrice sets the price field.
func (cuo *CostUpdateOne) SetPrice(f float64) *CostUpdateOne {
	cuo.mutation.ResetPrice()
	cuo.mutation.SetPrice(f)
	return cuo
}

// AddPrice adds f to price.
func (cuo *CostUpdateOne) AddPrice(f float64) *CostUpdateOne {
	cuo.mutation.AddPrice(f)
	return cuo
}

// SetQuantity sets the quantity field.
func (cuo *CostUpdateOne) SetQuantity(i int) *CostUpdateOne {
	cuo.mutation.ResetQuantity()
	cuo.mutation.SetQuantity(i)
	return cuo
}

// AddQuantity adds i to quantity.
func (cuo *CostUpdateOne) AddQuantity(i int) *CostUpdateOne {
	cuo.mutation.AddQuantity(i)
	return cuo
}

// SetTotal sets the total field.
func (cuo *CostUpdateOne) SetTotal(f float64) *CostUpdateOne {
	cuo.mutation.ResetTotal()
	cuo.mutation.SetTotal(f)
	return cuo
}

// AddTotal adds f to total.
func (cuo *CostUpdateOne) AddTotal(f float64) *CostUpdateOne {
	cuo.mutation.AddTotal(f)
	return cuo
}

// SetUplitemID sets the uplitem edge to UplItem by id.
func (cuo *CostUpdateOne) SetUplitemID(id int) *CostUpdateOne {
	cuo.mutation.SetUplitemID(id)
	return cuo
}

// SetNillableUplitemID sets the uplitem edge to UplItem by id if the given value is not nil.
func (cuo *CostUpdateOne) SetNillableUplitemID(id *int) *CostUpdateOne {
	if id != nil {
		cuo = cuo.SetUplitemID(*id)
	}
	return cuo
}

// SetUplitem sets the uplitem edge to UplItem.
func (cuo *CostUpdateOne) SetUplitem(u *UplItem) *CostUpdateOne {
	return cuo.SetUplitemID(u.ID)
}

// SetWorkorderID sets the workorder edge to WorkOrder by id.
func (cuo *CostUpdateOne) SetWorkorderID(id int) *CostUpdateOne {
	cuo.mutation.SetWorkorderID(id)
	return cuo
}

// SetNillableWorkorderID sets the workorder edge to WorkOrder by id if the given value is not nil.
func (cuo *CostUpdateOne) SetNillableWorkorderID(id *int) *CostUpdateOne {
	if id != nil {
		cuo = cuo.SetWorkorderID(*id)
	}
	return cuo
}

// SetWorkorder sets the workorder edge to WorkOrder.
func (cuo *CostUpdateOne) SetWorkorder(w *WorkOrder) *CostUpdateOne {
	return cuo.SetWorkorderID(w.ID)
}

// Mutation returns the CostMutation object of the builder.
func (cuo *CostUpdateOne) Mutation() *CostMutation {
	return cuo.mutation
}

// ClearUplitem clears the "uplitem" edge to type UplItem.
func (cuo *CostUpdateOne) ClearUplitem() *CostUpdateOne {
	cuo.mutation.ClearUplitem()
	return cuo
}

// ClearWorkorder clears the "workorder" edge to type WorkOrder.
func (cuo *CostUpdateOne) ClearWorkorder() *CostUpdateOne {
	cuo.mutation.ClearWorkorder()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *CostUpdateOne) Save(ctx context.Context) (*Cost, error) {
	var (
		err  error
		node *Cost
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CostUpdateOne) SaveX(ctx context.Context) *Cost {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CostUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CostUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CostUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := cost.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

func (cuo *CostUpdateOne) sqlSave(ctx context.Context) (_node *Cost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cost.Table,
			Columns: cost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cost.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Cost.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cost.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.Item(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cost.FieldItem,
		})
	}
	if value, ok := cuo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldUnit,
		})
	}
	if value, ok := cuo.mutation.AddedUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldUnit,
		})
	}
	if value, ok := cuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldPrice,
		})
	}
	if value, ok := cuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldPrice,
		})
	}
	if value, ok := cuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cost.FieldQuantity,
		})
	}
	if value, ok := cuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cost.FieldQuantity,
		})
	}
	if value, ok := cuo.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldTotal,
		})
	}
	if value, ok := cuo.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldTotal,
		})
	}
	if cuo.mutation.UplitemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.UplitemTable,
			Columns: []string{cost.UplitemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uplitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UplitemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.UplitemTable,
			Columns: []string{cost.UplitemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uplitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WorkorderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.WorkorderTable,
			Columns: []string{cost.WorkorderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WorkorderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.WorkorderTable,
			Columns: []string{cost.WorkorderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cost{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cost.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
