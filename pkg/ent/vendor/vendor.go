// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package vendor

import (
	"time"

	"github.com/facebook/ent"
)

const (
	// Label holds the string label denoting the vendor type in the database.
	Label = "vendor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"

	// EdgeVendorFk holds the string denoting the vendor_fk edge name in mutations.
	EdgeVendorFk = "vendor_fk"
	// EdgeVendorsRecomendations holds the string denoting the vendors_recomendations edge name in mutations.
	EdgeVendorsRecomendations = "vendors_recomendations"
	// EdgeResourceSpecification holds the string denoting the resource_specification edge name in mutations.
	EdgeResourceSpecification = "resource_specification"
	// EdgeVendorRs holds the string denoting the vendor_rs edge name in mutations.
	EdgeVendorRs = "vendor_rs"

	// Table holds the table name of the vendor in the database.
	Table = "vendors"
	// VendorFkTable is the table the holds the vendor_fk relation/edge.
	VendorFkTable = "counters"
	// VendorFkInverseTable is the table name for the Counter entity.
	// It exists in this package in order to avoid circular dependency with the "counter" package.
	VendorFkInverseTable = "counters"
	// VendorFkColumn is the table column denoting the vendor_fk relation/edge.
	VendorFkColumn = "vendor_vendor_fk"
	// VendorsRecomendationsTable is the table the holds the vendors_recomendations relation/edge.
	VendorsRecomendationsTable = "recommendations"
	// VendorsRecomendationsInverseTable is the table name for the Recommendations entity.
	// It exists in this package in order to avoid circular dependency with the "recommendations" package.
	VendorsRecomendationsInverseTable = "recommendations"
	// VendorsRecomendationsColumn is the table column denoting the vendors_recomendations relation/edge.
	VendorsRecomendationsColumn = "vendor_vendors_recomendations"
	// ResourceSpecificationTable is the table the holds the resource_specification relation/edge.
	ResourceSpecificationTable = "vendors"
	// ResourceSpecificationInverseTable is the table name for the ResourceSpecification entity.
	// It exists in this package in order to avoid circular dependency with the "resourcespecification" package.
	ResourceSpecificationInverseTable = "resource_specifications"
	// ResourceSpecificationColumn is the table column denoting the resource_specification relation/edge.
	ResourceSpecificationColumn = "resource_specification_resource_specification_vendor"
	// VendorRsTable is the table the holds the vendor_rs relation/edge.
	VendorRsTable = "resource_specifications"
	// VendorRsInverseTable is the table name for the ResourceSpecification entity.
	// It exists in this package in order to avoid circular dependency with the "resourcespecification" package.
	VendorRsInverseTable = "resource_specifications"
	// VendorRsColumn is the table column denoting the vendor_rs relation/edge.
	VendorRsColumn = "vendor_vendor_rs"
)

// Columns holds all SQL columns for vendor fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Vendor type.
var ForeignKeys = []string{
	"resource_specification_resource_specification_vendor",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/facebookincubator/symphony/pkg/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the create_time field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the update_time field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
