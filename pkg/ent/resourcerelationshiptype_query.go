// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/permissionspolicy"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationship"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationshiptype"
)

// ResourceRelationshipTypeQuery is the builder for querying ResourceRelationshipType entities.
type ResourceRelationshipTypeQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ResourceRelationshipType
	// eager-loading edges.
	withResourceRelationshipFk *ResourceRelationshipQuery
	withPolicies               *PermissionsPolicyQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rrtq *ResourceRelationshipTypeQuery) Where(ps ...predicate.ResourceRelationshipType) *ResourceRelationshipTypeQuery {
	rrtq.predicates = append(rrtq.predicates, ps...)
	return rrtq
}

// Limit adds a limit step to the query.
func (rrtq *ResourceRelationshipTypeQuery) Limit(limit int) *ResourceRelationshipTypeQuery {
	rrtq.limit = &limit
	return rrtq
}

// Offset adds an offset step to the query.
func (rrtq *ResourceRelationshipTypeQuery) Offset(offset int) *ResourceRelationshipTypeQuery {
	rrtq.offset = &offset
	return rrtq
}

// Order adds an order step to the query.
func (rrtq *ResourceRelationshipTypeQuery) Order(o ...OrderFunc) *ResourceRelationshipTypeQuery {
	rrtq.order = append(rrtq.order, o...)
	return rrtq
}

// QueryResourceRelationshipFk chains the current query on the resource_relationship_fk edge.
func (rrtq *ResourceRelationshipTypeQuery) QueryResourceRelationshipFk() *ResourceRelationshipQuery {
	query := &ResourceRelationshipQuery{config: rrtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrtq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcerelationshiptype.Table, resourcerelationshiptype.FieldID, selector),
			sqlgraph.To(resourcerelationship.Table, resourcerelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcerelationshiptype.ResourceRelationshipFkTable, resourcerelationshiptype.ResourceRelationshipFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPolicies chains the current query on the policies edge.
func (rrtq *ResourceRelationshipTypeQuery) QueryPolicies() *PermissionsPolicyQuery {
	query := &PermissionsPolicyQuery{config: rrtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrtq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcerelationshiptype.Table, resourcerelationshiptype.FieldID, selector),
			sqlgraph.To(permissionspolicy.Table, permissionspolicy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcerelationshiptype.PoliciesTable, resourcerelationshiptype.PoliciesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResourceRelationshipType entity in the query. Returns *NotFoundError when no resourcerelationshiptype was found.
func (rrtq *ResourceRelationshipTypeQuery) First(ctx context.Context) (*ResourceRelationshipType, error) {
	nodes, err := rrtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resourcerelationshiptype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rrtq *ResourceRelationshipTypeQuery) FirstX(ctx context.Context) *ResourceRelationshipType {
	node, err := rrtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ResourceRelationshipType id in the query. Returns *NotFoundError when no id was found.
func (rrtq *ResourceRelationshipTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rrtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resourcerelationshiptype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rrtq *ResourceRelationshipTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := rrtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ResourceRelationshipType entity in the query, returns an error if not exactly one entity was returned.
func (rrtq *ResourceRelationshipTypeQuery) Only(ctx context.Context) (*ResourceRelationshipType, error) {
	nodes, err := rrtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resourcerelationshiptype.Label}
	default:
		return nil, &NotSingularError{resourcerelationshiptype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rrtq *ResourceRelationshipTypeQuery) OnlyX(ctx context.Context) *ResourceRelationshipType {
	node, err := rrtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ResourceRelationshipType id in the query, returns an error if not exactly one id was returned.
func (rrtq *ResourceRelationshipTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rrtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resourcerelationshiptype.Label}
	default:
		err = &NotSingularError{resourcerelationshiptype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rrtq *ResourceRelationshipTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := rrtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResourceRelationshipTypes.
func (rrtq *ResourceRelationshipTypeQuery) All(ctx context.Context) ([]*ResourceRelationshipType, error) {
	if err := rrtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rrtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rrtq *ResourceRelationshipTypeQuery) AllX(ctx context.Context) []*ResourceRelationshipType {
	nodes, err := rrtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ResourceRelationshipType ids.
func (rrtq *ResourceRelationshipTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rrtq.Select(resourcerelationshiptype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rrtq *ResourceRelationshipTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := rrtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rrtq *ResourceRelationshipTypeQuery) Count(ctx context.Context) (int, error) {
	if err := rrtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rrtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rrtq *ResourceRelationshipTypeQuery) CountX(ctx context.Context) int {
	count, err := rrtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rrtq *ResourceRelationshipTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := rrtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rrtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rrtq *ResourceRelationshipTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := rrtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rrtq *ResourceRelationshipTypeQuery) Clone() *ResourceRelationshipTypeQuery {
	if rrtq == nil {
		return nil
	}
	return &ResourceRelationshipTypeQuery{
		config:                     rrtq.config,
		limit:                      rrtq.limit,
		offset:                     rrtq.offset,
		order:                      append([]OrderFunc{}, rrtq.order...),
		unique:                     append([]string{}, rrtq.unique...),
		predicates:                 append([]predicate.ResourceRelationshipType{}, rrtq.predicates...),
		withResourceRelationshipFk: rrtq.withResourceRelationshipFk.Clone(),
		withPolicies:               rrtq.withPolicies.Clone(),
		// clone intermediate query.
		sql:  rrtq.sql.Clone(),
		path: rrtq.path,
	}
}

//  WithResourceRelationshipFk tells the query-builder to eager-loads the nodes that are connected to
// the "resource_relationship_fk" edge. The optional arguments used to configure the query builder of the edge.
func (rrtq *ResourceRelationshipTypeQuery) WithResourceRelationshipFk(opts ...func(*ResourceRelationshipQuery)) *ResourceRelationshipTypeQuery {
	query := &ResourceRelationshipQuery{config: rrtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rrtq.withResourceRelationshipFk = query
	return rrtq
}

//  WithPolicies tells the query-builder to eager-loads the nodes that are connected to
// the "policies" edge. The optional arguments used to configure the query builder of the edge.
func (rrtq *ResourceRelationshipTypeQuery) WithPolicies(opts ...func(*PermissionsPolicyQuery)) *ResourceRelationshipTypeQuery {
	query := &PermissionsPolicyQuery{config: rrtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rrtq.withPolicies = query
	return rrtq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResourceRelationshipType.Query().
//		GroupBy(resourcerelationshiptype.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rrtq *ResourceRelationshipTypeQuery) GroupBy(field string, fields ...string) *ResourceRelationshipTypeGroupBy {
	group := &ResourceRelationshipTypeGroupBy{config: rrtq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rrtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rrtq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ResourceRelationshipType.Query().
//		Select(resourcerelationshiptype.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rrtq *ResourceRelationshipTypeQuery) Select(field string, fields ...string) *ResourceRelationshipTypeSelect {
	selector := &ResourceRelationshipTypeSelect{config: rrtq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rrtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rrtq.sqlQuery(), nil
	}
	return selector
}

func (rrtq *ResourceRelationshipTypeQuery) prepareQuery(ctx context.Context) error {
	if rrtq.path != nil {
		prev, err := rrtq.path(ctx)
		if err != nil {
			return err
		}
		rrtq.sql = prev
	}
	if err := resourcerelationshiptype.Policy.EvalQuery(ctx, rrtq); err != nil {
		return err
	}
	return nil
}

func (rrtq *ResourceRelationshipTypeQuery) sqlAll(ctx context.Context) ([]*ResourceRelationshipType, error) {
	var (
		nodes       = []*ResourceRelationshipType{}
		_spec       = rrtq.querySpec()
		loadedTypes = [2]bool{
			rrtq.withResourceRelationshipFk != nil,
			rrtq.withPolicies != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &ResourceRelationshipType{config: rrtq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rrtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rrtq.withResourceRelationshipFk; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ResourceRelationshipType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ResourceRelationshipFk = []*ResourceRelationship{}
		}
		query.withFKs = true
		query.Where(predicate.ResourceRelationship(func(s *sql.Selector) {
			s.Where(sql.InValues(resourcerelationshiptype.ResourceRelationshipFkColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.resource_relationship_type_resource_relationship_fk
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "resource_relationship_type_resource_relationship_fk" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_relationship_type_resource_relationship_fk" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ResourceRelationshipFk = append(node.Edges.ResourceRelationshipFk, n)
		}
	}

	if query := rrtq.withPolicies; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ResourceRelationshipType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Policies = []*PermissionsPolicy{}
		}
		query.withFKs = true
		query.Where(predicate.PermissionsPolicy(func(s *sql.Selector) {
			s.Where(sql.InValues(resourcerelationshiptype.PoliciesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.resource_relationship_type_policies
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "resource_relationship_type_policies" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_relationship_type_policies" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Policies = append(node.Edges.Policies, n)
		}
	}

	return nodes, nil
}

func (rrtq *ResourceRelationshipTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rrtq.querySpec()
	return sqlgraph.CountNodes(ctx, rrtq.driver, _spec)
}

func (rrtq *ResourceRelationshipTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rrtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rrtq *ResourceRelationshipTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcerelationshiptype.Table,
			Columns: resourcerelationshiptype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcerelationshiptype.FieldID,
			},
		},
		From:   rrtq.sql,
		Unique: true,
	}
	if ps := rrtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rrtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rrtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rrtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, resourcerelationshiptype.ValidColumn)
			}
		}
	}
	return _spec
}

func (rrtq *ResourceRelationshipTypeQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rrtq.driver.Dialect())
	t1 := builder.Table(resourcerelationshiptype.Table)
	selector := builder.Select(t1.Columns(resourcerelationshiptype.Columns...)...).From(t1)
	if rrtq.sql != nil {
		selector = rrtq.sql
		selector.Select(selector.Columns(resourcerelationshiptype.Columns...)...)
	}
	for _, p := range rrtq.predicates {
		p(selector)
	}
	for _, p := range rrtq.order {
		p(selector, resourcerelationshiptype.ValidColumn)
	}
	if offset := rrtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rrtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ResourceRelationshipTypeGroupBy is the builder for group-by ResourceRelationshipType entities.
type ResourceRelationshipTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rrtgb *ResourceRelationshipTypeGroupBy) Aggregate(fns ...AggregateFunc) *ResourceRelationshipTypeGroupBy {
	rrtgb.fns = append(rrtgb.fns, fns...)
	return rrtgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rrtgb *ResourceRelationshipTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rrtgb.path(ctx)
	if err != nil {
		return err
	}
	rrtgb.sql = query
	return rrtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rrtgb *ResourceRelationshipTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rrtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rrtgb *ResourceRelationshipTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rrtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rrtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rrtgb *ResourceRelationshipTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := rrtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rrtgb *ResourceRelationshipTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rrtgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationshiptype.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rrtgb *ResourceRelationshipTypeGroupBy) StringX(ctx context.Context) string {
	v, err := rrtgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rrtgb *ResourceRelationshipTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rrtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rrtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rrtgb *ResourceRelationshipTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := rrtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rrtgb *ResourceRelationshipTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rrtgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationshiptype.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rrtgb *ResourceRelationshipTypeGroupBy) IntX(ctx context.Context) int {
	v, err := rrtgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rrtgb *ResourceRelationshipTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rrtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rrtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rrtgb *ResourceRelationshipTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rrtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rrtgb *ResourceRelationshipTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rrtgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationshiptype.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rrtgb *ResourceRelationshipTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rrtgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rrtgb *ResourceRelationshipTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rrtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rrtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rrtgb *ResourceRelationshipTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rrtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rrtgb *ResourceRelationshipTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rrtgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationshiptype.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rrtgb *ResourceRelationshipTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := rrtgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rrtgb *ResourceRelationshipTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rrtgb.fields {
		if !resourcerelationshiptype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rrtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rrtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rrtgb *ResourceRelationshipTypeGroupBy) sqlQuery() *sql.Selector {
	selector := rrtgb.sql
	columns := make([]string, 0, len(rrtgb.fields)+len(rrtgb.fns))
	columns = append(columns, rrtgb.fields...)
	for _, fn := range rrtgb.fns {
		columns = append(columns, fn(selector, resourcerelationshiptype.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(rrtgb.fields...)
}

// ResourceRelationshipTypeSelect is the builder for select fields of ResourceRelationshipType entities.
type ResourceRelationshipTypeSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rrts *ResourceRelationshipTypeSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rrts.path(ctx)
	if err != nil {
		return err
	}
	rrts.sql = query
	return rrts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rrts *ResourceRelationshipTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rrts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rrts *ResourceRelationshipTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rrts.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rrts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rrts *ResourceRelationshipTypeSelect) StringsX(ctx context.Context) []string {
	v, err := rrts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rrts *ResourceRelationshipTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rrts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationshiptype.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rrts *ResourceRelationshipTypeSelect) StringX(ctx context.Context) string {
	v, err := rrts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rrts *ResourceRelationshipTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rrts.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rrts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rrts *ResourceRelationshipTypeSelect) IntsX(ctx context.Context) []int {
	v, err := rrts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rrts *ResourceRelationshipTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rrts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationshiptype.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rrts *ResourceRelationshipTypeSelect) IntX(ctx context.Context) int {
	v, err := rrts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rrts *ResourceRelationshipTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rrts.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rrts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rrts *ResourceRelationshipTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rrts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rrts *ResourceRelationshipTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rrts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationshiptype.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rrts *ResourceRelationshipTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := rrts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rrts *ResourceRelationshipTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rrts.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rrts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rrts *ResourceRelationshipTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := rrts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rrts *ResourceRelationshipTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rrts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationshiptype.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rrts *ResourceRelationshipTypeSelect) BoolX(ctx context.Context) bool {
	v, err := rrts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rrts *ResourceRelationshipTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rrts.fields {
		if !resourcerelationshiptype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := rrts.sqlQuery().Query()
	if err := rrts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rrts *ResourceRelationshipTypeSelect) sqlQuery() sql.Querier {
	selector := rrts.sql
	selector.Select(selector.Columns(rrts.fields...)...)
	return selector
}
