// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetyperelationship"
)

// ResourceTypeRelationship is the model entity for the ResourceTypeRelationship schema.
type ResourceTypeRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ResourceRelationshipType holds the value of the "ResourceRelationshipType" field.
	ResourceRelationshipType resourcetyperelationship.ResourceRelationshipType `json:"ResourceRelationshipType,omitempty"`
	// ResourceRelationshipMultiplicity holds the value of the "ResourceRelationshipMultiplicity" field.
	ResourceRelationshipMultiplicity resourcetyperelationship.ResourceRelationshipMultiplicity `json:"ResourceRelationshipMultiplicity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceTypeRelationshipQuery when eager-loading is set.
	Edges                                        ResourceTypeRelationshipEdges `json:"edges"`
	location_type_resource_relationship_location *int
	resource_type_resource_relationship_a        *int
	resource_type_resource_relationship_b        *int
}

// ResourceTypeRelationshipEdges holds the relations/edges for other nodes in the graph.
type ResourceTypeRelationshipEdges struct {
	// Resourcetypea holds the value of the resourcetypea edge.
	Resourcetypea *ResourceType
	// Resourcetypeb holds the value of the resourcetypeb edge.
	Resourcetypeb *ResourceType
	// LocationType holds the value of the locationType edge.
	LocationType *LocationType
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ResourcetypeaOrErr returns the Resourcetypea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceTypeRelationshipEdges) ResourcetypeaOrErr() (*ResourceType, error) {
	if e.loadedTypes[0] {
		if e.Resourcetypea == nil {
			// The edge resourcetypea was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcetype.Label}
		}
		return e.Resourcetypea, nil
	}
	return nil, &NotLoadedError{edge: "resourcetypea"}
}

// ResourcetypebOrErr returns the Resourcetypeb value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceTypeRelationshipEdges) ResourcetypebOrErr() (*ResourceType, error) {
	if e.loadedTypes[1] {
		if e.Resourcetypeb == nil {
			// The edge resourcetypeb was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcetype.Label}
		}
		return e.Resourcetypeb, nil
	}
	return nil, &NotLoadedError{edge: "resourcetypeb"}
}

// LocationTypeOrErr returns the LocationType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceTypeRelationshipEdges) LocationTypeOrErr() (*LocationType, error) {
	if e.loadedTypes[2] {
		if e.LocationType == nil {
			// The edge locationType was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: locationtype.Label}
		}
		return e.LocationType, nil
	}
	return nil, &NotLoadedError{edge: "locationType"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceTypeRelationship) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // ResourceRelationshipType
		&sql.NullString{}, // ResourceRelationshipMultiplicity
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ResourceTypeRelationship) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // location_type_resource_relationship_location
		&sql.NullInt64{}, // resource_type_resource_relationship_a
		&sql.NullInt64{}, // resource_type_resource_relationship_b
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceTypeRelationship fields.
func (rtr *ResourceTypeRelationship) assignValues(values ...interface{}) error {
	if m, n := len(values), len(resourcetyperelationship.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rtr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		rtr.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		rtr.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ResourceRelationshipType", values[2])
	} else if value.Valid {
		rtr.ResourceRelationshipType = resourcetyperelationship.ResourceRelationshipType(value.String)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ResourceRelationshipMultiplicity", values[3])
	} else if value.Valid {
		rtr.ResourceRelationshipMultiplicity = resourcetyperelationship.ResourceRelationshipMultiplicity(value.String)
	}
	values = values[4:]
	if len(values) == len(resourcetyperelationship.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field location_type_resource_relationship_location", value)
		} else if value.Valid {
			rtr.location_type_resource_relationship_location = new(int)
			*rtr.location_type_resource_relationship_location = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_type_resource_relationship_a", value)
		} else if value.Valid {
			rtr.resource_type_resource_relationship_a = new(int)
			*rtr.resource_type_resource_relationship_a = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_type_resource_relationship_b", value)
		} else if value.Valid {
			rtr.resource_type_resource_relationship_b = new(int)
			*rtr.resource_type_resource_relationship_b = int(value.Int64)
		}
	}
	return nil
}

// QueryResourcetypea queries the resourcetypea edge of the ResourceTypeRelationship.
func (rtr *ResourceTypeRelationship) QueryResourcetypea() *ResourceTypeQuery {
	return (&ResourceTypeRelationshipClient{config: rtr.config}).QueryResourcetypea(rtr)
}

// QueryResourcetypeb queries the resourcetypeb edge of the ResourceTypeRelationship.
func (rtr *ResourceTypeRelationship) QueryResourcetypeb() *ResourceTypeQuery {
	return (&ResourceTypeRelationshipClient{config: rtr.config}).QueryResourcetypeb(rtr)
}

// QueryLocationType queries the locationType edge of the ResourceTypeRelationship.
func (rtr *ResourceTypeRelationship) QueryLocationType() *LocationTypeQuery {
	return (&ResourceTypeRelationshipClient{config: rtr.config}).QueryLocationType(rtr)
}

// Update returns a builder for updating this ResourceTypeRelationship.
// Note that, you need to call ResourceTypeRelationship.Unwrap() before calling this method, if this ResourceTypeRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (rtr *ResourceTypeRelationship) Update() *ResourceTypeRelationshipUpdateOne {
	return (&ResourceTypeRelationshipClient{config: rtr.config}).UpdateOne(rtr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rtr *ResourceTypeRelationship) Unwrap() *ResourceTypeRelationship {
	tx, ok := rtr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourceTypeRelationship is not a transactional entity")
	}
	rtr.config.driver = tx.drv
	return rtr
}

// String implements the fmt.Stringer.
func (rtr *ResourceTypeRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceTypeRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v", rtr.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(rtr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(rtr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ResourceRelationshipType=")
	builder.WriteString(fmt.Sprintf("%v", rtr.ResourceRelationshipType))
	builder.WriteString(", ResourceRelationshipMultiplicity=")
	builder.WriteString(fmt.Sprintf("%v", rtr.ResourceRelationshipMultiplicity))
	builder.WriteByte(')')
	return builder.String()
}

// ResourceTypeRelationships is a parsable slice of ResourceTypeRelationship.
type ResourceTypeRelationships []*ResourceTypeRelationship

func (rtr ResourceTypeRelationships) config(cfg config) {
	for _i := range rtr {
		rtr[_i].config = cfg
	}
}
