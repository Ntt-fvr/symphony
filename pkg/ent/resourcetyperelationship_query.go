// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetyperelationship"
)

// ResourceTypeRelationshipQuery is the builder for querying ResourceTypeRelationship entities.
type ResourceTypeRelationshipQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ResourceTypeRelationship
	// eager-loading edges.
	withResourcetypea *ResourceTypeQuery
	withResourcetypeb *ResourceTypeQuery
	withLocationType  *LocationTypeQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rtrq *ResourceTypeRelationshipQuery) Where(ps ...predicate.ResourceTypeRelationship) *ResourceTypeRelationshipQuery {
	rtrq.predicates = append(rtrq.predicates, ps...)
	return rtrq
}

// Limit adds a limit step to the query.
func (rtrq *ResourceTypeRelationshipQuery) Limit(limit int) *ResourceTypeRelationshipQuery {
	rtrq.limit = &limit
	return rtrq
}

// Offset adds an offset step to the query.
func (rtrq *ResourceTypeRelationshipQuery) Offset(offset int) *ResourceTypeRelationshipQuery {
	rtrq.offset = &offset
	return rtrq
}

// Order adds an order step to the query.
func (rtrq *ResourceTypeRelationshipQuery) Order(o ...OrderFunc) *ResourceTypeRelationshipQuery {
	rtrq.order = append(rtrq.order, o...)
	return rtrq
}

// QueryResourcetypea chains the current query on the resourcetypea edge.
func (rtrq *ResourceTypeRelationshipQuery) QueryResourcetypea() *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: rtrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcetyperelationship.Table, resourcetyperelationship.FieldID, selector),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcetyperelationship.ResourcetypeaTable, resourcetyperelationship.ResourcetypeaColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResourcetypeb chains the current query on the resourcetypeb edge.
func (rtrq *ResourceTypeRelationshipQuery) QueryResourcetypeb() *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: rtrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcetyperelationship.Table, resourcetyperelationship.FieldID, selector),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcetyperelationship.ResourcetypebTable, resourcetyperelationship.ResourcetypebColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocationType chains the current query on the locationType edge.
func (rtrq *ResourceTypeRelationshipQuery) QueryLocationType() *LocationTypeQuery {
	query := &LocationTypeQuery{config: rtrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcetyperelationship.Table, resourcetyperelationship.FieldID, selector),
			sqlgraph.To(locationtype.Table, locationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcetyperelationship.LocationTypeTable, resourcetyperelationship.LocationTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResourceTypeRelationship entity in the query. Returns *NotFoundError when no resourcetyperelationship was found.
func (rtrq *ResourceTypeRelationshipQuery) First(ctx context.Context) (*ResourceTypeRelationship, error) {
	nodes, err := rtrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resourcetyperelationship.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rtrq *ResourceTypeRelationshipQuery) FirstX(ctx context.Context) *ResourceTypeRelationship {
	node, err := rtrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ResourceTypeRelationship id in the query. Returns *NotFoundError when no id was found.
func (rtrq *ResourceTypeRelationshipQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rtrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resourcetyperelationship.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rtrq *ResourceTypeRelationshipQuery) FirstIDX(ctx context.Context) int {
	id, err := rtrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ResourceTypeRelationship entity in the query, returns an error if not exactly one entity was returned.
func (rtrq *ResourceTypeRelationshipQuery) Only(ctx context.Context) (*ResourceTypeRelationship, error) {
	nodes, err := rtrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resourcetyperelationship.Label}
	default:
		return nil, &NotSingularError{resourcetyperelationship.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rtrq *ResourceTypeRelationshipQuery) OnlyX(ctx context.Context) *ResourceTypeRelationship {
	node, err := rtrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ResourceTypeRelationship id in the query, returns an error if not exactly one id was returned.
func (rtrq *ResourceTypeRelationshipQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rtrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resourcetyperelationship.Label}
	default:
		err = &NotSingularError{resourcetyperelationship.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rtrq *ResourceTypeRelationshipQuery) OnlyIDX(ctx context.Context) int {
	id, err := rtrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResourceTypeRelationships.
func (rtrq *ResourceTypeRelationshipQuery) All(ctx context.Context) ([]*ResourceTypeRelationship, error) {
	if err := rtrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rtrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rtrq *ResourceTypeRelationshipQuery) AllX(ctx context.Context) []*ResourceTypeRelationship {
	nodes, err := rtrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ResourceTypeRelationship ids.
func (rtrq *ResourceTypeRelationshipQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rtrq.Select(resourcetyperelationship.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rtrq *ResourceTypeRelationshipQuery) IDsX(ctx context.Context) []int {
	ids, err := rtrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rtrq *ResourceTypeRelationshipQuery) Count(ctx context.Context) (int, error) {
	if err := rtrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rtrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rtrq *ResourceTypeRelationshipQuery) CountX(ctx context.Context) int {
	count, err := rtrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rtrq *ResourceTypeRelationshipQuery) Exist(ctx context.Context) (bool, error) {
	if err := rtrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rtrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rtrq *ResourceTypeRelationshipQuery) ExistX(ctx context.Context) bool {
	exist, err := rtrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rtrq *ResourceTypeRelationshipQuery) Clone() *ResourceTypeRelationshipQuery {
	if rtrq == nil {
		return nil
	}
	return &ResourceTypeRelationshipQuery{
		config:            rtrq.config,
		limit:             rtrq.limit,
		offset:            rtrq.offset,
		order:             append([]OrderFunc{}, rtrq.order...),
		unique:            append([]string{}, rtrq.unique...),
		predicates:        append([]predicate.ResourceTypeRelationship{}, rtrq.predicates...),
		withResourcetypea: rtrq.withResourcetypea.Clone(),
		withResourcetypeb: rtrq.withResourcetypeb.Clone(),
		withLocationType:  rtrq.withLocationType.Clone(),
		// clone intermediate query.
		sql:  rtrq.sql.Clone(),
		path: rtrq.path,
	}
}

//  WithResourcetypea tells the query-builder to eager-loads the nodes that are connected to
// the "resourcetypea" edge. The optional arguments used to configure the query builder of the edge.
func (rtrq *ResourceTypeRelationshipQuery) WithResourcetypea(opts ...func(*ResourceTypeQuery)) *ResourceTypeRelationshipQuery {
	query := &ResourceTypeQuery{config: rtrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtrq.withResourcetypea = query
	return rtrq
}

//  WithResourcetypeb tells the query-builder to eager-loads the nodes that are connected to
// the "resourcetypeb" edge. The optional arguments used to configure the query builder of the edge.
func (rtrq *ResourceTypeRelationshipQuery) WithResourcetypeb(opts ...func(*ResourceTypeQuery)) *ResourceTypeRelationshipQuery {
	query := &ResourceTypeQuery{config: rtrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtrq.withResourcetypeb = query
	return rtrq
}

//  WithLocationType tells the query-builder to eager-loads the nodes that are connected to
// the "locationType" edge. The optional arguments used to configure the query builder of the edge.
func (rtrq *ResourceTypeRelationshipQuery) WithLocationType(opts ...func(*LocationTypeQuery)) *ResourceTypeRelationshipQuery {
	query := &LocationTypeQuery{config: rtrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtrq.withLocationType = query
	return rtrq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResourceTypeRelationship.Query().
//		GroupBy(resourcetyperelationship.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rtrq *ResourceTypeRelationshipQuery) GroupBy(field string, fields ...string) *ResourceTypeRelationshipGroupBy {
	group := &ResourceTypeRelationshipGroupBy{config: rtrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rtrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rtrq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ResourceTypeRelationship.Query().
//		Select(resourcetyperelationship.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rtrq *ResourceTypeRelationshipQuery) Select(field string, fields ...string) *ResourceTypeRelationshipSelect {
	selector := &ResourceTypeRelationshipSelect{config: rtrq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rtrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rtrq.sqlQuery(), nil
	}
	return selector
}

func (rtrq *ResourceTypeRelationshipQuery) prepareQuery(ctx context.Context) error {
	if rtrq.path != nil {
		prev, err := rtrq.path(ctx)
		if err != nil {
			return err
		}
		rtrq.sql = prev
	}
	if err := resourcetyperelationship.Policy.EvalQuery(ctx, rtrq); err != nil {
		return err
	}
	return nil
}

func (rtrq *ResourceTypeRelationshipQuery) sqlAll(ctx context.Context) ([]*ResourceTypeRelationship, error) {
	var (
		nodes       = []*ResourceTypeRelationship{}
		withFKs     = rtrq.withFKs
		_spec       = rtrq.querySpec()
		loadedTypes = [3]bool{
			rtrq.withResourcetypea != nil,
			rtrq.withResourcetypeb != nil,
			rtrq.withLocationType != nil,
		}
	)
	if rtrq.withResourcetypea != nil || rtrq.withResourcetypeb != nil || rtrq.withLocationType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, resourcetyperelationship.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &ResourceTypeRelationship{config: rtrq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rtrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rtrq.withResourcetypea; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourceTypeRelationship)
		for i := range nodes {
			if fk := nodes[i].resource_type_resource_relationship_a; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_type_resource_relationship_a" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Resourcetypea = n
			}
		}
	}

	if query := rtrq.withResourcetypeb; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourceTypeRelationship)
		for i := range nodes {
			if fk := nodes[i].resource_type_resource_relationship_b; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_type_resource_relationship_b" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Resourcetypeb = n
			}
		}
	}

	if query := rtrq.withLocationType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourceTypeRelationship)
		for i := range nodes {
			if fk := nodes[i].location_type_resource_relationship_location; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(locationtype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "location_type_resource_relationship_location" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.LocationType = n
			}
		}
	}

	return nodes, nil
}

func (rtrq *ResourceTypeRelationshipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rtrq.querySpec()
	return sqlgraph.CountNodes(ctx, rtrq.driver, _spec)
}

func (rtrq *ResourceTypeRelationshipQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rtrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rtrq *ResourceTypeRelationshipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetyperelationship.Table,
			Columns: resourcetyperelationship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetyperelationship.FieldID,
			},
		},
		From:   rtrq.sql,
		Unique: true,
	}
	if ps := rtrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rtrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rtrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rtrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, resourcetyperelationship.ValidColumn)
			}
		}
	}
	return _spec
}

func (rtrq *ResourceTypeRelationshipQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rtrq.driver.Dialect())
	t1 := builder.Table(resourcetyperelationship.Table)
	selector := builder.Select(t1.Columns(resourcetyperelationship.Columns...)...).From(t1)
	if rtrq.sql != nil {
		selector = rtrq.sql
		selector.Select(selector.Columns(resourcetyperelationship.Columns...)...)
	}
	for _, p := range rtrq.predicates {
		p(selector)
	}
	for _, p := range rtrq.order {
		p(selector, resourcetyperelationship.ValidColumn)
	}
	if offset := rtrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rtrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ResourceTypeRelationshipGroupBy is the builder for group-by ResourceTypeRelationship entities.
type ResourceTypeRelationshipGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rtrgb *ResourceTypeRelationshipGroupBy) Aggregate(fns ...AggregateFunc) *ResourceTypeRelationshipGroupBy {
	rtrgb.fns = append(rtrgb.fns, fns...)
	return rtrgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rtrgb *ResourceTypeRelationshipGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rtrgb.path(ctx)
	if err != nil {
		return err
	}
	rtrgb.sql = query
	return rtrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rtrgb *ResourceTypeRelationshipGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rtrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rtrgb *ResourceTypeRelationshipGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rtrgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeRelationshipGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rtrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rtrgb *ResourceTypeRelationshipGroupBy) StringsX(ctx context.Context) []string {
	v, err := rtrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rtrgb *ResourceTypeRelationshipGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rtrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetyperelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeRelationshipGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rtrgb *ResourceTypeRelationshipGroupBy) StringX(ctx context.Context) string {
	v, err := rtrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rtrgb *ResourceTypeRelationshipGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rtrgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeRelationshipGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rtrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rtrgb *ResourceTypeRelationshipGroupBy) IntsX(ctx context.Context) []int {
	v, err := rtrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rtrgb *ResourceTypeRelationshipGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rtrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetyperelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeRelationshipGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rtrgb *ResourceTypeRelationshipGroupBy) IntX(ctx context.Context) int {
	v, err := rtrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rtrgb *ResourceTypeRelationshipGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rtrgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeRelationshipGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rtrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rtrgb *ResourceTypeRelationshipGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rtrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rtrgb *ResourceTypeRelationshipGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rtrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetyperelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeRelationshipGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rtrgb *ResourceTypeRelationshipGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rtrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rtrgb *ResourceTypeRelationshipGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rtrgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeRelationshipGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rtrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rtrgb *ResourceTypeRelationshipGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rtrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rtrgb *ResourceTypeRelationshipGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rtrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetyperelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeRelationshipGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rtrgb *ResourceTypeRelationshipGroupBy) BoolX(ctx context.Context) bool {
	v, err := rtrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rtrgb *ResourceTypeRelationshipGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rtrgb.fields {
		if !resourcetyperelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rtrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rtrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rtrgb *ResourceTypeRelationshipGroupBy) sqlQuery() *sql.Selector {
	selector := rtrgb.sql
	columns := make([]string, 0, len(rtrgb.fields)+len(rtrgb.fns))
	columns = append(columns, rtrgb.fields...)
	for _, fn := range rtrgb.fns {
		columns = append(columns, fn(selector, resourcetyperelationship.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(rtrgb.fields...)
}

// ResourceTypeRelationshipSelect is the builder for select fields of ResourceTypeRelationship entities.
type ResourceTypeRelationshipSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rtrs *ResourceTypeRelationshipSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rtrs.path(ctx)
	if err != nil {
		return err
	}
	rtrs.sql = query
	return rtrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rtrs *ResourceTypeRelationshipSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rtrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rtrs *ResourceTypeRelationshipSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rtrs.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeRelationshipSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rtrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rtrs *ResourceTypeRelationshipSelect) StringsX(ctx context.Context) []string {
	v, err := rtrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rtrs *ResourceTypeRelationshipSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rtrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetyperelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeRelationshipSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rtrs *ResourceTypeRelationshipSelect) StringX(ctx context.Context) string {
	v, err := rtrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rtrs *ResourceTypeRelationshipSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rtrs.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeRelationshipSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rtrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rtrs *ResourceTypeRelationshipSelect) IntsX(ctx context.Context) []int {
	v, err := rtrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rtrs *ResourceTypeRelationshipSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rtrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetyperelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeRelationshipSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rtrs *ResourceTypeRelationshipSelect) IntX(ctx context.Context) int {
	v, err := rtrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rtrs *ResourceTypeRelationshipSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rtrs.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeRelationshipSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rtrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rtrs *ResourceTypeRelationshipSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rtrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rtrs *ResourceTypeRelationshipSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rtrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetyperelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeRelationshipSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rtrs *ResourceTypeRelationshipSelect) Float64X(ctx context.Context) float64 {
	v, err := rtrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rtrs *ResourceTypeRelationshipSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rtrs.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeRelationshipSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rtrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rtrs *ResourceTypeRelationshipSelect) BoolsX(ctx context.Context) []bool {
	v, err := rtrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rtrs *ResourceTypeRelationshipSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rtrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetyperelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeRelationshipSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rtrs *ResourceTypeRelationshipSelect) BoolX(ctx context.Context) bool {
	v, err := rtrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rtrs *ResourceTypeRelationshipSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rtrs.fields {
		if !resourcetyperelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := rtrs.sqlQuery().Query()
	if err := rtrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rtrs *ResourceTypeRelationshipSelect) sqlQuery() sql.Querier {
	selector := rtrs.sql
	selector.Select(selector.Columns(rtrs.fields...)...)
	return selector
}
