// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/propertycategory"
	"github.com/facebookincubator/symphony/pkg/ent/resourcepropertytype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
)

// ResourcePropertyTypeUpdate is the builder for updating ResourcePropertyType entities.
type ResourcePropertyTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ResourcePropertyTypeMutation
}

// Where adds a new predicate for the builder.
func (rptu *ResourcePropertyTypeUpdate) Where(ps ...predicate.ResourcePropertyType) *ResourcePropertyTypeUpdate {
	rptu.mutation.predicates = append(rptu.mutation.predicates, ps...)
	return rptu
}

// SetType sets the type field.
func (rptu *ResourcePropertyTypeUpdate) SetType(r resourcepropertytype.Type) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetType(r)
	return rptu
}

// SetName sets the name field.
func (rptu *ResourcePropertyTypeUpdate) SetName(s string) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetName(s)
	return rptu
}

// SetExternalID sets the external_id field.
func (rptu *ResourcePropertyTypeUpdate) SetExternalID(s string) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetExternalID(s)
	return rptu
}

// SetNillableExternalID sets the external_id field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableExternalID(s *string) *ResourcePropertyTypeUpdate {
	if s != nil {
		rptu.SetExternalID(*s)
	}
	return rptu
}

// ClearExternalID clears the value of external_id.
func (rptu *ResourcePropertyTypeUpdate) ClearExternalID() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearExternalID()
	return rptu
}

// SetIndex sets the index field.
func (rptu *ResourcePropertyTypeUpdate) SetIndex(i int) *ResourcePropertyTypeUpdate {
	rptu.mutation.ResetIndex()
	rptu.mutation.SetIndex(i)
	return rptu
}

// SetNillableIndex sets the index field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableIndex(i *int) *ResourcePropertyTypeUpdate {
	if i != nil {
		rptu.SetIndex(*i)
	}
	return rptu
}

// AddIndex adds i to index.
func (rptu *ResourcePropertyTypeUpdate) AddIndex(i int) *ResourcePropertyTypeUpdate {
	rptu.mutation.AddIndex(i)
	return rptu
}

// ClearIndex clears the value of index.
func (rptu *ResourcePropertyTypeUpdate) ClearIndex() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearIndex()
	return rptu
}

// SetCategory sets the category field.
func (rptu *ResourcePropertyTypeUpdate) SetCategory(s string) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetCategory(s)
	return rptu
}

// SetNillableCategory sets the category field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableCategory(s *string) *ResourcePropertyTypeUpdate {
	if s != nil {
		rptu.SetCategory(*s)
	}
	return rptu
}

// ClearCategory clears the value of category.
func (rptu *ResourcePropertyTypeUpdate) ClearCategory() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearCategory()
	return rptu
}

// SetIntVal sets the int_val field.
func (rptu *ResourcePropertyTypeUpdate) SetIntVal(i int) *ResourcePropertyTypeUpdate {
	rptu.mutation.ResetIntVal()
	rptu.mutation.SetIntVal(i)
	return rptu
}

// SetNillableIntVal sets the int_val field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableIntVal(i *int) *ResourcePropertyTypeUpdate {
	if i != nil {
		rptu.SetIntVal(*i)
	}
	return rptu
}

// AddIntVal adds i to int_val.
func (rptu *ResourcePropertyTypeUpdate) AddIntVal(i int) *ResourcePropertyTypeUpdate {
	rptu.mutation.AddIntVal(i)
	return rptu
}

// ClearIntVal clears the value of int_val.
func (rptu *ResourcePropertyTypeUpdate) ClearIntVal() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearIntVal()
	return rptu
}

// SetBoolVal sets the bool_val field.
func (rptu *ResourcePropertyTypeUpdate) SetBoolVal(b bool) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetBoolVal(b)
	return rptu
}

// SetNillableBoolVal sets the bool_val field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableBoolVal(b *bool) *ResourcePropertyTypeUpdate {
	if b != nil {
		rptu.SetBoolVal(*b)
	}
	return rptu
}

// ClearBoolVal clears the value of bool_val.
func (rptu *ResourcePropertyTypeUpdate) ClearBoolVal() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearBoolVal()
	return rptu
}

// SetFloatVal sets the float_val field.
func (rptu *ResourcePropertyTypeUpdate) SetFloatVal(f float64) *ResourcePropertyTypeUpdate {
	rptu.mutation.ResetFloatVal()
	rptu.mutation.SetFloatVal(f)
	return rptu
}

// SetNillableFloatVal sets the float_val field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableFloatVal(f *float64) *ResourcePropertyTypeUpdate {
	if f != nil {
		rptu.SetFloatVal(*f)
	}
	return rptu
}

// AddFloatVal adds f to float_val.
func (rptu *ResourcePropertyTypeUpdate) AddFloatVal(f float64) *ResourcePropertyTypeUpdate {
	rptu.mutation.AddFloatVal(f)
	return rptu
}

// ClearFloatVal clears the value of float_val.
func (rptu *ResourcePropertyTypeUpdate) ClearFloatVal() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearFloatVal()
	return rptu
}

// SetLatitudeVal sets the latitude_val field.
func (rptu *ResourcePropertyTypeUpdate) SetLatitudeVal(f float64) *ResourcePropertyTypeUpdate {
	rptu.mutation.ResetLatitudeVal()
	rptu.mutation.SetLatitudeVal(f)
	return rptu
}

// SetNillableLatitudeVal sets the latitude_val field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableLatitudeVal(f *float64) *ResourcePropertyTypeUpdate {
	if f != nil {
		rptu.SetLatitudeVal(*f)
	}
	return rptu
}

// AddLatitudeVal adds f to latitude_val.
func (rptu *ResourcePropertyTypeUpdate) AddLatitudeVal(f float64) *ResourcePropertyTypeUpdate {
	rptu.mutation.AddLatitudeVal(f)
	return rptu
}

// ClearLatitudeVal clears the value of latitude_val.
func (rptu *ResourcePropertyTypeUpdate) ClearLatitudeVal() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearLatitudeVal()
	return rptu
}

// SetLongitudeVal sets the longitude_val field.
func (rptu *ResourcePropertyTypeUpdate) SetLongitudeVal(f float64) *ResourcePropertyTypeUpdate {
	rptu.mutation.ResetLongitudeVal()
	rptu.mutation.SetLongitudeVal(f)
	return rptu
}

// SetNillableLongitudeVal sets the longitude_val field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableLongitudeVal(f *float64) *ResourcePropertyTypeUpdate {
	if f != nil {
		rptu.SetLongitudeVal(*f)
	}
	return rptu
}

// AddLongitudeVal adds f to longitude_val.
func (rptu *ResourcePropertyTypeUpdate) AddLongitudeVal(f float64) *ResourcePropertyTypeUpdate {
	rptu.mutation.AddLongitudeVal(f)
	return rptu
}

// ClearLongitudeVal clears the value of longitude_val.
func (rptu *ResourcePropertyTypeUpdate) ClearLongitudeVal() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearLongitudeVal()
	return rptu
}

// SetStringVal sets the string_val field.
func (rptu *ResourcePropertyTypeUpdate) SetStringVal(s string) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetStringVal(s)
	return rptu
}

// SetNillableStringVal sets the string_val field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableStringVal(s *string) *ResourcePropertyTypeUpdate {
	if s != nil {
		rptu.SetStringVal(*s)
	}
	return rptu
}

// ClearStringVal clears the value of string_val.
func (rptu *ResourcePropertyTypeUpdate) ClearStringVal() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearStringVal()
	return rptu
}

// SetRangeFromVal sets the range_from_val field.
func (rptu *ResourcePropertyTypeUpdate) SetRangeFromVal(f float64) *ResourcePropertyTypeUpdate {
	rptu.mutation.ResetRangeFromVal()
	rptu.mutation.SetRangeFromVal(f)
	return rptu
}

// SetNillableRangeFromVal sets the range_from_val field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableRangeFromVal(f *float64) *ResourcePropertyTypeUpdate {
	if f != nil {
		rptu.SetRangeFromVal(*f)
	}
	return rptu
}

// AddRangeFromVal adds f to range_from_val.
func (rptu *ResourcePropertyTypeUpdate) AddRangeFromVal(f float64) *ResourcePropertyTypeUpdate {
	rptu.mutation.AddRangeFromVal(f)
	return rptu
}

// ClearRangeFromVal clears the value of range_from_val.
func (rptu *ResourcePropertyTypeUpdate) ClearRangeFromVal() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearRangeFromVal()
	return rptu
}

// SetRangeToVal sets the range_to_val field.
func (rptu *ResourcePropertyTypeUpdate) SetRangeToVal(f float64) *ResourcePropertyTypeUpdate {
	rptu.mutation.ResetRangeToVal()
	rptu.mutation.SetRangeToVal(f)
	return rptu
}

// SetNillableRangeToVal sets the range_to_val field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableRangeToVal(f *float64) *ResourcePropertyTypeUpdate {
	if f != nil {
		rptu.SetRangeToVal(*f)
	}
	return rptu
}

// AddRangeToVal adds f to range_to_val.
func (rptu *ResourcePropertyTypeUpdate) AddRangeToVal(f float64) *ResourcePropertyTypeUpdate {
	rptu.mutation.AddRangeToVal(f)
	return rptu
}

// ClearRangeToVal clears the value of range_to_val.
func (rptu *ResourcePropertyTypeUpdate) ClearRangeToVal() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearRangeToVal()
	return rptu
}

// SetIsInstanceProperty sets the is_instance_property field.
func (rptu *ResourcePropertyTypeUpdate) SetIsInstanceProperty(b bool) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetIsInstanceProperty(b)
	return rptu
}

// SetNillableIsInstanceProperty sets the is_instance_property field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableIsInstanceProperty(b *bool) *ResourcePropertyTypeUpdate {
	if b != nil {
		rptu.SetIsInstanceProperty(*b)
	}
	return rptu
}

// SetEditable sets the editable field.
func (rptu *ResourcePropertyTypeUpdate) SetEditable(b bool) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetEditable(b)
	return rptu
}

// SetNillableEditable sets the editable field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableEditable(b *bool) *ResourcePropertyTypeUpdate {
	if b != nil {
		rptu.SetEditable(*b)
	}
	return rptu
}

// SetMandatory sets the mandatory field.
func (rptu *ResourcePropertyTypeUpdate) SetMandatory(b bool) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetMandatory(b)
	return rptu
}

// SetNillableMandatory sets the mandatory field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableMandatory(b *bool) *ResourcePropertyTypeUpdate {
	if b != nil {
		rptu.SetMandatory(*b)
	}
	return rptu
}

// SetDeleted sets the deleted field.
func (rptu *ResourcePropertyTypeUpdate) SetDeleted(b bool) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetDeleted(b)
	return rptu
}

// SetNillableDeleted sets the deleted field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableDeleted(b *bool) *ResourcePropertyTypeUpdate {
	if b != nil {
		rptu.SetDeleted(*b)
	}
	return rptu
}

// SetListable sets the listable field.
func (rptu *ResourcePropertyTypeUpdate) SetListable(b bool) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetListable(b)
	return rptu
}

// SetNillableListable sets the listable field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableListable(b *bool) *ResourcePropertyTypeUpdate {
	if b != nil {
		rptu.SetListable(*b)
	}
	return rptu
}

// SetNodeType sets the nodeType field.
func (rptu *ResourcePropertyTypeUpdate) SetNodeType(s string) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetNodeType(s)
	return rptu
}

// SetNillableNodeType sets the nodeType field if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableNodeType(s *string) *ResourcePropertyTypeUpdate {
	if s != nil {
		rptu.SetNodeType(*s)
	}
	return rptu
}

// ClearNodeType clears the value of nodeType.
func (rptu *ResourcePropertyTypeUpdate) ClearNodeType() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearNodeType()
	return rptu
}

// SetResourceSpecificationID sets the resourceSpecification edge to ResourceSpecification by id.
func (rptu *ResourcePropertyTypeUpdate) SetResourceSpecificationID(id int) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetResourceSpecificationID(id)
	return rptu
}

// SetNillableResourceSpecificationID sets the resourceSpecification edge to ResourceSpecification by id if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillableResourceSpecificationID(id *int) *ResourcePropertyTypeUpdate {
	if id != nil {
		rptu = rptu.SetResourceSpecificationID(*id)
	}
	return rptu
}

// SetResourceSpecification sets the resourceSpecification edge to ResourceSpecification.
func (rptu *ResourcePropertyTypeUpdate) SetResourceSpecification(r *ResourceSpecification) *ResourcePropertyTypeUpdate {
	return rptu.SetResourceSpecificationID(r.ID)
}

// SetPropertyCategoryID sets the property_category edge to PropertyCategory by id.
func (rptu *ResourcePropertyTypeUpdate) SetPropertyCategoryID(id int) *ResourcePropertyTypeUpdate {
	rptu.mutation.SetPropertyCategoryID(id)
	return rptu
}

// SetNillablePropertyCategoryID sets the property_category edge to PropertyCategory by id if the given value is not nil.
func (rptu *ResourcePropertyTypeUpdate) SetNillablePropertyCategoryID(id *int) *ResourcePropertyTypeUpdate {
	if id != nil {
		rptu = rptu.SetPropertyCategoryID(*id)
	}
	return rptu
}

// SetPropertyCategory sets the property_category edge to PropertyCategory.
func (rptu *ResourcePropertyTypeUpdate) SetPropertyCategory(p *PropertyCategory) *ResourcePropertyTypeUpdate {
	return rptu.SetPropertyCategoryID(p.ID)
}

// Mutation returns the ResourcePropertyTypeMutation object of the builder.
func (rptu *ResourcePropertyTypeUpdate) Mutation() *ResourcePropertyTypeMutation {
	return rptu.mutation
}

// ClearResourceSpecification clears the "resourceSpecification" edge to type ResourceSpecification.
func (rptu *ResourcePropertyTypeUpdate) ClearResourceSpecification() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearResourceSpecification()
	return rptu
}

// ClearPropertyCategory clears the "property_category" edge to type PropertyCategory.
func (rptu *ResourcePropertyTypeUpdate) ClearPropertyCategory() *ResourcePropertyTypeUpdate {
	rptu.mutation.ClearPropertyCategory()
	return rptu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rptu *ResourcePropertyTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rptu.defaults()
	if len(rptu.hooks) == 0 {
		if err = rptu.check(); err != nil {
			return 0, err
		}
		affected, err = rptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourcePropertyTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rptu.check(); err != nil {
				return 0, err
			}
			rptu.mutation = mutation
			affected, err = rptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rptu.hooks) - 1; i >= 0; i-- {
			mut = rptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rptu *ResourcePropertyTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := rptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rptu *ResourcePropertyTypeUpdate) Exec(ctx context.Context) error {
	_, err := rptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rptu *ResourcePropertyTypeUpdate) ExecX(ctx context.Context) {
	if err := rptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rptu *ResourcePropertyTypeUpdate) defaults() {
	if _, ok := rptu.mutation.UpdateTime(); !ok {
		v := resourcepropertytype.UpdateDefaultUpdateTime()
		rptu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rptu *ResourcePropertyTypeUpdate) check() error {
	if v, ok := rptu.mutation.GetType(); ok {
		if err := resourcepropertytype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (rptu *ResourcePropertyTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcepropertytype.Table,
			Columns: resourcepropertytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcepropertytype.FieldID,
			},
		},
	}
	if ps := rptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rptu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcepropertytype.FieldUpdateTime,
		})
	}
	if value, ok := rptu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcepropertytype.FieldType,
		})
	}
	if value, ok := rptu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldName,
		})
	}
	if value, ok := rptu.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldExternalID,
		})
	}
	if rptu.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcepropertytype.FieldExternalID,
		})
	}
	if value, ok := rptu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepropertytype.FieldIndex,
		})
	}
	if value, ok := rptu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepropertytype.FieldIndex,
		})
	}
	if rptu.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: resourcepropertytype.FieldIndex,
		})
	}
	if value, ok := rptu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldCategory,
		})
	}
	if rptu.mutation.CategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcepropertytype.FieldCategory,
		})
	}
	if value, ok := rptu.mutation.IntVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepropertytype.FieldIntVal,
		})
	}
	if value, ok := rptu.mutation.AddedIntVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepropertytype.FieldIntVal,
		})
	}
	if rptu.mutation.IntValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: resourcepropertytype.FieldIntVal,
		})
	}
	if value, ok := rptu.mutation.BoolVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldBoolVal,
		})
	}
	if rptu.mutation.BoolValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: resourcepropertytype.FieldBoolVal,
		})
	}
	if value, ok := rptu.mutation.FloatVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldFloatVal,
		})
	}
	if value, ok := rptu.mutation.AddedFloatVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldFloatVal,
		})
	}
	if rptu.mutation.FloatValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: resourcepropertytype.FieldFloatVal,
		})
	}
	if value, ok := rptu.mutation.LatitudeVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldLatitudeVal,
		})
	}
	if value, ok := rptu.mutation.AddedLatitudeVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldLatitudeVal,
		})
	}
	if rptu.mutation.LatitudeValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: resourcepropertytype.FieldLatitudeVal,
		})
	}
	if value, ok := rptu.mutation.LongitudeVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldLongitudeVal,
		})
	}
	if value, ok := rptu.mutation.AddedLongitudeVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldLongitudeVal,
		})
	}
	if rptu.mutation.LongitudeValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: resourcepropertytype.FieldLongitudeVal,
		})
	}
	if value, ok := rptu.mutation.StringVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldStringVal,
		})
	}
	if rptu.mutation.StringValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcepropertytype.FieldStringVal,
		})
	}
	if value, ok := rptu.mutation.RangeFromVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldRangeFromVal,
		})
	}
	if value, ok := rptu.mutation.AddedRangeFromVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldRangeFromVal,
		})
	}
	if rptu.mutation.RangeFromValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: resourcepropertytype.FieldRangeFromVal,
		})
	}
	if value, ok := rptu.mutation.RangeToVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldRangeToVal,
		})
	}
	if value, ok := rptu.mutation.AddedRangeToVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldRangeToVal,
		})
	}
	if rptu.mutation.RangeToValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: resourcepropertytype.FieldRangeToVal,
		})
	}
	if value, ok := rptu.mutation.IsInstanceProperty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldIsInstanceProperty,
		})
	}
	if value, ok := rptu.mutation.Editable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldEditable,
		})
	}
	if value, ok := rptu.mutation.Mandatory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldMandatory,
		})
	}
	if value, ok := rptu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldDeleted,
		})
	}
	if value, ok := rptu.mutation.Listable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldListable,
		})
	}
	if value, ok := rptu.mutation.NodeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldNodeType,
		})
	}
	if rptu.mutation.NodeTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcepropertytype.FieldNodeType,
		})
	}
	if rptu.mutation.ResourceSpecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepropertytype.ResourceSpecificationTable,
			Columns: []string{resourcepropertytype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rptu.mutation.ResourceSpecificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepropertytype.ResourceSpecificationTable,
			Columns: []string{resourcepropertytype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rptu.mutation.PropertyCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepropertytype.PropertyCategoryTable,
			Columns: []string{resourcepropertytype.PropertyCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertycategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rptu.mutation.PropertyCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepropertytype.PropertyCategoryTable,
			Columns: []string{resourcepropertytype.PropertyCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertycategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcepropertytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourcePropertyTypeUpdateOne is the builder for updating a single ResourcePropertyType entity.
type ResourcePropertyTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourcePropertyTypeMutation
}

// SetType sets the type field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetType(r resourcepropertytype.Type) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetType(r)
	return rptuo
}

// SetName sets the name field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetName(s string) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetName(s)
	return rptuo
}

// SetExternalID sets the external_id field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetExternalID(s string) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetExternalID(s)
	return rptuo
}

// SetNillableExternalID sets the external_id field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableExternalID(s *string) *ResourcePropertyTypeUpdateOne {
	if s != nil {
		rptuo.SetExternalID(*s)
	}
	return rptuo
}

// ClearExternalID clears the value of external_id.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearExternalID() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearExternalID()
	return rptuo
}

// SetIndex sets the index field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetIndex(i int) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ResetIndex()
	rptuo.mutation.SetIndex(i)
	return rptuo
}

// SetNillableIndex sets the index field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableIndex(i *int) *ResourcePropertyTypeUpdateOne {
	if i != nil {
		rptuo.SetIndex(*i)
	}
	return rptuo
}

// AddIndex adds i to index.
func (rptuo *ResourcePropertyTypeUpdateOne) AddIndex(i int) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.AddIndex(i)
	return rptuo
}

// ClearIndex clears the value of index.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearIndex() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearIndex()
	return rptuo
}

// SetCategory sets the category field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetCategory(s string) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetCategory(s)
	return rptuo
}

// SetNillableCategory sets the category field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableCategory(s *string) *ResourcePropertyTypeUpdateOne {
	if s != nil {
		rptuo.SetCategory(*s)
	}
	return rptuo
}

// ClearCategory clears the value of category.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearCategory() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearCategory()
	return rptuo
}

// SetIntVal sets the int_val field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetIntVal(i int) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ResetIntVal()
	rptuo.mutation.SetIntVal(i)
	return rptuo
}

// SetNillableIntVal sets the int_val field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableIntVal(i *int) *ResourcePropertyTypeUpdateOne {
	if i != nil {
		rptuo.SetIntVal(*i)
	}
	return rptuo
}

// AddIntVal adds i to int_val.
func (rptuo *ResourcePropertyTypeUpdateOne) AddIntVal(i int) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.AddIntVal(i)
	return rptuo
}

// ClearIntVal clears the value of int_val.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearIntVal() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearIntVal()
	return rptuo
}

// SetBoolVal sets the bool_val field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetBoolVal(b bool) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetBoolVal(b)
	return rptuo
}

// SetNillableBoolVal sets the bool_val field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableBoolVal(b *bool) *ResourcePropertyTypeUpdateOne {
	if b != nil {
		rptuo.SetBoolVal(*b)
	}
	return rptuo
}

// ClearBoolVal clears the value of bool_val.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearBoolVal() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearBoolVal()
	return rptuo
}

// SetFloatVal sets the float_val field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetFloatVal(f float64) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ResetFloatVal()
	rptuo.mutation.SetFloatVal(f)
	return rptuo
}

// SetNillableFloatVal sets the float_val field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableFloatVal(f *float64) *ResourcePropertyTypeUpdateOne {
	if f != nil {
		rptuo.SetFloatVal(*f)
	}
	return rptuo
}

// AddFloatVal adds f to float_val.
func (rptuo *ResourcePropertyTypeUpdateOne) AddFloatVal(f float64) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.AddFloatVal(f)
	return rptuo
}

// ClearFloatVal clears the value of float_val.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearFloatVal() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearFloatVal()
	return rptuo
}

// SetLatitudeVal sets the latitude_val field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetLatitudeVal(f float64) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ResetLatitudeVal()
	rptuo.mutation.SetLatitudeVal(f)
	return rptuo
}

// SetNillableLatitudeVal sets the latitude_val field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableLatitudeVal(f *float64) *ResourcePropertyTypeUpdateOne {
	if f != nil {
		rptuo.SetLatitudeVal(*f)
	}
	return rptuo
}

// AddLatitudeVal adds f to latitude_val.
func (rptuo *ResourcePropertyTypeUpdateOne) AddLatitudeVal(f float64) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.AddLatitudeVal(f)
	return rptuo
}

// ClearLatitudeVal clears the value of latitude_val.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearLatitudeVal() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearLatitudeVal()
	return rptuo
}

// SetLongitudeVal sets the longitude_val field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetLongitudeVal(f float64) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ResetLongitudeVal()
	rptuo.mutation.SetLongitudeVal(f)
	return rptuo
}

// SetNillableLongitudeVal sets the longitude_val field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableLongitudeVal(f *float64) *ResourcePropertyTypeUpdateOne {
	if f != nil {
		rptuo.SetLongitudeVal(*f)
	}
	return rptuo
}

// AddLongitudeVal adds f to longitude_val.
func (rptuo *ResourcePropertyTypeUpdateOne) AddLongitudeVal(f float64) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.AddLongitudeVal(f)
	return rptuo
}

// ClearLongitudeVal clears the value of longitude_val.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearLongitudeVal() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearLongitudeVal()
	return rptuo
}

// SetStringVal sets the string_val field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetStringVal(s string) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetStringVal(s)
	return rptuo
}

// SetNillableStringVal sets the string_val field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableStringVal(s *string) *ResourcePropertyTypeUpdateOne {
	if s != nil {
		rptuo.SetStringVal(*s)
	}
	return rptuo
}

// ClearStringVal clears the value of string_val.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearStringVal() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearStringVal()
	return rptuo
}

// SetRangeFromVal sets the range_from_val field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetRangeFromVal(f float64) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ResetRangeFromVal()
	rptuo.mutation.SetRangeFromVal(f)
	return rptuo
}

// SetNillableRangeFromVal sets the range_from_val field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableRangeFromVal(f *float64) *ResourcePropertyTypeUpdateOne {
	if f != nil {
		rptuo.SetRangeFromVal(*f)
	}
	return rptuo
}

// AddRangeFromVal adds f to range_from_val.
func (rptuo *ResourcePropertyTypeUpdateOne) AddRangeFromVal(f float64) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.AddRangeFromVal(f)
	return rptuo
}

// ClearRangeFromVal clears the value of range_from_val.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearRangeFromVal() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearRangeFromVal()
	return rptuo
}

// SetRangeToVal sets the range_to_val field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetRangeToVal(f float64) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ResetRangeToVal()
	rptuo.mutation.SetRangeToVal(f)
	return rptuo
}

// SetNillableRangeToVal sets the range_to_val field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableRangeToVal(f *float64) *ResourcePropertyTypeUpdateOne {
	if f != nil {
		rptuo.SetRangeToVal(*f)
	}
	return rptuo
}

// AddRangeToVal adds f to range_to_val.
func (rptuo *ResourcePropertyTypeUpdateOne) AddRangeToVal(f float64) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.AddRangeToVal(f)
	return rptuo
}

// ClearRangeToVal clears the value of range_to_val.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearRangeToVal() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearRangeToVal()
	return rptuo
}

// SetIsInstanceProperty sets the is_instance_property field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetIsInstanceProperty(b bool) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetIsInstanceProperty(b)
	return rptuo
}

// SetNillableIsInstanceProperty sets the is_instance_property field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableIsInstanceProperty(b *bool) *ResourcePropertyTypeUpdateOne {
	if b != nil {
		rptuo.SetIsInstanceProperty(*b)
	}
	return rptuo
}

// SetEditable sets the editable field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetEditable(b bool) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetEditable(b)
	return rptuo
}

// SetNillableEditable sets the editable field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableEditable(b *bool) *ResourcePropertyTypeUpdateOne {
	if b != nil {
		rptuo.SetEditable(*b)
	}
	return rptuo
}

// SetMandatory sets the mandatory field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetMandatory(b bool) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetMandatory(b)
	return rptuo
}

// SetNillableMandatory sets the mandatory field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableMandatory(b *bool) *ResourcePropertyTypeUpdateOne {
	if b != nil {
		rptuo.SetMandatory(*b)
	}
	return rptuo
}

// SetDeleted sets the deleted field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetDeleted(b bool) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetDeleted(b)
	return rptuo
}

// SetNillableDeleted sets the deleted field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableDeleted(b *bool) *ResourcePropertyTypeUpdateOne {
	if b != nil {
		rptuo.SetDeleted(*b)
	}
	return rptuo
}

// SetListable sets the listable field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetListable(b bool) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetListable(b)
	return rptuo
}

// SetNillableListable sets the listable field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableListable(b *bool) *ResourcePropertyTypeUpdateOne {
	if b != nil {
		rptuo.SetListable(*b)
	}
	return rptuo
}

// SetNodeType sets the nodeType field.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNodeType(s string) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetNodeType(s)
	return rptuo
}

// SetNillableNodeType sets the nodeType field if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableNodeType(s *string) *ResourcePropertyTypeUpdateOne {
	if s != nil {
		rptuo.SetNodeType(*s)
	}
	return rptuo
}

// ClearNodeType clears the value of nodeType.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearNodeType() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearNodeType()
	return rptuo
}

// SetResourceSpecificationID sets the resourceSpecification edge to ResourceSpecification by id.
func (rptuo *ResourcePropertyTypeUpdateOne) SetResourceSpecificationID(id int) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetResourceSpecificationID(id)
	return rptuo
}

// SetNillableResourceSpecificationID sets the resourceSpecification edge to ResourceSpecification by id if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillableResourceSpecificationID(id *int) *ResourcePropertyTypeUpdateOne {
	if id != nil {
		rptuo = rptuo.SetResourceSpecificationID(*id)
	}
	return rptuo
}

// SetResourceSpecification sets the resourceSpecification edge to ResourceSpecification.
func (rptuo *ResourcePropertyTypeUpdateOne) SetResourceSpecification(r *ResourceSpecification) *ResourcePropertyTypeUpdateOne {
	return rptuo.SetResourceSpecificationID(r.ID)
}

// SetPropertyCategoryID sets the property_category edge to PropertyCategory by id.
func (rptuo *ResourcePropertyTypeUpdateOne) SetPropertyCategoryID(id int) *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.SetPropertyCategoryID(id)
	return rptuo
}

// SetNillablePropertyCategoryID sets the property_category edge to PropertyCategory by id if the given value is not nil.
func (rptuo *ResourcePropertyTypeUpdateOne) SetNillablePropertyCategoryID(id *int) *ResourcePropertyTypeUpdateOne {
	if id != nil {
		rptuo = rptuo.SetPropertyCategoryID(*id)
	}
	return rptuo
}

// SetPropertyCategory sets the property_category edge to PropertyCategory.
func (rptuo *ResourcePropertyTypeUpdateOne) SetPropertyCategory(p *PropertyCategory) *ResourcePropertyTypeUpdateOne {
	return rptuo.SetPropertyCategoryID(p.ID)
}

// Mutation returns the ResourcePropertyTypeMutation object of the builder.
func (rptuo *ResourcePropertyTypeUpdateOne) Mutation() *ResourcePropertyTypeMutation {
	return rptuo.mutation
}

// ClearResourceSpecification clears the "resourceSpecification" edge to type ResourceSpecification.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearResourceSpecification() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearResourceSpecification()
	return rptuo
}

// ClearPropertyCategory clears the "property_category" edge to type PropertyCategory.
func (rptuo *ResourcePropertyTypeUpdateOne) ClearPropertyCategory() *ResourcePropertyTypeUpdateOne {
	rptuo.mutation.ClearPropertyCategory()
	return rptuo
}

// Save executes the query and returns the updated entity.
func (rptuo *ResourcePropertyTypeUpdateOne) Save(ctx context.Context) (*ResourcePropertyType, error) {
	var (
		err  error
		node *ResourcePropertyType
	)
	rptuo.defaults()
	if len(rptuo.hooks) == 0 {
		if err = rptuo.check(); err != nil {
			return nil, err
		}
		node, err = rptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourcePropertyTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rptuo.check(); err != nil {
				return nil, err
			}
			rptuo.mutation = mutation
			node, err = rptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rptuo.hooks) - 1; i >= 0; i-- {
			mut = rptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rptuo *ResourcePropertyTypeUpdateOne) SaveX(ctx context.Context) *ResourcePropertyType {
	node, err := rptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rptuo *ResourcePropertyTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := rptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rptuo *ResourcePropertyTypeUpdateOne) ExecX(ctx context.Context) {
	if err := rptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rptuo *ResourcePropertyTypeUpdateOne) defaults() {
	if _, ok := rptuo.mutation.UpdateTime(); !ok {
		v := resourcepropertytype.UpdateDefaultUpdateTime()
		rptuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rptuo *ResourcePropertyTypeUpdateOne) check() error {
	if v, ok := rptuo.mutation.GetType(); ok {
		if err := resourcepropertytype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (rptuo *ResourcePropertyTypeUpdateOne) sqlSave(ctx context.Context) (_node *ResourcePropertyType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcepropertytype.Table,
			Columns: resourcepropertytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcepropertytype.FieldID,
			},
		},
	}
	id, ok := rptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourcePropertyType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rptuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcepropertytype.FieldUpdateTime,
		})
	}
	if value, ok := rptuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcepropertytype.FieldType,
		})
	}
	if value, ok := rptuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldName,
		})
	}
	if value, ok := rptuo.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldExternalID,
		})
	}
	if rptuo.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcepropertytype.FieldExternalID,
		})
	}
	if value, ok := rptuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepropertytype.FieldIndex,
		})
	}
	if value, ok := rptuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepropertytype.FieldIndex,
		})
	}
	if rptuo.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: resourcepropertytype.FieldIndex,
		})
	}
	if value, ok := rptuo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldCategory,
		})
	}
	if rptuo.mutation.CategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcepropertytype.FieldCategory,
		})
	}
	if value, ok := rptuo.mutation.IntVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepropertytype.FieldIntVal,
		})
	}
	if value, ok := rptuo.mutation.AddedIntVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepropertytype.FieldIntVal,
		})
	}
	if rptuo.mutation.IntValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: resourcepropertytype.FieldIntVal,
		})
	}
	if value, ok := rptuo.mutation.BoolVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldBoolVal,
		})
	}
	if rptuo.mutation.BoolValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: resourcepropertytype.FieldBoolVal,
		})
	}
	if value, ok := rptuo.mutation.FloatVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldFloatVal,
		})
	}
	if value, ok := rptuo.mutation.AddedFloatVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldFloatVal,
		})
	}
	if rptuo.mutation.FloatValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: resourcepropertytype.FieldFloatVal,
		})
	}
	if value, ok := rptuo.mutation.LatitudeVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldLatitudeVal,
		})
	}
	if value, ok := rptuo.mutation.AddedLatitudeVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldLatitudeVal,
		})
	}
	if rptuo.mutation.LatitudeValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: resourcepropertytype.FieldLatitudeVal,
		})
	}
	if value, ok := rptuo.mutation.LongitudeVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldLongitudeVal,
		})
	}
	if value, ok := rptuo.mutation.AddedLongitudeVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldLongitudeVal,
		})
	}
	if rptuo.mutation.LongitudeValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: resourcepropertytype.FieldLongitudeVal,
		})
	}
	if value, ok := rptuo.mutation.StringVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldStringVal,
		})
	}
	if rptuo.mutation.StringValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcepropertytype.FieldStringVal,
		})
	}
	if value, ok := rptuo.mutation.RangeFromVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldRangeFromVal,
		})
	}
	if value, ok := rptuo.mutation.AddedRangeFromVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldRangeFromVal,
		})
	}
	if rptuo.mutation.RangeFromValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: resourcepropertytype.FieldRangeFromVal,
		})
	}
	if value, ok := rptuo.mutation.RangeToVal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldRangeToVal,
		})
	}
	if value, ok := rptuo.mutation.AddedRangeToVal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldRangeToVal,
		})
	}
	if rptuo.mutation.RangeToValCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: resourcepropertytype.FieldRangeToVal,
		})
	}
	if value, ok := rptuo.mutation.IsInstanceProperty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldIsInstanceProperty,
		})
	}
	if value, ok := rptuo.mutation.Editable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldEditable,
		})
	}
	if value, ok := rptuo.mutation.Mandatory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldMandatory,
		})
	}
	if value, ok := rptuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldDeleted,
		})
	}
	if value, ok := rptuo.mutation.Listable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldListable,
		})
	}
	if value, ok := rptuo.mutation.NodeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldNodeType,
		})
	}
	if rptuo.mutation.NodeTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcepropertytype.FieldNodeType,
		})
	}
	if rptuo.mutation.ResourceSpecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepropertytype.ResourceSpecificationTable,
			Columns: []string{resourcepropertytype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rptuo.mutation.ResourceSpecificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepropertytype.ResourceSpecificationTable,
			Columns: []string{resourcepropertytype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rptuo.mutation.PropertyCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepropertytype.PropertyCategoryTable,
			Columns: []string{resourcepropertytype.PropertyCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertycategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rptuo.mutation.PropertyCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepropertytype.PropertyCategoryTable,
			Columns: []string{resourcepropertytype.PropertyCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertycategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourcePropertyType{config: rptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcepropertytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
