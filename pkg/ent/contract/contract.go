// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package contract

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/facebook/ent"
)

const (
	// Label holds the string label denoting the contract type in the database.
	Label = "contract"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldEffectiveDate holds the string denoting the effective_date field in the database.
	FieldEffectiveDate = "effective_date"
	// FieldExpirationDate holds the string denoting the expiration_date field in the database.
	FieldExpirationDate = "expiration_date"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"

	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeUplContract holds the string denoting the upl_contract edge name in mutations.
	EdgeUplContract = "upl_contract"
	// EdgeWorkOrderContract holds the string denoting the work_order_contract edge name in mutations.
	EdgeWorkOrderContract = "work_order_contract"

	// Table holds the table name of the contract in the database.
	Table = "contracts"
	// OrganizationTable is the table the holds the organization relation/edge.
	OrganizationTable = "contracts"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_contract_organization"
	// UplContractTable is the table the holds the upl_contract relation/edge.
	UplContractTable = "upls"
	// UplContractInverseTable is the table name for the Upl entity.
	// It exists in this package in order to avoid circular dependency with the "upl" package.
	UplContractInverseTable = "upls"
	// UplContractColumn is the table column denoting the upl_contract relation/edge.
	UplContractColumn = "contract_upl_contract"
	// WorkOrderContractTable is the table the holds the work_order_contract relation/edge.
	WorkOrderContractTable = "work_orders"
	// WorkOrderContractInverseTable is the table name for the WorkOrder entity.
	// It exists in this package in order to avoid circular dependency with the "workorder" package.
	WorkOrderContractInverseTable = "work_orders"
	// WorkOrderContractColumn is the table column denoting the work_order_contract relation/edge.
	WorkOrderContractColumn = "contract_work_order_contract"
)

// Columns holds all SQL columns for contract fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldExternalID,
	FieldName,
	FieldCategory,
	FieldEffectiveDate,
	FieldExpirationDate,
	FieldDescription,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Contract type.
var ForeignKeys = []string{
	"organization_contract_organization",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/facebookincubator/symphony/pkg/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the create_time field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the update_time field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	UpdateDefaultUpdateTime func() time.Time
	// ExternalIDValidator is a validator for the "external_id" field. It is called by the builders before save.
	ExternalIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
)

// Status defines the type for the status enum field.
type Status string

// Status values.
const (
	StatusACTIVE  Status = "ACTIVE"
	StatusEXPIRE  Status = "EXPIRE"
	StatusPENDING Status = "PENDING"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusACTIVE, StatusEXPIRE, StatusPENDING:
		return nil
	default:
		return fmt.Errorf("contract: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (s Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(s.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (s *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*s = Status(str)
	if err := StatusValidator(*s); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
