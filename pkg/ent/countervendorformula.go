// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/countervendorformula"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
)

// CounterVendorFormula is the model entity for the CounterVendorFormula schema.
type CounterVendorFormula struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Mandatory holds the value of the "mandatory" field.
	Mandatory bool `json:"mandatory,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CounterVendorFormulaQuery when eager-loading is set.
	Edges              CounterVendorFormulaEdges `json:"edges"`
	counter_counter_fk *int
	formula_formula_fk *int
	vendor_vendor_fk   *int
}

// CounterVendorFormulaEdges holds the relations/edges for other nodes in the graph.
type CounterVendorFormulaEdges struct {
	// Formula holds the value of the formula edge.
	Formula *Formula
	// Vendor holds the value of the vendor edge.
	Vendor *Vendor
	// Counter holds the value of the counter edge.
	Counter *Counter
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FormulaOrErr returns the Formula value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CounterVendorFormulaEdges) FormulaOrErr() (*Formula, error) {
	if e.loadedTypes[0] {
		if e.Formula == nil {
			// The edge formula was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: formula.Label}
		}
		return e.Formula, nil
	}
	return nil, &NotLoadedError{edge: "formula"}
}

// VendorOrErr returns the Vendor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CounterVendorFormulaEdges) VendorOrErr() (*Vendor, error) {
	if e.loadedTypes[1] {
		if e.Vendor == nil {
			// The edge vendor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vendor.Label}
		}
		return e.Vendor, nil
	}
	return nil, &NotLoadedError{edge: "vendor"}
}

// CounterOrErr returns the Counter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CounterVendorFormulaEdges) CounterOrErr() (*Counter, error) {
	if e.loadedTypes[2] {
		if e.Counter == nil {
			// The edge counter was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: counter.Label}
		}
		return e.Counter, nil
	}
	return nil, &NotLoadedError{edge: "counter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CounterVendorFormula) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // create_time
		&sql.NullTime{},  // update_time
		&sql.NullBool{},  // mandatory
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*CounterVendorFormula) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // counter_counter_fk
		&sql.NullInt64{}, // formula_formula_fk
		&sql.NullInt64{}, // vendor_vendor_fk
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CounterVendorFormula fields.
func (cvf *CounterVendorFormula) assignValues(values ...interface{}) error {
	if m, n := len(values), len(countervendorformula.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cvf.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		cvf.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		cvf.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field mandatory", values[2])
	} else if value.Valid {
		cvf.Mandatory = value.Bool
	}
	values = values[3:]
	if len(values) == len(countervendorformula.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field counter_counter_fk", value)
		} else if value.Valid {
			cvf.counter_counter_fk = new(int)
			*cvf.counter_counter_fk = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field formula_formula_fk", value)
		} else if value.Valid {
			cvf.formula_formula_fk = new(int)
			*cvf.formula_formula_fk = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field vendor_vendor_fk", value)
		} else if value.Valid {
			cvf.vendor_vendor_fk = new(int)
			*cvf.vendor_vendor_fk = int(value.Int64)
		}
	}
	return nil
}

// QueryFormula queries the formula edge of the CounterVendorFormula.
func (cvf *CounterVendorFormula) QueryFormula() *FormulaQuery {
	return (&CounterVendorFormulaClient{config: cvf.config}).QueryFormula(cvf)
}

// QueryVendor queries the vendor edge of the CounterVendorFormula.
func (cvf *CounterVendorFormula) QueryVendor() *VendorQuery {
	return (&CounterVendorFormulaClient{config: cvf.config}).QueryVendor(cvf)
}

// QueryCounter queries the counter edge of the CounterVendorFormula.
func (cvf *CounterVendorFormula) QueryCounter() *CounterQuery {
	return (&CounterVendorFormulaClient{config: cvf.config}).QueryCounter(cvf)
}

// Update returns a builder for updating this CounterVendorFormula.
// Note that, you need to call CounterVendorFormula.Unwrap() before calling this method, if this CounterVendorFormula
// was returned from a transaction, and the transaction was committed or rolled back.
func (cvf *CounterVendorFormula) Update() *CounterVendorFormulaUpdateOne {
	return (&CounterVendorFormulaClient{config: cvf.config}).UpdateOne(cvf)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cvf *CounterVendorFormula) Unwrap() *CounterVendorFormula {
	tx, ok := cvf.config.driver.(*txDriver)
	if !ok {
		panic("ent: CounterVendorFormula is not a transactional entity")
	}
	cvf.config.driver = tx.drv
	return cvf
}

// String implements the fmt.Stringer.
func (cvf *CounterVendorFormula) String() string {
	var builder strings.Builder
	builder.WriteString("CounterVendorFormula(")
	builder.WriteString(fmt.Sprintf("id=%v", cvf.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(cvf.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(cvf.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", mandatory=")
	builder.WriteString(fmt.Sprintf("%v", cvf.Mandatory))
	builder.WriteByte(')')
	return builder.String()
}

// CounterVendorFormulas is a parsable slice of CounterVendorFormula.
type CounterVendorFormulas []*CounterVendorFormula

func (cvf CounterVendorFormulas) config(cfg config) {
	for _i := range cvf {
		cvf[_i].config = cfg
	}
}
