// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/event"
	"github.com/facebookincubator/symphony/pkg/ent/rule"
	"github.com/facebookincubator/symphony/pkg/ent/ruletype"
	"github.com/facebookincubator/symphony/pkg/ent/treshold"
)

// Rule is the model entity for the Rule schema.
type Rule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// GracePeriod holds the value of the "gracePeriod" field.
	GracePeriod int `json:"gracePeriod,omitempty"`
	// StartDateTime holds the value of the "startDateTime" field.
	StartDateTime time.Time `json:"startDateTime,omitempty"`
	// EndDateTime holds the value of the "endDateTime" field.
	EndDateTime time.Time `json:"endDateTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RuleQuery when eager-loading is set.
	Edges                  RuleEdges `json:"edges"`
	event_rule_event       *int
	rule_type_ruletyperule *int
	treshold_ruletreshold  *int
}

// RuleEdges holds the relations/edges for other nodes in the graph.
type RuleEdges struct {
	// Ruletype holds the value of the ruletype edge.
	Ruletype *RuleType
	// Event holds the value of the event edge.
	Event *Event
	// Treshold holds the value of the treshold edge.
	Treshold *Treshold
	// Rulelimitrule holds the value of the rulelimitrule edge.
	Rulelimitrule []*RuleLimit
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RuletypeOrErr returns the Ruletype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RuleEdges) RuletypeOrErr() (*RuleType, error) {
	if e.loadedTypes[0] {
		if e.Ruletype == nil {
			// The edge ruletype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ruletype.Label}
		}
		return e.Ruletype, nil
	}
	return nil, &NotLoadedError{edge: "ruletype"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RuleEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[1] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// TresholdOrErr returns the Treshold value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RuleEdges) TresholdOrErr() (*Treshold, error) {
	if e.loadedTypes[2] {
		if e.Treshold == nil {
			// The edge treshold was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: treshold.Label}
		}
		return e.Treshold, nil
	}
	return nil, &NotLoadedError{edge: "treshold"}
}

// RulelimitruleOrErr returns the Rulelimitrule value or an error if the edge
// was not loaded in eager-loading.
func (e RuleEdges) RulelimitruleOrErr() ([]*RuleLimit, error) {
	if e.loadedTypes[3] {
		return e.Rulelimitrule, nil
	}
	return nil, &NotLoadedError{edge: "rulelimitrule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rule) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullInt64{},  // gracePeriod
		&sql.NullTime{},   // startDateTime
		&sql.NullTime{},   // endDateTime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Rule) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // event_rule_event
		&sql.NullInt64{}, // rule_type_ruletyperule
		&sql.NullInt64{}, // treshold_ruletreshold
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rule fields.
func (r *Rule) assignValues(values ...interface{}) error {
	if m, n := len(values), len(rule.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		r.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		r.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		r.Name = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field gracePeriod", values[3])
	} else if value.Valid {
		r.GracePeriod = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field startDateTime", values[4])
	} else if value.Valid {
		r.StartDateTime = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field endDateTime", values[5])
	} else if value.Valid {
		r.EndDateTime = value.Time
	}
	values = values[6:]
	if len(values) == len(rule.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_rule_event", value)
		} else if value.Valid {
			r.event_rule_event = new(int)
			*r.event_rule_event = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field rule_type_ruletyperule", value)
		} else if value.Valid {
			r.rule_type_ruletyperule = new(int)
			*r.rule_type_ruletyperule = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field treshold_ruletreshold", value)
		} else if value.Valid {
			r.treshold_ruletreshold = new(int)
			*r.treshold_ruletreshold = int(value.Int64)
		}
	}
	return nil
}

// QueryRuletype queries the ruletype edge of the Rule.
func (r *Rule) QueryRuletype() *RuleTypeQuery {
	return (&RuleClient{config: r.config}).QueryRuletype(r)
}

// QueryEvent queries the event edge of the Rule.
func (r *Rule) QueryEvent() *EventQuery {
	return (&RuleClient{config: r.config}).QueryEvent(r)
}

// QueryTreshold queries the treshold edge of the Rule.
func (r *Rule) QueryTreshold() *TresholdQuery {
	return (&RuleClient{config: r.config}).QueryTreshold(r)
}

// QueryRulelimitrule queries the rulelimitrule edge of the Rule.
func (r *Rule) QueryRulelimitrule() *RuleLimitQuery {
	return (&RuleClient{config: r.config}).QueryRulelimitrule(r)
}

// Update returns a builder for updating this Rule.
// Note that, you need to call Rule.Unwrap() before calling this method, if this Rule
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rule) Update() *RuleUpdateOne {
	return (&RuleClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Rule) Unwrap() *Rule {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rule is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rule) String() string {
	var builder strings.Builder
	builder.WriteString("Rule(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", gracePeriod=")
	builder.WriteString(fmt.Sprintf("%v", r.GracePeriod))
	builder.WriteString(", startDateTime=")
	builder.WriteString(r.StartDateTime.Format(time.ANSIC))
	builder.WriteString(", endDateTime=")
	builder.WriteString(r.EndDateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rules is a parsable slice of Rule.
type Rules []*Rule

func (r Rules) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
