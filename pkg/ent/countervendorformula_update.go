// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/countervendorformula"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
)

// CounterVendorFormulaUpdate is the builder for updating CounterVendorFormula entities.
type CounterVendorFormulaUpdate struct {
	config
	hooks    []Hook
	mutation *CounterVendorFormulaMutation
}

// Where adds a new predicate for the builder.
func (cvfu *CounterVendorFormulaUpdate) Where(ps ...predicate.CounterVendorFormula) *CounterVendorFormulaUpdate {
	cvfu.mutation.predicates = append(cvfu.mutation.predicates, ps...)
	return cvfu
}

// SetMandatory sets the mandatory field.
func (cvfu *CounterVendorFormulaUpdate) SetMandatory(b bool) *CounterVendorFormulaUpdate {
	cvfu.mutation.SetMandatory(b)
	return cvfu
}

// SetFormulaID sets the formula edge to Formula by id.
func (cvfu *CounterVendorFormulaUpdate) SetFormulaID(id int) *CounterVendorFormulaUpdate {
	cvfu.mutation.SetFormulaID(id)
	return cvfu
}

// SetNillableFormulaID sets the formula edge to Formula by id if the given value is not nil.
func (cvfu *CounterVendorFormulaUpdate) SetNillableFormulaID(id *int) *CounterVendorFormulaUpdate {
	if id != nil {
		cvfu = cvfu.SetFormulaID(*id)
	}
	return cvfu
}

// SetFormula sets the formula edge to Formula.
func (cvfu *CounterVendorFormulaUpdate) SetFormula(f *Formula) *CounterVendorFormulaUpdate {
	return cvfu.SetFormulaID(f.ID)
}

// SetVendorID sets the vendor edge to Vendor by id.
func (cvfu *CounterVendorFormulaUpdate) SetVendorID(id int) *CounterVendorFormulaUpdate {
	cvfu.mutation.SetVendorID(id)
	return cvfu
}

// SetNillableVendorID sets the vendor edge to Vendor by id if the given value is not nil.
func (cvfu *CounterVendorFormulaUpdate) SetNillableVendorID(id *int) *CounterVendorFormulaUpdate {
	if id != nil {
		cvfu = cvfu.SetVendorID(*id)
	}
	return cvfu
}

// SetVendor sets the vendor edge to Vendor.
func (cvfu *CounterVendorFormulaUpdate) SetVendor(v *Vendor) *CounterVendorFormulaUpdate {
	return cvfu.SetVendorID(v.ID)
}

// SetCounterID sets the counter edge to Counter by id.
func (cvfu *CounterVendorFormulaUpdate) SetCounterID(id int) *CounterVendorFormulaUpdate {
	cvfu.mutation.SetCounterID(id)
	return cvfu
}

// SetNillableCounterID sets the counter edge to Counter by id if the given value is not nil.
func (cvfu *CounterVendorFormulaUpdate) SetNillableCounterID(id *int) *CounterVendorFormulaUpdate {
	if id != nil {
		cvfu = cvfu.SetCounterID(*id)
	}
	return cvfu
}

// SetCounter sets the counter edge to Counter.
func (cvfu *CounterVendorFormulaUpdate) SetCounter(c *Counter) *CounterVendorFormulaUpdate {
	return cvfu.SetCounterID(c.ID)
}

// Mutation returns the CounterVendorFormulaMutation object of the builder.
func (cvfu *CounterVendorFormulaUpdate) Mutation() *CounterVendorFormulaMutation {
	return cvfu.mutation
}

// ClearFormula clears the "formula" edge to type Formula.
func (cvfu *CounterVendorFormulaUpdate) ClearFormula() *CounterVendorFormulaUpdate {
	cvfu.mutation.ClearFormula()
	return cvfu
}

// ClearVendor clears the "vendor" edge to type Vendor.
func (cvfu *CounterVendorFormulaUpdate) ClearVendor() *CounterVendorFormulaUpdate {
	cvfu.mutation.ClearVendor()
	return cvfu
}

// ClearCounter clears the "counter" edge to type Counter.
func (cvfu *CounterVendorFormulaUpdate) ClearCounter() *CounterVendorFormulaUpdate {
	cvfu.mutation.ClearCounter()
	return cvfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cvfu *CounterVendorFormulaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cvfu.defaults()
	if len(cvfu.hooks) == 0 {
		affected, err = cvfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterVendorFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cvfu.mutation = mutation
			affected, err = cvfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cvfu.hooks) - 1; i >= 0; i-- {
			mut = cvfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cvfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cvfu *CounterVendorFormulaUpdate) SaveX(ctx context.Context) int {
	affected, err := cvfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cvfu *CounterVendorFormulaUpdate) Exec(ctx context.Context) error {
	_, err := cvfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvfu *CounterVendorFormulaUpdate) ExecX(ctx context.Context) {
	if err := cvfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvfu *CounterVendorFormulaUpdate) defaults() {
	if _, ok := cvfu.mutation.UpdateTime(); !ok {
		v := countervendorformula.UpdateDefaultUpdateTime()
		cvfu.mutation.SetUpdateTime(v)
	}
}

func (cvfu *CounterVendorFormulaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   countervendorformula.Table,
			Columns: countervendorformula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: countervendorformula.FieldID,
			},
		},
	}
	if ps := cvfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvfu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: countervendorformula.FieldUpdateTime,
		})
	}
	if value, ok := cvfu.mutation.Mandatory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: countervendorformula.FieldMandatory,
		})
	}
	if cvfu.mutation.FormulaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.FormulaTable,
			Columns: []string{countervendorformula.FormulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvfu.mutation.FormulaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.FormulaTable,
			Columns: []string{countervendorformula.FormulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvfu.mutation.VendorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.VendorTable,
			Columns: []string{countervendorformula.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvfu.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.VendorTable,
			Columns: []string{countervendorformula.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvfu.mutation.CounterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.CounterTable,
			Columns: []string{countervendorformula.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvfu.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.CounterTable,
			Columns: []string{countervendorformula.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cvfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{countervendorformula.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CounterVendorFormulaUpdateOne is the builder for updating a single CounterVendorFormula entity.
type CounterVendorFormulaUpdateOne struct {
	config
	hooks    []Hook
	mutation *CounterVendorFormulaMutation
}

// SetMandatory sets the mandatory field.
func (cvfuo *CounterVendorFormulaUpdateOne) SetMandatory(b bool) *CounterVendorFormulaUpdateOne {
	cvfuo.mutation.SetMandatory(b)
	return cvfuo
}

// SetFormulaID sets the formula edge to Formula by id.
func (cvfuo *CounterVendorFormulaUpdateOne) SetFormulaID(id int) *CounterVendorFormulaUpdateOne {
	cvfuo.mutation.SetFormulaID(id)
	return cvfuo
}

// SetNillableFormulaID sets the formula edge to Formula by id if the given value is not nil.
func (cvfuo *CounterVendorFormulaUpdateOne) SetNillableFormulaID(id *int) *CounterVendorFormulaUpdateOne {
	if id != nil {
		cvfuo = cvfuo.SetFormulaID(*id)
	}
	return cvfuo
}

// SetFormula sets the formula edge to Formula.
func (cvfuo *CounterVendorFormulaUpdateOne) SetFormula(f *Formula) *CounterVendorFormulaUpdateOne {
	return cvfuo.SetFormulaID(f.ID)
}

// SetVendorID sets the vendor edge to Vendor by id.
func (cvfuo *CounterVendorFormulaUpdateOne) SetVendorID(id int) *CounterVendorFormulaUpdateOne {
	cvfuo.mutation.SetVendorID(id)
	return cvfuo
}

// SetNillableVendorID sets the vendor edge to Vendor by id if the given value is not nil.
func (cvfuo *CounterVendorFormulaUpdateOne) SetNillableVendorID(id *int) *CounterVendorFormulaUpdateOne {
	if id != nil {
		cvfuo = cvfuo.SetVendorID(*id)
	}
	return cvfuo
}

// SetVendor sets the vendor edge to Vendor.
func (cvfuo *CounterVendorFormulaUpdateOne) SetVendor(v *Vendor) *CounterVendorFormulaUpdateOne {
	return cvfuo.SetVendorID(v.ID)
}

// SetCounterID sets the counter edge to Counter by id.
func (cvfuo *CounterVendorFormulaUpdateOne) SetCounterID(id int) *CounterVendorFormulaUpdateOne {
	cvfuo.mutation.SetCounterID(id)
	return cvfuo
}

// SetNillableCounterID sets the counter edge to Counter by id if the given value is not nil.
func (cvfuo *CounterVendorFormulaUpdateOne) SetNillableCounterID(id *int) *CounterVendorFormulaUpdateOne {
	if id != nil {
		cvfuo = cvfuo.SetCounterID(*id)
	}
	return cvfuo
}

// SetCounter sets the counter edge to Counter.
func (cvfuo *CounterVendorFormulaUpdateOne) SetCounter(c *Counter) *CounterVendorFormulaUpdateOne {
	return cvfuo.SetCounterID(c.ID)
}

// Mutation returns the CounterVendorFormulaMutation object of the builder.
func (cvfuo *CounterVendorFormulaUpdateOne) Mutation() *CounterVendorFormulaMutation {
	return cvfuo.mutation
}

// ClearFormula clears the "formula" edge to type Formula.
func (cvfuo *CounterVendorFormulaUpdateOne) ClearFormula() *CounterVendorFormulaUpdateOne {
	cvfuo.mutation.ClearFormula()
	return cvfuo
}

// ClearVendor clears the "vendor" edge to type Vendor.
func (cvfuo *CounterVendorFormulaUpdateOne) ClearVendor() *CounterVendorFormulaUpdateOne {
	cvfuo.mutation.ClearVendor()
	return cvfuo
}

// ClearCounter clears the "counter" edge to type Counter.
func (cvfuo *CounterVendorFormulaUpdateOne) ClearCounter() *CounterVendorFormulaUpdateOne {
	cvfuo.mutation.ClearCounter()
	return cvfuo
}

// Save executes the query and returns the updated entity.
func (cvfuo *CounterVendorFormulaUpdateOne) Save(ctx context.Context) (*CounterVendorFormula, error) {
	var (
		err  error
		node *CounterVendorFormula
	)
	cvfuo.defaults()
	if len(cvfuo.hooks) == 0 {
		node, err = cvfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterVendorFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cvfuo.mutation = mutation
			node, err = cvfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cvfuo.hooks) - 1; i >= 0; i-- {
			mut = cvfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cvfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cvfuo *CounterVendorFormulaUpdateOne) SaveX(ctx context.Context) *CounterVendorFormula {
	node, err := cvfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cvfuo *CounterVendorFormulaUpdateOne) Exec(ctx context.Context) error {
	_, err := cvfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvfuo *CounterVendorFormulaUpdateOne) ExecX(ctx context.Context) {
	if err := cvfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvfuo *CounterVendorFormulaUpdateOne) defaults() {
	if _, ok := cvfuo.mutation.UpdateTime(); !ok {
		v := countervendorformula.UpdateDefaultUpdateTime()
		cvfuo.mutation.SetUpdateTime(v)
	}
}

func (cvfuo *CounterVendorFormulaUpdateOne) sqlSave(ctx context.Context) (_node *CounterVendorFormula, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   countervendorformula.Table,
			Columns: countervendorformula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: countervendorformula.FieldID,
			},
		},
	}
	id, ok := cvfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CounterVendorFormula.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cvfuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: countervendorformula.FieldUpdateTime,
		})
	}
	if value, ok := cvfuo.mutation.Mandatory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: countervendorformula.FieldMandatory,
		})
	}
	if cvfuo.mutation.FormulaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.FormulaTable,
			Columns: []string{countervendorformula.FormulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvfuo.mutation.FormulaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.FormulaTable,
			Columns: []string{countervendorformula.FormulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvfuo.mutation.VendorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.VendorTable,
			Columns: []string{countervendorformula.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvfuo.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.VendorTable,
			Columns: []string{countervendorformula.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvfuo.mutation.CounterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.CounterTable,
			Columns: []string{countervendorformula.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvfuo.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countervendorformula.CounterTable,
			Columns: []string{countervendorformula.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CounterVendorFormula{config: cvfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cvfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{countervendorformula.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
