// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/automationactivity"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/ent/user"
)

// AutomationActivityCreate is the builder for creating a AutomationActivity entity.
type AutomationActivityCreate struct {
	config
	mutation *AutomationActivityMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (aac *AutomationActivityCreate) SetCreateTime(t time.Time) *AutomationActivityCreate {
	aac.mutation.SetCreateTime(t)
	return aac
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (aac *AutomationActivityCreate) SetNillableCreateTime(t *time.Time) *AutomationActivityCreate {
	if t != nil {
		aac.SetCreateTime(*t)
	}
	return aac
}

// SetUpdateTime sets the update_time field.
func (aac *AutomationActivityCreate) SetUpdateTime(t time.Time) *AutomationActivityCreate {
	aac.mutation.SetUpdateTime(t)
	return aac
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (aac *AutomationActivityCreate) SetNillableUpdateTime(t *time.Time) *AutomationActivityCreate {
	if t != nil {
		aac.SetUpdateTime(*t)
	}
	return aac
}

// SetActivityType sets the activity_type field.
func (aac *AutomationActivityCreate) SetActivityType(at automationactivity.ActivityType) *AutomationActivityCreate {
	aac.mutation.SetActivityType(at)
	return aac
}

// SetAutomationEntityType sets the automation_entity_type field.
func (aac *AutomationActivityCreate) SetAutomationEntityType(aet automationactivity.AutomationEntityType) *AutomationActivityCreate {
	aac.mutation.SetAutomationEntityType(aet)
	return aac
}

// SetOldValue sets the old_value field.
func (aac *AutomationActivityCreate) SetOldValue(s string) *AutomationActivityCreate {
	aac.mutation.SetOldValue(s)
	return aac
}

// SetNillableOldValue sets the old_value field if the given value is not nil.
func (aac *AutomationActivityCreate) SetNillableOldValue(s *string) *AutomationActivityCreate {
	if s != nil {
		aac.SetOldValue(*s)
	}
	return aac
}

// SetNewValue sets the new_value field.
func (aac *AutomationActivityCreate) SetNewValue(s string) *AutomationActivityCreate {
	aac.mutation.SetNewValue(s)
	return aac
}

// SetNillableNewValue sets the new_value field if the given value is not nil.
func (aac *AutomationActivityCreate) SetNillableNewValue(s *string) *AutomationActivityCreate {
	if s != nil {
		aac.SetNewValue(*s)
	}
	return aac
}

// SetAuthorID sets the author edge to User by id.
func (aac *AutomationActivityCreate) SetAuthorID(id int) *AutomationActivityCreate {
	aac.mutation.SetAuthorID(id)
	return aac
}

// SetNillableAuthorID sets the author edge to User by id if the given value is not nil.
func (aac *AutomationActivityCreate) SetNillableAuthorID(id *int) *AutomationActivityCreate {
	if id != nil {
		aac = aac.SetAuthorID(*id)
	}
	return aac
}

// SetAuthor sets the author edge to User.
func (aac *AutomationActivityCreate) SetAuthor(u *User) *AutomationActivityCreate {
	return aac.SetAuthorID(u.ID)
}

// SetFlowInstanceID sets the flow_instance edge to FlowInstance by id.
func (aac *AutomationActivityCreate) SetFlowInstanceID(id int) *AutomationActivityCreate {
	aac.mutation.SetFlowInstanceID(id)
	return aac
}

// SetNillableFlowInstanceID sets the flow_instance edge to FlowInstance by id if the given value is not nil.
func (aac *AutomationActivityCreate) SetNillableFlowInstanceID(id *int) *AutomationActivityCreate {
	if id != nil {
		aac = aac.SetFlowInstanceID(*id)
	}
	return aac
}

// SetFlowInstance sets the flow_instance edge to FlowInstance.
func (aac *AutomationActivityCreate) SetFlowInstance(f *FlowInstance) *AutomationActivityCreate {
	return aac.SetFlowInstanceID(f.ID)
}

// SetBlockInstanceID sets the block_instance edge to BlockInstance by id.
func (aac *AutomationActivityCreate) SetBlockInstanceID(id int) *AutomationActivityCreate {
	aac.mutation.SetBlockInstanceID(id)
	return aac
}

// SetNillableBlockInstanceID sets the block_instance edge to BlockInstance by id if the given value is not nil.
func (aac *AutomationActivityCreate) SetNillableBlockInstanceID(id *int) *AutomationActivityCreate {
	if id != nil {
		aac = aac.SetBlockInstanceID(*id)
	}
	return aac
}

// SetBlockInstance sets the block_instance edge to BlockInstance.
func (aac *AutomationActivityCreate) SetBlockInstance(b *BlockInstance) *AutomationActivityCreate {
	return aac.SetBlockInstanceID(b.ID)
}

// Mutation returns the AutomationActivityMutation object of the builder.
func (aac *AutomationActivityCreate) Mutation() *AutomationActivityMutation {
	return aac.mutation
}

// Save creates the AutomationActivity in the database.
func (aac *AutomationActivityCreate) Save(ctx context.Context) (*AutomationActivity, error) {
	var (
		err  error
		node *AutomationActivity
	)
	aac.defaults()
	if len(aac.hooks) == 0 {
		if err = aac.check(); err != nil {
			return nil, err
		}
		node, err = aac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AutomationActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aac.check(); err != nil {
				return nil, err
			}
			aac.mutation = mutation
			node, err = aac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aac.hooks) - 1; i >= 0; i-- {
			mut = aac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AutomationActivityCreate) SaveX(ctx context.Context) *AutomationActivity {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (aac *AutomationActivityCreate) defaults() {
	if _, ok := aac.mutation.CreateTime(); !ok {
		v := automationactivity.DefaultCreateTime()
		aac.mutation.SetCreateTime(v)
	}
	if _, ok := aac.mutation.UpdateTime(); !ok {
		v := automationactivity.DefaultUpdateTime()
		aac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *AutomationActivityCreate) check() error {
	if _, ok := aac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := aac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := aac.mutation.ActivityType(); !ok {
		return &ValidationError{Name: "activity_type", err: errors.New("ent: missing required field \"activity_type\"")}
	}
	if v, ok := aac.mutation.ActivityType(); ok {
		if err := automationactivity.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf("ent: validator failed for field \"activity_type\": %w", err)}
		}
	}
	if _, ok := aac.mutation.AutomationEntityType(); !ok {
		return &ValidationError{Name: "automation_entity_type", err: errors.New("ent: missing required field \"automation_entity_type\"")}
	}
	if v, ok := aac.mutation.AutomationEntityType(); ok {
		if err := automationactivity.AutomationEntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "automation_entity_type", err: fmt.Errorf("ent: validator failed for field \"automation_entity_type\": %w", err)}
		}
	}
	return nil
}

func (aac *AutomationActivityCreate) sqlSave(ctx context.Context) (*AutomationActivity, error) {
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (aac *AutomationActivityCreate) createSpec() (*AutomationActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &AutomationActivity{config: aac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: automationactivity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: automationactivity.FieldID,
			},
		}
	)
	if value, ok := aac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: automationactivity.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := aac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: automationactivity.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := aac.mutation.ActivityType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: automationactivity.FieldActivityType,
		})
		_node.ActivityType = value
	}
	if value, ok := aac.mutation.AutomationEntityType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: automationactivity.FieldAutomationEntityType,
		})
		_node.AutomationEntityType = value
	}
	if value, ok := aac.mutation.OldValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: automationactivity.FieldOldValue,
		})
		_node.OldValue = value
	}
	if value, ok := aac.mutation.NewValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: automationactivity.FieldNewValue,
		})
		_node.NewValue = value
	}
	if nodes := aac.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   automationactivity.AuthorTable,
			Columns: []string{automationactivity.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aac.mutation.FlowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   automationactivity.FlowInstanceTable,
			Columns: []string{automationactivity.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aac.mutation.BlockInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   automationactivity.BlockInstanceTable,
			Columns: []string{automationactivity.BlockInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AutomationActivityCreateBulk is the builder for creating a bulk of AutomationActivity entities.
type AutomationActivityCreateBulk struct {
	config
	builders []*AutomationActivityCreate
}

// Save creates the AutomationActivity entities in the database.
func (aacb *AutomationActivityCreateBulk) Save(ctx context.Context) ([]*AutomationActivity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AutomationActivity, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AutomationActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (aacb *AutomationActivityCreateBulk) SaveX(ctx context.Context) []*AutomationActivity {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
