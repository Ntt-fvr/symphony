// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetypebasetype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetypeclass"
)

// ResourceType is the model entity for the ResourceType schema.
type ResourceType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceTypeQuery when eager-loading is set.
	Edges                                      ResourceTypeEdges `json:"edges"`
	resource_type_base_type_resource_base_type *int
	resource_type_class_resource_type_class    *int
}

// ResourceTypeEdges holds the relations/edges for other nodes in the graph.
type ResourceTypeEdges struct {
	// Resourcetypeclass holds the value of the resourcetypeclass edge.
	Resourcetypeclass *ResourceTypeClass
	// Resourcetypebasetype holds the value of the resourcetypebasetype edge.
	Resourcetypebasetype *ResourceTypeBaseType
	// ResourceRelationshipA holds the value of the resource_relationship_a edge.
	ResourceRelationshipA []*ResourceRelationship
	// ResourceRelationshipB holds the value of the resource_relationship_b edge.
	ResourceRelationshipB []*ResourceRelationship
	// ResourceSpecification holds the value of the resource_specification edge.
	ResourceSpecification []*ResourceSpecification
	// ResourcetypeItems holds the value of the resourcetype_items edge.
	ResourcetypeItems []*ResourceSRItems
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ResourcetypeclassOrErr returns the Resourcetypeclass value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceTypeEdges) ResourcetypeclassOrErr() (*ResourceTypeClass, error) {
	if e.loadedTypes[0] {
		if e.Resourcetypeclass == nil {
			// The edge resourcetypeclass was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcetypeclass.Label}
		}
		return e.Resourcetypeclass, nil
	}
	return nil, &NotLoadedError{edge: "resourcetypeclass"}
}

// ResourcetypebasetypeOrErr returns the Resourcetypebasetype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceTypeEdges) ResourcetypebasetypeOrErr() (*ResourceTypeBaseType, error) {
	if e.loadedTypes[1] {
		if e.Resourcetypebasetype == nil {
			// The edge resourcetypebasetype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcetypebasetype.Label}
		}
		return e.Resourcetypebasetype, nil
	}
	return nil, &NotLoadedError{edge: "resourcetypebasetype"}
}

// ResourceRelationshipAOrErr returns the ResourceRelationshipA value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceTypeEdges) ResourceRelationshipAOrErr() ([]*ResourceRelationship, error) {
	if e.loadedTypes[2] {
		return e.ResourceRelationshipA, nil
	}
	return nil, &NotLoadedError{edge: "resource_relationship_a"}
}

// ResourceRelationshipBOrErr returns the ResourceRelationshipB value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceTypeEdges) ResourceRelationshipBOrErr() ([]*ResourceRelationship, error) {
	if e.loadedTypes[3] {
		return e.ResourceRelationshipB, nil
	}
	return nil, &NotLoadedError{edge: "resource_relationship_b"}
}

// ResourceSpecificationOrErr returns the ResourceSpecification value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceTypeEdges) ResourceSpecificationOrErr() ([]*ResourceSpecification, error) {
	if e.loadedTypes[4] {
		return e.ResourceSpecification, nil
	}
	return nil, &NotLoadedError{edge: "resource_specification"}
}

// ResourcetypeItemsOrErr returns the ResourcetypeItems value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceTypeEdges) ResourcetypeItemsOrErr() ([]*ResourceSRItems, error) {
	if e.loadedTypes[5] {
		return e.ResourcetypeItems, nil
	}
	return nil, &NotLoadedError{edge: "resourcetype_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ResourceType) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // resource_type_base_type_resource_base_type
		&sql.NullInt64{}, // resource_type_class_resource_type_class
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceType fields.
func (rt *ResourceType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(resourcetype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		rt.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		rt.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		rt.Name = value.String
	}
	values = values[3:]
	if len(values) == len(resourcetype.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_type_base_type_resource_base_type", value)
		} else if value.Valid {
			rt.resource_type_base_type_resource_base_type = new(int)
			*rt.resource_type_base_type_resource_base_type = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_type_class_resource_type_class", value)
		} else if value.Valid {
			rt.resource_type_class_resource_type_class = new(int)
			*rt.resource_type_class_resource_type_class = int(value.Int64)
		}
	}
	return nil
}

// QueryResourcetypeclass queries the resourcetypeclass edge of the ResourceType.
func (rt *ResourceType) QueryResourcetypeclass() *ResourceTypeClassQuery {
	return (&ResourceTypeClient{config: rt.config}).QueryResourcetypeclass(rt)
}

// QueryResourcetypebasetype queries the resourcetypebasetype edge of the ResourceType.
func (rt *ResourceType) QueryResourcetypebasetype() *ResourceTypeBaseTypeQuery {
	return (&ResourceTypeClient{config: rt.config}).QueryResourcetypebasetype(rt)
}

// QueryResourceRelationshipA queries the resource_relationship_a edge of the ResourceType.
func (rt *ResourceType) QueryResourceRelationshipA() *ResourceRelationshipQuery {
	return (&ResourceTypeClient{config: rt.config}).QueryResourceRelationshipA(rt)
}

// QueryResourceRelationshipB queries the resource_relationship_b edge of the ResourceType.
func (rt *ResourceType) QueryResourceRelationshipB() *ResourceRelationshipQuery {
	return (&ResourceTypeClient{config: rt.config}).QueryResourceRelationshipB(rt)
}

// QueryResourceSpecification queries the resource_specification edge of the ResourceType.
func (rt *ResourceType) QueryResourceSpecification() *ResourceSpecificationQuery {
	return (&ResourceTypeClient{config: rt.config}).QueryResourceSpecification(rt)
}

// QueryResourcetypeItems queries the resourcetype_items edge of the ResourceType.
func (rt *ResourceType) QueryResourcetypeItems() *ResourceSRItemsQuery {
	return (&ResourceTypeClient{config: rt.config}).QueryResourcetypeItems(rt)
}

// Update returns a builder for updating this ResourceType.
// Note that, you need to call ResourceType.Unwrap() before calling this method, if this ResourceType
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *ResourceType) Update() *ResourceTypeUpdateOne {
	return (&ResourceTypeClient{config: rt.config}).UpdateOne(rt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rt *ResourceType) Unwrap() *ResourceType {
	tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourceType is not a transactional entity")
	}
	rt.config.driver = tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *ResourceType) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceType(")
	builder.WriteString(fmt.Sprintf("id=%v", rt.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(rt.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(rt.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(rt.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ResourceTypes is a parsable slice of ResourceType.
type ResourceTypes []*ResourceType

func (rt ResourceTypes) config(cfg config) {
	for _i := range rt {
		rt[_i].config = cfg
	}
}
