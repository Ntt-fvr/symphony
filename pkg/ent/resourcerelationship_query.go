// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationship"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationshipmultiplicity"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationshiptype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
)

// ResourceRelationshipQuery is the builder for querying ResourceRelationship entities.
type ResourceRelationshipQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ResourceRelationship
	// eager-loading edges.
	withResourcetypea                      *ResourceTypeQuery
	withResourcetypeb                      *ResourceTypeQuery
	withResourcerelationshiptypefk         *ResourceRelationshipTypeQuery
	withLocationtypefk                     *LocationTypeQuery
	withResourceRelationshipMultiplicityFk *ResourceRelationshipMultiplicityQuery
	withFKs                                bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rrq *ResourceRelationshipQuery) Where(ps ...predicate.ResourceRelationship) *ResourceRelationshipQuery {
	rrq.predicates = append(rrq.predicates, ps...)
	return rrq
}

// Limit adds a limit step to the query.
func (rrq *ResourceRelationshipQuery) Limit(limit int) *ResourceRelationshipQuery {
	rrq.limit = &limit
	return rrq
}

// Offset adds an offset step to the query.
func (rrq *ResourceRelationshipQuery) Offset(offset int) *ResourceRelationshipQuery {
	rrq.offset = &offset
	return rrq
}

// Order adds an order step to the query.
func (rrq *ResourceRelationshipQuery) Order(o ...OrderFunc) *ResourceRelationshipQuery {
	rrq.order = append(rrq.order, o...)
	return rrq
}

// QueryResourcetypea chains the current query on the resourcetypea edge.
func (rrq *ResourceRelationshipQuery) QueryResourcetypea() *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: rrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcerelationship.Table, resourcerelationship.FieldID, selector),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcerelationship.ResourcetypeaTable, resourcerelationship.ResourcetypeaColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResourcetypeb chains the current query on the resourcetypeb edge.
func (rrq *ResourceRelationshipQuery) QueryResourcetypeb() *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: rrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcerelationship.Table, resourcerelationship.FieldID, selector),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcerelationship.ResourcetypebTable, resourcerelationship.ResourcetypebColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResourcerelationshiptypefk chains the current query on the resourcerelationshiptypefk edge.
func (rrq *ResourceRelationshipQuery) QueryResourcerelationshiptypefk() *ResourceRelationshipTypeQuery {
	query := &ResourceRelationshipTypeQuery{config: rrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcerelationship.Table, resourcerelationship.FieldID, selector),
			sqlgraph.To(resourcerelationshiptype.Table, resourcerelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcerelationship.ResourcerelationshiptypefkTable, resourcerelationship.ResourcerelationshiptypefkColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocationtypefk chains the current query on the locationtypefk edge.
func (rrq *ResourceRelationshipQuery) QueryLocationtypefk() *LocationTypeQuery {
	query := &LocationTypeQuery{config: rrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcerelationship.Table, resourcerelationship.FieldID, selector),
			sqlgraph.To(locationtype.Table, locationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcerelationship.LocationtypefkTable, resourcerelationship.LocationtypefkColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResourceRelationshipMultiplicityFk chains the current query on the resource_relationship_multiplicity_fk edge.
func (rrq *ResourceRelationshipQuery) QueryResourceRelationshipMultiplicityFk() *ResourceRelationshipMultiplicityQuery {
	query := &ResourceRelationshipMultiplicityQuery{config: rrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcerelationship.Table, resourcerelationship.FieldID, selector),
			sqlgraph.To(resourcerelationshipmultiplicity.Table, resourcerelationshipmultiplicity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcerelationship.ResourceRelationshipMultiplicityFkTable, resourcerelationship.ResourceRelationshipMultiplicityFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResourceRelationship entity in the query. Returns *NotFoundError when no resourcerelationship was found.
func (rrq *ResourceRelationshipQuery) First(ctx context.Context) (*ResourceRelationship, error) {
	nodes, err := rrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resourcerelationship.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rrq *ResourceRelationshipQuery) FirstX(ctx context.Context) *ResourceRelationship {
	node, err := rrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ResourceRelationship id in the query. Returns *NotFoundError when no id was found.
func (rrq *ResourceRelationshipQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resourcerelationship.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rrq *ResourceRelationshipQuery) FirstIDX(ctx context.Context) int {
	id, err := rrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ResourceRelationship entity in the query, returns an error if not exactly one entity was returned.
func (rrq *ResourceRelationshipQuery) Only(ctx context.Context) (*ResourceRelationship, error) {
	nodes, err := rrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resourcerelationship.Label}
	default:
		return nil, &NotSingularError{resourcerelationship.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rrq *ResourceRelationshipQuery) OnlyX(ctx context.Context) *ResourceRelationship {
	node, err := rrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ResourceRelationship id in the query, returns an error if not exactly one id was returned.
func (rrq *ResourceRelationshipQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resourcerelationship.Label}
	default:
		err = &NotSingularError{resourcerelationship.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rrq *ResourceRelationshipQuery) OnlyIDX(ctx context.Context) int {
	id, err := rrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResourceRelationships.
func (rrq *ResourceRelationshipQuery) All(ctx context.Context) ([]*ResourceRelationship, error) {
	if err := rrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rrq *ResourceRelationshipQuery) AllX(ctx context.Context) []*ResourceRelationship {
	nodes, err := rrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ResourceRelationship ids.
func (rrq *ResourceRelationshipQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rrq.Select(resourcerelationship.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rrq *ResourceRelationshipQuery) IDsX(ctx context.Context) []int {
	ids, err := rrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rrq *ResourceRelationshipQuery) Count(ctx context.Context) (int, error) {
	if err := rrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rrq *ResourceRelationshipQuery) CountX(ctx context.Context) int {
	count, err := rrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rrq *ResourceRelationshipQuery) Exist(ctx context.Context) (bool, error) {
	if err := rrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rrq *ResourceRelationshipQuery) ExistX(ctx context.Context) bool {
	exist, err := rrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rrq *ResourceRelationshipQuery) Clone() *ResourceRelationshipQuery {
	if rrq == nil {
		return nil
	}
	return &ResourceRelationshipQuery{
		config:                                 rrq.config,
		limit:                                  rrq.limit,
		offset:                                 rrq.offset,
		order:                                  append([]OrderFunc{}, rrq.order...),
		unique:                                 append([]string{}, rrq.unique...),
		predicates:                             append([]predicate.ResourceRelationship{}, rrq.predicates...),
		withResourcetypea:                      rrq.withResourcetypea.Clone(),
		withResourcetypeb:                      rrq.withResourcetypeb.Clone(),
		withResourcerelationshiptypefk:         rrq.withResourcerelationshiptypefk.Clone(),
		withLocationtypefk:                     rrq.withLocationtypefk.Clone(),
		withResourceRelationshipMultiplicityFk: rrq.withResourceRelationshipMultiplicityFk.Clone(),
		// clone intermediate query.
		sql:  rrq.sql.Clone(),
		path: rrq.path,
	}
}

//  WithResourcetypea tells the query-builder to eager-loads the nodes that are connected to
// the "resourcetypea" edge. The optional arguments used to configure the query builder of the edge.
func (rrq *ResourceRelationshipQuery) WithResourcetypea(opts ...func(*ResourceTypeQuery)) *ResourceRelationshipQuery {
	query := &ResourceTypeQuery{config: rrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rrq.withResourcetypea = query
	return rrq
}

//  WithResourcetypeb tells the query-builder to eager-loads the nodes that are connected to
// the "resourcetypeb" edge. The optional arguments used to configure the query builder of the edge.
func (rrq *ResourceRelationshipQuery) WithResourcetypeb(opts ...func(*ResourceTypeQuery)) *ResourceRelationshipQuery {
	query := &ResourceTypeQuery{config: rrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rrq.withResourcetypeb = query
	return rrq
}

//  WithResourcerelationshiptypefk tells the query-builder to eager-loads the nodes that are connected to
// the "resourcerelationshiptypefk" edge. The optional arguments used to configure the query builder of the edge.
func (rrq *ResourceRelationshipQuery) WithResourcerelationshiptypefk(opts ...func(*ResourceRelationshipTypeQuery)) *ResourceRelationshipQuery {
	query := &ResourceRelationshipTypeQuery{config: rrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rrq.withResourcerelationshiptypefk = query
	return rrq
}

//  WithLocationtypefk tells the query-builder to eager-loads the nodes that are connected to
// the "locationtypefk" edge. The optional arguments used to configure the query builder of the edge.
func (rrq *ResourceRelationshipQuery) WithLocationtypefk(opts ...func(*LocationTypeQuery)) *ResourceRelationshipQuery {
	query := &LocationTypeQuery{config: rrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rrq.withLocationtypefk = query
	return rrq
}

//  WithResourceRelationshipMultiplicityFk tells the query-builder to eager-loads the nodes that are connected to
// the "resource_relationship_multiplicity_fk" edge. The optional arguments used to configure the query builder of the edge.
func (rrq *ResourceRelationshipQuery) WithResourceRelationshipMultiplicityFk(opts ...func(*ResourceRelationshipMultiplicityQuery)) *ResourceRelationshipQuery {
	query := &ResourceRelationshipMultiplicityQuery{config: rrq.config}
	for _, opt := range opts {
		opt(query)
	}
	rrq.withResourceRelationshipMultiplicityFk = query
	return rrq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResourceRelationship.Query().
//		GroupBy(resourcerelationship.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rrq *ResourceRelationshipQuery) GroupBy(field string, fields ...string) *ResourceRelationshipGroupBy {
	group := &ResourceRelationshipGroupBy{config: rrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rrq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ResourceRelationship.Query().
//		Select(resourcerelationship.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rrq *ResourceRelationshipQuery) Select(field string, fields ...string) *ResourceRelationshipSelect {
	selector := &ResourceRelationshipSelect{config: rrq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rrq.sqlQuery(), nil
	}
	return selector
}

func (rrq *ResourceRelationshipQuery) prepareQuery(ctx context.Context) error {
	if rrq.path != nil {
		prev, err := rrq.path(ctx)
		if err != nil {
			return err
		}
		rrq.sql = prev
	}
	if err := resourcerelationship.Policy.EvalQuery(ctx, rrq); err != nil {
		return err
	}
	return nil
}

func (rrq *ResourceRelationshipQuery) sqlAll(ctx context.Context) ([]*ResourceRelationship, error) {
	var (
		nodes       = []*ResourceRelationship{}
		withFKs     = rrq.withFKs
		_spec       = rrq.querySpec()
		loadedTypes = [5]bool{
			rrq.withResourcetypea != nil,
			rrq.withResourcetypeb != nil,
			rrq.withResourcerelationshiptypefk != nil,
			rrq.withLocationtypefk != nil,
			rrq.withResourceRelationshipMultiplicityFk != nil,
		}
	)
	if rrq.withResourcetypea != nil || rrq.withResourcetypeb != nil || rrq.withResourcerelationshiptypefk != nil || rrq.withLocationtypefk != nil || rrq.withResourceRelationshipMultiplicityFk != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, resourcerelationship.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &ResourceRelationship{config: rrq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rrq.withResourcetypea; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourceRelationship)
		for i := range nodes {
			if fk := nodes[i].resource_type_resource_relationship_fk_a; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_type_resource_relationship_fk_a" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Resourcetypea = n
			}
		}
	}

	if query := rrq.withResourcetypeb; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourceRelationship)
		for i := range nodes {
			if fk := nodes[i].resource_type_resource_relationship_fk_b; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_type_resource_relationship_fk_b" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Resourcetypeb = n
			}
		}
	}

	if query := rrq.withResourcerelationshiptypefk; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourceRelationship)
		for i := range nodes {
			if fk := nodes[i].resource_relationship_type_resource_relationship_fk; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcerelationshiptype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_relationship_type_resource_relationship_fk" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Resourcerelationshiptypefk = n
			}
		}
	}

	if query := rrq.withLocationtypefk; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourceRelationship)
		for i := range nodes {
			if fk := nodes[i].location_type_resource_relationship_fk; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(locationtype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "location_type_resource_relationship_fk" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Locationtypefk = n
			}
		}
	}

	if query := rrq.withResourceRelationshipMultiplicityFk; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourceRelationship)
		for i := range nodes {
			if fk := nodes[i].resource_relationship_multiplicity_resource_relationship_fk; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcerelationshipmultiplicity.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_relationship_multiplicity_resource_relationship_fk" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ResourceRelationshipMultiplicityFk = n
			}
		}
	}

	return nodes, nil
}

func (rrq *ResourceRelationshipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rrq.querySpec()
	return sqlgraph.CountNodes(ctx, rrq.driver, _spec)
}

func (rrq *ResourceRelationshipQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rrq *ResourceRelationshipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcerelationship.Table,
			Columns: resourcerelationship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcerelationship.FieldID,
			},
		},
		From:   rrq.sql,
		Unique: true,
	}
	if ps := rrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, resourcerelationship.ValidColumn)
			}
		}
	}
	return _spec
}

func (rrq *ResourceRelationshipQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rrq.driver.Dialect())
	t1 := builder.Table(resourcerelationship.Table)
	selector := builder.Select(t1.Columns(resourcerelationship.Columns...)...).From(t1)
	if rrq.sql != nil {
		selector = rrq.sql
		selector.Select(selector.Columns(resourcerelationship.Columns...)...)
	}
	for _, p := range rrq.predicates {
		p(selector)
	}
	for _, p := range rrq.order {
		p(selector, resourcerelationship.ValidColumn)
	}
	if offset := rrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ResourceRelationshipGroupBy is the builder for group-by ResourceRelationship entities.
type ResourceRelationshipGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rrgb *ResourceRelationshipGroupBy) Aggregate(fns ...AggregateFunc) *ResourceRelationshipGroupBy {
	rrgb.fns = append(rrgb.fns, fns...)
	return rrgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rrgb *ResourceRelationshipGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rrgb.path(ctx)
	if err != nil {
		return err
	}
	rrgb.sql = query
	return rrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rrgb *ResourceRelationshipGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ResourceRelationshipGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rrgb.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rrgb *ResourceRelationshipGroupBy) StringsX(ctx context.Context) []string {
	v, err := rrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ResourceRelationshipGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rrgb *ResourceRelationshipGroupBy) StringX(ctx context.Context) string {
	v, err := rrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ResourceRelationshipGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rrgb.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rrgb *ResourceRelationshipGroupBy) IntsX(ctx context.Context) []int {
	v, err := rrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ResourceRelationshipGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rrgb *ResourceRelationshipGroupBy) IntX(ctx context.Context) int {
	v, err := rrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ResourceRelationshipGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rrgb.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rrgb *ResourceRelationshipGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ResourceRelationshipGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rrgb *ResourceRelationshipGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ResourceRelationshipGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rrgb.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rrgb *ResourceRelationshipGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rrgb *ResourceRelationshipGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rrgb *ResourceRelationshipGroupBy) BoolX(ctx context.Context) bool {
	v, err := rrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rrgb *ResourceRelationshipGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rrgb.fields {
		if !resourcerelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rrgb *ResourceRelationshipGroupBy) sqlQuery() *sql.Selector {
	selector := rrgb.sql
	columns := make([]string, 0, len(rrgb.fields)+len(rrgb.fns))
	columns = append(columns, rrgb.fields...)
	for _, fn := range rrgb.fns {
		columns = append(columns, fn(selector, resourcerelationship.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(rrgb.fields...)
}

// ResourceRelationshipSelect is the builder for select fields of ResourceRelationship entities.
type ResourceRelationshipSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rrs *ResourceRelationshipSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rrs.path(ctx)
	if err != nil {
		return err
	}
	rrs.sql = query
	return rrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rrs *ResourceRelationshipSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rrs *ResourceRelationshipSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rrs.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rrs *ResourceRelationshipSelect) StringsX(ctx context.Context) []string {
	v, err := rrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rrs *ResourceRelationshipSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rrs *ResourceRelationshipSelect) StringX(ctx context.Context) string {
	v, err := rrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rrs *ResourceRelationshipSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rrs.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rrs *ResourceRelationshipSelect) IntsX(ctx context.Context) []int {
	v, err := rrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rrs *ResourceRelationshipSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rrs *ResourceRelationshipSelect) IntX(ctx context.Context) int {
	v, err := rrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rrs *ResourceRelationshipSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rrs.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rrs *ResourceRelationshipSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rrs *ResourceRelationshipSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rrs *ResourceRelationshipSelect) Float64X(ctx context.Context) float64 {
	v, err := rrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rrs *ResourceRelationshipSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rrs.fields) > 1 {
		return nil, errors.New("ent: ResourceRelationshipSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rrs *ResourceRelationshipSelect) BoolsX(ctx context.Context) []bool {
	v, err := rrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rrs *ResourceRelationshipSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcerelationship.Label}
	default:
		err = fmt.Errorf("ent: ResourceRelationshipSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rrs *ResourceRelationshipSelect) BoolX(ctx context.Context) bool {
	v, err := rrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rrs *ResourceRelationshipSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rrs.fields {
		if !resourcerelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := rrs.sqlQuery().Query()
	if err := rrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rrs *ResourceRelationshipSelect) sqlQuery() sql.Querier {
	selector := rrs.sql
	selector.Select(selector.Columns(rrs.fields...)...)
	return selector
}
