// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecificationrelationship"
)

// ResourceSpecificationRelationship is the model entity for the ResourceSpecificationRelationship schema.
type ResourceSpecificationRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceSpecificationRelationshipQuery when eager-loading is set.
	Edges                                         ResourceSpecificationRelationshipEdges `json:"edges"`
	resource_specification_resource_specification *int
}

// ResourceSpecificationRelationshipEdges holds the relations/edges for other nodes in the graph.
type ResourceSpecificationRelationshipEdges struct {
	// Resourcespecification holds the value of the resourcespecification edge.
	Resourcespecification *ResourceSpecification
	// ResourceSpecificationRelationship holds the value of the resource_specification_relationship edge.
	ResourceSpecificationRelationship []*ResourceSpecificationItems
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResourcespecificationOrErr returns the Resourcespecification value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceSpecificationRelationshipEdges) ResourcespecificationOrErr() (*ResourceSpecification, error) {
	if e.loadedTypes[0] {
		if e.Resourcespecification == nil {
			// The edge resourcespecification was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcespecification.Label}
		}
		return e.Resourcespecification, nil
	}
	return nil, &NotLoadedError{edge: "resourcespecification"}
}

// ResourceSpecificationRelationshipOrErr returns the ResourceSpecificationRelationship value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceSpecificationRelationshipEdges) ResourceSpecificationRelationshipOrErr() ([]*ResourceSpecificationItems, error) {
	if e.loadedTypes[1] {
		return e.ResourceSpecificationRelationship, nil
	}
	return nil, &NotLoadedError{edge: "resource_specification_relationship"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceSpecificationRelationship) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ResourceSpecificationRelationship) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // resource_specification_resource_specification
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceSpecificationRelationship fields.
func (rsr *ResourceSpecificationRelationship) assignValues(values ...interface{}) error {
	if m, n := len(values), len(resourcespecificationrelationship.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rsr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		rsr.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		rsr.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		rsr.Name = value.String
	}
	values = values[3:]
	if len(values) == len(resourcespecificationrelationship.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_specification_resource_specification", value)
		} else if value.Valid {
			rsr.resource_specification_resource_specification = new(int)
			*rsr.resource_specification_resource_specification = int(value.Int64)
		}
	}
	return nil
}

// QueryResourcespecification queries the resourcespecification edge of the ResourceSpecificationRelationship.
func (rsr *ResourceSpecificationRelationship) QueryResourcespecification() *ResourceSpecificationQuery {
	return (&ResourceSpecificationRelationshipClient{config: rsr.config}).QueryResourcespecification(rsr)
}

// QueryResourceSpecificationRelationship queries the resource_specification_relationship edge of the ResourceSpecificationRelationship.
func (rsr *ResourceSpecificationRelationship) QueryResourceSpecificationRelationship() *ResourceSpecificationItemsQuery {
	return (&ResourceSpecificationRelationshipClient{config: rsr.config}).QueryResourceSpecificationRelationship(rsr)
}

// Update returns a builder for updating this ResourceSpecificationRelationship.
// Note that, you need to call ResourceSpecificationRelationship.Unwrap() before calling this method, if this ResourceSpecificationRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (rsr *ResourceSpecificationRelationship) Update() *ResourceSpecificationRelationshipUpdateOne {
	return (&ResourceSpecificationRelationshipClient{config: rsr.config}).UpdateOne(rsr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rsr *ResourceSpecificationRelationship) Unwrap() *ResourceSpecificationRelationship {
	tx, ok := rsr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourceSpecificationRelationship is not a transactional entity")
	}
	rsr.config.driver = tx.drv
	return rsr
}

// String implements the fmt.Stringer.
func (rsr *ResourceSpecificationRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceSpecificationRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v", rsr.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(rsr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(rsr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(rsr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ResourceSpecificationRelationships is a parsable slice of ResourceSpecificationRelationship.
type ResourceSpecificationRelationships []*ResourceSpecificationRelationship

func (rsr ResourceSpecificationRelationships) config(cfg config) {
	for _i := range rsr {
		rsr[_i].config = cfg
	}
}
