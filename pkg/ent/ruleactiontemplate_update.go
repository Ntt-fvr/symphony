// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/ruleactiontemplate"
)

// RuleActionTemplateUpdate is the builder for updating RuleActionTemplate entities.
type RuleActionTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *RuleActionTemplateMutation
}

// Where adds a new predicate for the builder.
func (ratu *RuleActionTemplateUpdate) Where(ps ...predicate.RuleActionTemplate) *RuleActionTemplateUpdate {
	ratu.mutation.predicates = append(ratu.mutation.predicates, ps...)
	return ratu
}

// SetText sets the text field.
func (ratu *RuleActionTemplateUpdate) SetText(s string) *RuleActionTemplateUpdate {
	ratu.mutation.SetText(s)
	return ratu
}

// Mutation returns the RuleActionTemplateMutation object of the builder.
func (ratu *RuleActionTemplateUpdate) Mutation() *RuleActionTemplateMutation {
	return ratu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ratu *RuleActionTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ratu.defaults()
	if len(ratu.hooks) == 0 {
		if err = ratu.check(); err != nil {
			return 0, err
		}
		affected, err = ratu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleActionTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ratu.check(); err != nil {
				return 0, err
			}
			ratu.mutation = mutation
			affected, err = ratu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ratu.hooks) - 1; i >= 0; i-- {
			mut = ratu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ratu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ratu *RuleActionTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ratu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ratu *RuleActionTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ratu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ratu *RuleActionTemplateUpdate) ExecX(ctx context.Context) {
	if err := ratu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ratu *RuleActionTemplateUpdate) defaults() {
	if _, ok := ratu.mutation.UpdateTime(); !ok {
		v := ruleactiontemplate.UpdateDefaultUpdateTime()
		ratu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ratu *RuleActionTemplateUpdate) check() error {
	if v, ok := ratu.mutation.Text(); ok {
		if err := ruleactiontemplate.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf("ent: validator failed for field \"text\": %w", err)}
		}
	}
	return nil
}

func (ratu *RuleActionTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ruleactiontemplate.Table,
			Columns: ruleactiontemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ruleactiontemplate.FieldID,
			},
		},
	}
	if ps := ratu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ratu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ruleactiontemplate.FieldUpdateTime,
		})
	}
	if value, ok := ratu.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ruleactiontemplate.FieldText,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ratu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ruleactiontemplate.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RuleActionTemplateUpdateOne is the builder for updating a single RuleActionTemplate entity.
type RuleActionTemplateUpdateOne struct {
	config
	hooks    []Hook
	mutation *RuleActionTemplateMutation
}

// SetText sets the text field.
func (ratuo *RuleActionTemplateUpdateOne) SetText(s string) *RuleActionTemplateUpdateOne {
	ratuo.mutation.SetText(s)
	return ratuo
}

// Mutation returns the RuleActionTemplateMutation object of the builder.
func (ratuo *RuleActionTemplateUpdateOne) Mutation() *RuleActionTemplateMutation {
	return ratuo.mutation
}

// Save executes the query and returns the updated entity.
func (ratuo *RuleActionTemplateUpdateOne) Save(ctx context.Context) (*RuleActionTemplate, error) {
	var (
		err  error
		node *RuleActionTemplate
	)
	ratuo.defaults()
	if len(ratuo.hooks) == 0 {
		if err = ratuo.check(); err != nil {
			return nil, err
		}
		node, err = ratuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleActionTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ratuo.check(); err != nil {
				return nil, err
			}
			ratuo.mutation = mutation
			node, err = ratuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ratuo.hooks) - 1; i >= 0; i-- {
			mut = ratuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ratuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ratuo *RuleActionTemplateUpdateOne) SaveX(ctx context.Context) *RuleActionTemplate {
	node, err := ratuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ratuo *RuleActionTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ratuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ratuo *RuleActionTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ratuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ratuo *RuleActionTemplateUpdateOne) defaults() {
	if _, ok := ratuo.mutation.UpdateTime(); !ok {
		v := ruleactiontemplate.UpdateDefaultUpdateTime()
		ratuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ratuo *RuleActionTemplateUpdateOne) check() error {
	if v, ok := ratuo.mutation.Text(); ok {
		if err := ruleactiontemplate.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf("ent: validator failed for field \"text\": %w", err)}
		}
	}
	return nil
}

func (ratuo *RuleActionTemplateUpdateOne) sqlSave(ctx context.Context) (_node *RuleActionTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ruleactiontemplate.Table,
			Columns: ruleactiontemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ruleactiontemplate.FieldID,
			},
		},
	}
	id, ok := ratuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RuleActionTemplate.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ratuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ruleactiontemplate.FieldUpdateTime,
		})
	}
	if value, ok := ratuo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ruleactiontemplate.FieldText,
		})
	}
	_node = &RuleActionTemplate{config: ratuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ratuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ruleactiontemplate.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
