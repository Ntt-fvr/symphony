// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
)

// Vendor is the model entity for the Vendor schema.
type Vendor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorQuery when eager-loading is set.
	Edges                                                VendorEdges `json:"edges"`
	resource_specification_resource_specification_vendor *int
}

// VendorEdges holds the relations/edges for other nodes in the graph.
type VendorEdges struct {
	// VendorFk holds the value of the vendor_fk edge.
	VendorFk []*Counter
	// VendorsRecomendations holds the value of the vendors_recomendations edge.
	VendorsRecomendations []*Recommendations
	// ResourceSpecification holds the value of the resource_specification edge.
	ResourceSpecification *ResourceSpecification
	// VendorRs holds the value of the vendor_rs edge.
	VendorRs []*ResourceSpecification
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// VendorFkOrErr returns the VendorFk value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) VendorFkOrErr() ([]*Counter, error) {
	if e.loadedTypes[0] {
		return e.VendorFk, nil
	}
	return nil, &NotLoadedError{edge: "vendor_fk"}
}

// VendorsRecomendationsOrErr returns the VendorsRecomendations value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) VendorsRecomendationsOrErr() ([]*Recommendations, error) {
	if e.loadedTypes[1] {
		return e.VendorsRecomendations, nil
	}
	return nil, &NotLoadedError{edge: "vendors_recomendations"}
}

// ResourceSpecificationOrErr returns the ResourceSpecification value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorEdges) ResourceSpecificationOrErr() (*ResourceSpecification, error) {
	if e.loadedTypes[2] {
		if e.ResourceSpecification == nil {
			// The edge resource_specification was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcespecification.Label}
		}
		return e.ResourceSpecification, nil
	}
	return nil, &NotLoadedError{edge: "resource_specification"}
}

// VendorRsOrErr returns the VendorRs value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) VendorRsOrErr() ([]*ResourceSpecification, error) {
	if e.loadedTypes[3] {
		return e.VendorRs, nil
	}
	return nil, &NotLoadedError{edge: "vendor_rs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vendor) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Vendor) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // resource_specification_resource_specification_vendor
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vendor fields.
func (v *Vendor) assignValues(values ...interface{}) error {
	if m, n := len(values), len(vendor.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	v.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		v.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		v.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		v.Name = value.String
	}
	values = values[3:]
	if len(values) == len(vendor.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_specification_resource_specification_vendor", value)
		} else if value.Valid {
			v.resource_specification_resource_specification_vendor = new(int)
			*v.resource_specification_resource_specification_vendor = int(value.Int64)
		}
	}
	return nil
}

// QueryVendorFk queries the vendor_fk edge of the Vendor.
func (v *Vendor) QueryVendorFk() *CounterQuery {
	return (&VendorClient{config: v.config}).QueryVendorFk(v)
}

// QueryVendorsRecomendations queries the vendors_recomendations edge of the Vendor.
func (v *Vendor) QueryVendorsRecomendations() *RecommendationsQuery {
	return (&VendorClient{config: v.config}).QueryVendorsRecomendations(v)
}

// QueryResourceSpecification queries the resource_specification edge of the Vendor.
func (v *Vendor) QueryResourceSpecification() *ResourceSpecificationQuery {
	return (&VendorClient{config: v.config}).QueryResourceSpecification(v)
}

// QueryVendorRs queries the vendor_rs edge of the Vendor.
func (v *Vendor) QueryVendorRs() *ResourceSpecificationQuery {
	return (&VendorClient{config: v.config}).QueryVendorRs(v)
}

// Update returns a builder for updating this Vendor.
// Note that, you need to call Vendor.Unwrap() before calling this method, if this Vendor
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vendor) Update() *VendorUpdateOne {
	return (&VendorClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (v *Vendor) Unwrap() *Vendor {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vendor is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vendor) String() string {
	var builder strings.Builder
	builder.WriteString("Vendor(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(v.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(v.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(v.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Vendors is a parsable slice of Vendor.
type Vendors []*Vendor

func (v Vendors) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
