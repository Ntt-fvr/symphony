// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/automationactivity"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/ent/user"
)

// AutomationActivity is the model entity for the AutomationActivity schema.
type AutomationActivity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ActivityType holds the value of the "activity_type" field.
	ActivityType automationactivity.ActivityType `json:"activity_type,omitempty"`
	// AutomationEntityType holds the value of the "automation_entity_type" field.
	AutomationEntityType automationactivity.AutomationEntityType `json:"automation_entity_type,omitempty"`
	// OldValue holds the value of the "old_value" field.
	OldValue string `json:"old_value,omitempty"`
	// NewValue holds the value of the "new_value" field.
	NewValue string `json:"new_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AutomationActivityQuery when eager-loading is set.
	Edges                           AutomationActivityEdges `json:"edges"`
	automation_activity_author      *int
	block_instance_block_activities *int
	flow_instance_flow_activities   *int
}

// AutomationActivityEdges holds the relations/edges for other nodes in the graph.
type AutomationActivityEdges struct {
	// Author holds the value of the author edge.
	Author *User
	// FlowInstance holds the value of the flow_instance edge.
	FlowInstance *FlowInstance
	// BlockInstance holds the value of the block_instance edge.
	BlockInstance *BlockInstance
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AutomationActivityEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// FlowInstanceOrErr returns the FlowInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AutomationActivityEdges) FlowInstanceOrErr() (*FlowInstance, error) {
	if e.loadedTypes[1] {
		if e.FlowInstance == nil {
			// The edge flow_instance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flowinstance.Label}
		}
		return e.FlowInstance, nil
	}
	return nil, &NotLoadedError{edge: "flow_instance"}
}

// BlockInstanceOrErr returns the BlockInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AutomationActivityEdges) BlockInstanceOrErr() (*BlockInstance, error) {
	if e.loadedTypes[2] {
		if e.BlockInstance == nil {
			// The edge block_instance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: blockinstance.Label}
		}
		return e.BlockInstance, nil
	}
	return nil, &NotLoadedError{edge: "block_instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AutomationActivity) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // activity_type
		&sql.NullString{}, // automation_entity_type
		&sql.NullString{}, // old_value
		&sql.NullString{}, // new_value
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*AutomationActivity) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // automation_activity_author
		&sql.NullInt64{}, // block_instance_block_activities
		&sql.NullInt64{}, // flow_instance_flow_activities
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AutomationActivity fields.
func (aa *AutomationActivity) assignValues(values ...interface{}) error {
	if m, n := len(values), len(automationactivity.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	aa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		aa.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		aa.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field activity_type", values[2])
	} else if value.Valid {
		aa.ActivityType = automationactivity.ActivityType(value.String)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field automation_entity_type", values[3])
	} else if value.Valid {
		aa.AutomationEntityType = automationactivity.AutomationEntityType(value.String)
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field old_value", values[4])
	} else if value.Valid {
		aa.OldValue = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field new_value", values[5])
	} else if value.Valid {
		aa.NewValue = value.String
	}
	values = values[6:]
	if len(values) == len(automationactivity.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field automation_activity_author", value)
		} else if value.Valid {
			aa.automation_activity_author = new(int)
			*aa.automation_activity_author = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field block_instance_block_activities", value)
		} else if value.Valid {
			aa.block_instance_block_activities = new(int)
			*aa.block_instance_block_activities = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field flow_instance_flow_activities", value)
		} else if value.Valid {
			aa.flow_instance_flow_activities = new(int)
			*aa.flow_instance_flow_activities = int(value.Int64)
		}
	}
	return nil
}

// QueryAuthor queries the author edge of the AutomationActivity.
func (aa *AutomationActivity) QueryAuthor() *UserQuery {
	return (&AutomationActivityClient{config: aa.config}).QueryAuthor(aa)
}

// QueryFlowInstance queries the flow_instance edge of the AutomationActivity.
func (aa *AutomationActivity) QueryFlowInstance() *FlowInstanceQuery {
	return (&AutomationActivityClient{config: aa.config}).QueryFlowInstance(aa)
}

// QueryBlockInstance queries the block_instance edge of the AutomationActivity.
func (aa *AutomationActivity) QueryBlockInstance() *BlockInstanceQuery {
	return (&AutomationActivityClient{config: aa.config}).QueryBlockInstance(aa)
}

// Update returns a builder for updating this AutomationActivity.
// Note that, you need to call AutomationActivity.Unwrap() before calling this method, if this AutomationActivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *AutomationActivity) Update() *AutomationActivityUpdateOne {
	return (&AutomationActivityClient{config: aa.config}).UpdateOne(aa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (aa *AutomationActivity) Unwrap() *AutomationActivity {
	tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: AutomationActivity is not a transactional entity")
	}
	aa.config.driver = tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *AutomationActivity) String() string {
	var builder strings.Builder
	builder.WriteString("AutomationActivity(")
	builder.WriteString(fmt.Sprintf("id=%v", aa.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(aa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(aa.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", activity_type=")
	builder.WriteString(fmt.Sprintf("%v", aa.ActivityType))
	builder.WriteString(", automation_entity_type=")
	builder.WriteString(fmt.Sprintf("%v", aa.AutomationEntityType))
	builder.WriteString(", old_value=")
	builder.WriteString(aa.OldValue)
	builder.WriteString(", new_value=")
	builder.WriteString(aa.NewValue)
	builder.WriteByte(')')
	return builder.String()
}

// AutomationActivities is a parsable slice of AutomationActivity.
type AutomationActivities []*AutomationActivity

func (aa AutomationActivities) config(cfg config) {
	for _i := range aa {
		aa[_i].config = cfg
	}
}
