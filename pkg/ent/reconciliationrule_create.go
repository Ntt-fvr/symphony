// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/reconciliationrule"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/ruleaction"
)

// ReconciliationRuleCreate is the builder for creating a ReconciliationRule entity.
type ReconciliationRuleCreate struct {
	config
	mutation *ReconciliationRuleMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (rrc *ReconciliationRuleCreate) SetCreateTime(t time.Time) *ReconciliationRuleCreate {
	rrc.mutation.SetCreateTime(t)
	return rrc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (rrc *ReconciliationRuleCreate) SetNillableCreateTime(t *time.Time) *ReconciliationRuleCreate {
	if t != nil {
		rrc.SetCreateTime(*t)
	}
	return rrc
}

// SetUpdateTime sets the update_time field.
func (rrc *ReconciliationRuleCreate) SetUpdateTime(t time.Time) *ReconciliationRuleCreate {
	rrc.mutation.SetUpdateTime(t)
	return rrc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (rrc *ReconciliationRuleCreate) SetNillableUpdateTime(t *time.Time) *ReconciliationRuleCreate {
	if t != nil {
		rrc.SetUpdateTime(*t)
	}
	return rrc
}

// SetName sets the name field.
func (rrc *ReconciliationRuleCreate) SetName(s string) *ReconciliationRuleCreate {
	rrc.mutation.SetName(s)
	return rrc
}

// AddReconciliationRuleTypeIDs adds the reconciliation_rule_type edge to ResourceType by ids.
func (rrc *ReconciliationRuleCreate) AddReconciliationRuleTypeIDs(ids ...int) *ReconciliationRuleCreate {
	rrc.mutation.AddReconciliationRuleTypeIDs(ids...)
	return rrc
}

// AddReconciliationRuleType adds the reconciliation_rule_type edges to ResourceType.
func (rrc *ReconciliationRuleCreate) AddReconciliationRuleType(r ...*ResourceType) *ReconciliationRuleCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrc.AddReconciliationRuleTypeIDs(ids...)
}

// AddReconciliationRuleSpecificationIDs adds the reconciliation_rule_specification edge to ResourceSpecification by ids.
func (rrc *ReconciliationRuleCreate) AddReconciliationRuleSpecificationIDs(ids ...int) *ReconciliationRuleCreate {
	rrc.mutation.AddReconciliationRuleSpecificationIDs(ids...)
	return rrc
}

// AddReconciliationRuleSpecification adds the reconciliation_rule_specification edges to ResourceSpecification.
func (rrc *ReconciliationRuleCreate) AddReconciliationRuleSpecification(r ...*ResourceSpecification) *ReconciliationRuleCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrc.AddReconciliationRuleSpecificationIDs(ids...)
}

// AddReconciliationRuleRuleActionIDs adds the reconciliation_rule_rule_action edge to RuleAction by ids.
func (rrc *ReconciliationRuleCreate) AddReconciliationRuleRuleActionIDs(ids ...int) *ReconciliationRuleCreate {
	rrc.mutation.AddReconciliationRuleRuleActionIDs(ids...)
	return rrc
}

// AddReconciliationRuleRuleAction adds the reconciliation_rule_rule_action edges to RuleAction.
func (rrc *ReconciliationRuleCreate) AddReconciliationRuleRuleAction(r ...*RuleAction) *ReconciliationRuleCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrc.AddReconciliationRuleRuleActionIDs(ids...)
}

// Mutation returns the ReconciliationRuleMutation object of the builder.
func (rrc *ReconciliationRuleCreate) Mutation() *ReconciliationRuleMutation {
	return rrc.mutation
}

// Save creates the ReconciliationRule in the database.
func (rrc *ReconciliationRuleCreate) Save(ctx context.Context) (*ReconciliationRule, error) {
	var (
		err  error
		node *ReconciliationRule
	)
	rrc.defaults()
	if len(rrc.hooks) == 0 {
		if err = rrc.check(); err != nil {
			return nil, err
		}
		node, err = rrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReconciliationRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rrc.check(); err != nil {
				return nil, err
			}
			rrc.mutation = mutation
			node, err = rrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rrc.hooks) - 1; i >= 0; i-- {
			mut = rrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *ReconciliationRuleCreate) SaveX(ctx context.Context) *ReconciliationRule {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rrc *ReconciliationRuleCreate) defaults() {
	if _, ok := rrc.mutation.CreateTime(); !ok {
		v := reconciliationrule.DefaultCreateTime()
		rrc.mutation.SetCreateTime(v)
	}
	if _, ok := rrc.mutation.UpdateTime(); !ok {
		v := reconciliationrule.DefaultUpdateTime()
		rrc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrc *ReconciliationRuleCreate) check() error {
	if _, ok := rrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := rrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := rrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := rrc.mutation.Name(); ok {
		if err := reconciliationrule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rrc *ReconciliationRuleCreate) sqlSave(ctx context.Context) (*ReconciliationRule, error) {
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rrc *ReconciliationRuleCreate) createSpec() (*ReconciliationRule, *sqlgraph.CreateSpec) {
	var (
		_node = &ReconciliationRule{config: rrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reconciliationrule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reconciliationrule.FieldID,
			},
		}
	)
	if value, ok := rrc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reconciliationrule.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := rrc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reconciliationrule.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := rrc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reconciliationrule.FieldName,
		})
		_node.Name = value
	}
	if nodes := rrc.mutation.ReconciliationRuleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleTypeTable,
			Columns: []string{reconciliationrule.ReconciliationRuleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.ReconciliationRuleSpecificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleSpecificationTable,
			Columns: []string{reconciliationrule.ReconciliationRuleSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.ReconciliationRuleRuleActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleRuleActionTable,
			Columns: []string{reconciliationrule.ReconciliationRuleRuleActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruleaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReconciliationRuleCreateBulk is the builder for creating a bulk of ReconciliationRule entities.
type ReconciliationRuleCreateBulk struct {
	config
	builders []*ReconciliationRuleCreate
}

// Save creates the ReconciliationRule entities in the database.
func (rrcb *ReconciliationRuleCreateBulk) Save(ctx context.Context) ([]*ReconciliationRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*ReconciliationRule, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReconciliationRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rrcb *ReconciliationRuleCreateBulk) SaveX(ctx context.Context) []*ReconciliationRule {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
