// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/cost"
	"github.com/facebookincubator/symphony/pkg/ent/uplitem"
)

// UplItemCreate is the builder for creating a UplItem entity.
type UplItemCreate struct {
	config
	mutation *UplItemMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (uic *UplItemCreate) SetCreateTime(t time.Time) *UplItemCreate {
	uic.mutation.SetCreateTime(t)
	return uic
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (uic *UplItemCreate) SetNillableCreateTime(t *time.Time) *UplItemCreate {
	if t != nil {
		uic.SetCreateTime(*t)
	}
	return uic
}

// SetUpdateTime sets the update_time field.
func (uic *UplItemCreate) SetUpdateTime(t time.Time) *UplItemCreate {
	uic.mutation.SetUpdateTime(t)
	return uic
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (uic *UplItemCreate) SetNillableUpdateTime(t *time.Time) *UplItemCreate {
	if t != nil {
		uic.SetUpdateTime(*t)
	}
	return uic
}

// SetExternalid sets the externalid field.
func (uic *UplItemCreate) SetExternalid(s string) *UplItemCreate {
	uic.mutation.SetExternalid(s)
	return uic
}

// SetItem sets the item field.
func (uic *UplItemCreate) SetItem(s string) *UplItemCreate {
	uic.mutation.SetItem(s)
	return uic
}

// SetUnit sets the unit field.
func (uic *UplItemCreate) SetUnit(f float64) *UplItemCreate {
	uic.mutation.SetUnit(f)
	return uic
}

// SetPrice sets the price field.
func (uic *UplItemCreate) SetPrice(f float64) *UplItemCreate {
	uic.mutation.SetPrice(f)
	return uic
}

// SetUplItemID sets the UplItem edge to Cost by id.
func (uic *UplItemCreate) SetUplItemID(id int) *UplItemCreate {
	uic.mutation.SetUplItemID(id)
	return uic
}

// SetNillableUplItemID sets the UplItem edge to Cost by id if the given value is not nil.
func (uic *UplItemCreate) SetNillableUplItemID(id *int) *UplItemCreate {
	if id != nil {
		uic = uic.SetUplItemID(*id)
	}
	return uic
}

// SetUplItem sets the UplItem edge to Cost.
func (uic *UplItemCreate) SetUplItem(c *Cost) *UplItemCreate {
	return uic.SetUplItemID(c.ID)
}

// Mutation returns the UplItemMutation object of the builder.
func (uic *UplItemCreate) Mutation() *UplItemMutation {
	return uic.mutation
}

// Save creates the UplItem in the database.
func (uic *UplItemCreate) Save(ctx context.Context) (*UplItem, error) {
	var (
		err  error
		node *UplItem
	)
	uic.defaults()
	if len(uic.hooks) == 0 {
		if err = uic.check(); err != nil {
			return nil, err
		}
		node, err = uic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UplItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uic.check(); err != nil {
				return nil, err
			}
			uic.mutation = mutation
			node, err = uic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uic.hooks) - 1; i >= 0; i-- {
			mut = uic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uic *UplItemCreate) SaveX(ctx context.Context) *UplItem {
	v, err := uic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (uic *UplItemCreate) defaults() {
	if _, ok := uic.mutation.CreateTime(); !ok {
		v := uplitem.DefaultCreateTime()
		uic.mutation.SetCreateTime(v)
	}
	if _, ok := uic.mutation.UpdateTime(); !ok {
		v := uplitem.DefaultUpdateTime()
		uic.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uic *UplItemCreate) check() error {
	if _, ok := uic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := uic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := uic.mutation.Externalid(); !ok {
		return &ValidationError{Name: "externalid", err: errors.New("ent: missing required field \"externalid\"")}
	}
	if _, ok := uic.mutation.Item(); !ok {
		return &ValidationError{Name: "item", err: errors.New("ent: missing required field \"item\"")}
	}
	if _, ok := uic.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New("ent: missing required field \"unit\"")}
	}
	if _, ok := uic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New("ent: missing required field \"price\"")}
	}
	return nil
}

func (uic *UplItemCreate) sqlSave(ctx context.Context) (*UplItem, error) {
	_node, _spec := uic.createSpec()
	if err := sqlgraph.CreateNode(ctx, uic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uic *UplItemCreate) createSpec() (*UplItem, *sqlgraph.CreateSpec) {
	var (
		_node = &UplItem{config: uic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: uplitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uplitem.FieldID,
			},
		}
	)
	if value, ok := uic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: uplitem.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := uic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: uplitem.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := uic.mutation.Externalid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uplitem.FieldExternalid,
		})
		_node.Externalid = value
	}
	if value, ok := uic.mutation.Item(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uplitem.FieldItem,
		})
		_node.Item = value
	}
	if value, ok := uic.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: uplitem.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := uic.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: uplitem.FieldPrice,
		})
		_node.Price = value
	}
	if nodes := uic.mutation.UplItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   uplitem.UplItemTable,
			Columns: []string{uplitem.UplItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UplItemCreateBulk is the builder for creating a bulk of UplItem entities.
type UplItemCreateBulk struct {
	config
	builders []*UplItemCreate
}

// Save creates the UplItem entities in the database.
func (uicb *UplItemCreateBulk) Save(ctx context.Context) ([]*UplItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uicb.builders))
	nodes := make([]*UplItem, len(uicb.builders))
	mutators := make([]Mutator, len(uicb.builders))
	for i := range uicb.builders {
		func(i int, root context.Context) {
			builder := uicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UplItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (uicb *UplItemCreateBulk) SaveX(ctx context.Context) []*UplItem {
	v, err := uicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
