// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecificationrelationship"
	"github.com/facebookincubator/symphony/pkg/ent/resourcesritems"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
)

// ResourceSRItems is the model entity for the ResourceSRItems schema.
type ResourceSRItems struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceSRItemsQuery when eager-loading is set.
	Edges                                           ResourceSRItemsEdges `json:"edges"`
	resource_specification_relationship_resource_sr *int
	resource_type_resourcetype_items                *int
}

// ResourceSRItemsEdges holds the relations/edges for other nodes in the graph.
type ResourceSRItemsEdges struct {
	// Resourcesr holds the value of the resourcesr edge.
	Resourcesr *ResourceSpecificationRelationship
	// Resourcetype holds the value of the resourcetype edge.
	Resourcetype *ResourceType
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResourcesrOrErr returns the Resourcesr value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceSRItemsEdges) ResourcesrOrErr() (*ResourceSpecificationRelationship, error) {
	if e.loadedTypes[0] {
		if e.Resourcesr == nil {
			// The edge resourcesr was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcespecificationrelationship.Label}
		}
		return e.Resourcesr, nil
	}
	return nil, &NotLoadedError{edge: "resourcesr"}
}

// ResourcetypeOrErr returns the Resourcetype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceSRItemsEdges) ResourcetypeOrErr() (*ResourceType, error) {
	if e.loadedTypes[1] {
		if e.Resourcetype == nil {
			// The edge resourcetype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcetype.Label}
		}
		return e.Resourcetype, nil
	}
	return nil, &NotLoadedError{edge: "resourcetype"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceSRItems) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ResourceSRItems) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // resource_specification_relationship_resource_sr
		&sql.NullInt64{}, // resource_type_resourcetype_items
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceSRItems fields.
func (rsi *ResourceSRItems) assignValues(values ...interface{}) error {
	if m, n := len(values), len(resourcesritems.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rsi.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		rsi.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		rsi.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		rsi.Name = new(string)
		*rsi.Name = value.String
	}
	values = values[3:]
	if len(values) == len(resourcesritems.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_specification_relationship_resource_sr", value)
		} else if value.Valid {
			rsi.resource_specification_relationship_resource_sr = new(int)
			*rsi.resource_specification_relationship_resource_sr = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_type_resourcetype_items", value)
		} else if value.Valid {
			rsi.resource_type_resourcetype_items = new(int)
			*rsi.resource_type_resourcetype_items = int(value.Int64)
		}
	}
	return nil
}

// QueryResourcesr queries the resourcesr edge of the ResourceSRItems.
func (rsi *ResourceSRItems) QueryResourcesr() *ResourceSpecificationRelationshipQuery {
	return (&ResourceSRItemsClient{config: rsi.config}).QueryResourcesr(rsi)
}

// QueryResourcetype queries the resourcetype edge of the ResourceSRItems.
func (rsi *ResourceSRItems) QueryResourcetype() *ResourceTypeQuery {
	return (&ResourceSRItemsClient{config: rsi.config}).QueryResourcetype(rsi)
}

// Update returns a builder for updating this ResourceSRItems.
// Note that, you need to call ResourceSRItems.Unwrap() before calling this method, if this ResourceSRItems
// was returned from a transaction, and the transaction was committed or rolled back.
func (rsi *ResourceSRItems) Update() *ResourceSRItemsUpdateOne {
	return (&ResourceSRItemsClient{config: rsi.config}).UpdateOne(rsi)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rsi *ResourceSRItems) Unwrap() *ResourceSRItems {
	tx, ok := rsi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourceSRItems is not a transactional entity")
	}
	rsi.config.driver = tx.drv
	return rsi
}

// String implements the fmt.Stringer.
func (rsi *ResourceSRItems) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceSRItems(")
	builder.WriteString(fmt.Sprintf("id=%v", rsi.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(rsi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(rsi.UpdateTime.Format(time.ANSIC))
	if v := rsi.Name; v != nil {
		builder.WriteString(", name=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ResourceSRItemsSlice is a parsable slice of ResourceSRItems.
type ResourceSRItemsSlice []*ResourceSRItems

func (rsi ResourceSRItemsSlice) config(cfg config) {
	for _i := range rsi {
		rsi[_i].config = cfg
	}
}
