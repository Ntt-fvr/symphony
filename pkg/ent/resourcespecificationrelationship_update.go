// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecificationitems"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecificationrelationship"
)

// ResourceSpecificationRelationshipUpdate is the builder for updating ResourceSpecificationRelationship entities.
type ResourceSpecificationRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceSpecificationRelationshipMutation
}

// Where adds a new predicate for the builder.
func (rsru *ResourceSpecificationRelationshipUpdate) Where(ps ...predicate.ResourceSpecificationRelationship) *ResourceSpecificationRelationshipUpdate {
	rsru.mutation.predicates = append(rsru.mutation.predicates, ps...)
	return rsru
}

// SetName sets the name field.
func (rsru *ResourceSpecificationRelationshipUpdate) SetName(s string) *ResourceSpecificationRelationshipUpdate {
	rsru.mutation.SetName(s)
	return rsru
}

// SetResourcespecificationID sets the resourcespecification edge to ResourceSpecification by id.
func (rsru *ResourceSpecificationRelationshipUpdate) SetResourcespecificationID(id int) *ResourceSpecificationRelationshipUpdate {
	rsru.mutation.SetResourcespecificationID(id)
	return rsru
}

// SetNillableResourcespecificationID sets the resourcespecification edge to ResourceSpecification by id if the given value is not nil.
func (rsru *ResourceSpecificationRelationshipUpdate) SetNillableResourcespecificationID(id *int) *ResourceSpecificationRelationshipUpdate {
	if id != nil {
		rsru = rsru.SetResourcespecificationID(*id)
	}
	return rsru
}

// SetResourcespecification sets the resourcespecification edge to ResourceSpecification.
func (rsru *ResourceSpecificationRelationshipUpdate) SetResourcespecification(r *ResourceSpecification) *ResourceSpecificationRelationshipUpdate {
	return rsru.SetResourcespecificationID(r.ID)
}

// AddResourceSrIDs adds the resource_sr edge to ResourceSpecificationItems by ids.
func (rsru *ResourceSpecificationRelationshipUpdate) AddResourceSrIDs(ids ...int) *ResourceSpecificationRelationshipUpdate {
	rsru.mutation.AddResourceSrIDs(ids...)
	return rsru
}

// AddResourceSr adds the resource_sr edges to ResourceSpecificationItems.
func (rsru *ResourceSpecificationRelationshipUpdate) AddResourceSr(r ...*ResourceSpecificationItems) *ResourceSpecificationRelationshipUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsru.AddResourceSrIDs(ids...)
}

// Mutation returns the ResourceSpecificationRelationshipMutation object of the builder.
func (rsru *ResourceSpecificationRelationshipUpdate) Mutation() *ResourceSpecificationRelationshipMutation {
	return rsru.mutation
}

// ClearResourcespecification clears the "resourcespecification" edge to type ResourceSpecification.
func (rsru *ResourceSpecificationRelationshipUpdate) ClearResourcespecification() *ResourceSpecificationRelationshipUpdate {
	rsru.mutation.ClearResourcespecification()
	return rsru
}

// ClearResourceSr clears all "resource_sr" edges to type ResourceSpecificationItems.
func (rsru *ResourceSpecificationRelationshipUpdate) ClearResourceSr() *ResourceSpecificationRelationshipUpdate {
	rsru.mutation.ClearResourceSr()
	return rsru
}

// RemoveResourceSrIDs removes the resource_sr edge to ResourceSpecificationItems by ids.
func (rsru *ResourceSpecificationRelationshipUpdate) RemoveResourceSrIDs(ids ...int) *ResourceSpecificationRelationshipUpdate {
	rsru.mutation.RemoveResourceSrIDs(ids...)
	return rsru
}

// RemoveResourceSr removes resource_sr edges to ResourceSpecificationItems.
func (rsru *ResourceSpecificationRelationshipUpdate) RemoveResourceSr(r ...*ResourceSpecificationItems) *ResourceSpecificationRelationshipUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsru.RemoveResourceSrIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsru *ResourceSpecificationRelationshipUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rsru.defaults()
	if len(rsru.hooks) == 0 {
		if err = rsru.check(); err != nil {
			return 0, err
		}
		affected, err = rsru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceSpecificationRelationshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rsru.check(); err != nil {
				return 0, err
			}
			rsru.mutation = mutation
			affected, err = rsru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rsru.hooks) - 1; i >= 0; i-- {
			mut = rsru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsru *ResourceSpecificationRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := rsru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsru *ResourceSpecificationRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := rsru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsru *ResourceSpecificationRelationshipUpdate) ExecX(ctx context.Context) {
	if err := rsru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsru *ResourceSpecificationRelationshipUpdate) defaults() {
	if _, ok := rsru.mutation.UpdateTime(); !ok {
		v := resourcespecificationrelationship.UpdateDefaultUpdateTime()
		rsru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsru *ResourceSpecificationRelationshipUpdate) check() error {
	if v, ok := rsru.mutation.Name(); ok {
		if err := resourcespecificationrelationship.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rsru *ResourceSpecificationRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcespecificationrelationship.Table,
			Columns: resourcespecificationrelationship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcespecificationrelationship.FieldID,
			},
		},
	}
	if ps := rsru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcespecificationrelationship.FieldUpdateTime,
		})
	}
	if value, ok := rsru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcespecificationrelationship.FieldName,
		})
	}
	if rsru.mutation.ResourcespecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationrelationship.ResourcespecificationTable,
			Columns: []string{resourcespecificationrelationship.ResourcespecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsru.mutation.ResourcespecificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationrelationship.ResourcespecificationTable,
			Columns: []string{resourcespecificationrelationship.ResourcespecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsru.mutation.ResourceSrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcespecificationrelationship.ResourceSrTable,
			Columns: []string{resourcespecificationrelationship.ResourceSrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationitems.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsru.mutation.RemovedResourceSrIDs(); len(nodes) > 0 && !rsru.mutation.ResourceSrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcespecificationrelationship.ResourceSrTable,
			Columns: []string{resourcespecificationrelationship.ResourceSrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationitems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsru.mutation.ResourceSrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcespecificationrelationship.ResourceSrTable,
			Columns: []string{resourcespecificationrelationship.ResourceSrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationitems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcespecificationrelationship.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceSpecificationRelationshipUpdateOne is the builder for updating a single ResourceSpecificationRelationship entity.
type ResourceSpecificationRelationshipUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceSpecificationRelationshipMutation
}

// SetName sets the name field.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) SetName(s string) *ResourceSpecificationRelationshipUpdateOne {
	rsruo.mutation.SetName(s)
	return rsruo
}

// SetResourcespecificationID sets the resourcespecification edge to ResourceSpecification by id.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) SetResourcespecificationID(id int) *ResourceSpecificationRelationshipUpdateOne {
	rsruo.mutation.SetResourcespecificationID(id)
	return rsruo
}

// SetNillableResourcespecificationID sets the resourcespecification edge to ResourceSpecification by id if the given value is not nil.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) SetNillableResourcespecificationID(id *int) *ResourceSpecificationRelationshipUpdateOne {
	if id != nil {
		rsruo = rsruo.SetResourcespecificationID(*id)
	}
	return rsruo
}

// SetResourcespecification sets the resourcespecification edge to ResourceSpecification.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) SetResourcespecification(r *ResourceSpecification) *ResourceSpecificationRelationshipUpdateOne {
	return rsruo.SetResourcespecificationID(r.ID)
}

// AddResourceSrIDs adds the resource_sr edge to ResourceSpecificationItems by ids.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) AddResourceSrIDs(ids ...int) *ResourceSpecificationRelationshipUpdateOne {
	rsruo.mutation.AddResourceSrIDs(ids...)
	return rsruo
}

// AddResourceSr adds the resource_sr edges to ResourceSpecificationItems.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) AddResourceSr(r ...*ResourceSpecificationItems) *ResourceSpecificationRelationshipUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsruo.AddResourceSrIDs(ids...)
}

// Mutation returns the ResourceSpecificationRelationshipMutation object of the builder.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) Mutation() *ResourceSpecificationRelationshipMutation {
	return rsruo.mutation
}

// ClearResourcespecification clears the "resourcespecification" edge to type ResourceSpecification.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) ClearResourcespecification() *ResourceSpecificationRelationshipUpdateOne {
	rsruo.mutation.ClearResourcespecification()
	return rsruo
}

// ClearResourceSr clears all "resource_sr" edges to type ResourceSpecificationItems.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) ClearResourceSr() *ResourceSpecificationRelationshipUpdateOne {
	rsruo.mutation.ClearResourceSr()
	return rsruo
}

// RemoveResourceSrIDs removes the resource_sr edge to ResourceSpecificationItems by ids.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) RemoveResourceSrIDs(ids ...int) *ResourceSpecificationRelationshipUpdateOne {
	rsruo.mutation.RemoveResourceSrIDs(ids...)
	return rsruo
}

// RemoveResourceSr removes resource_sr edges to ResourceSpecificationItems.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) RemoveResourceSr(r ...*ResourceSpecificationItems) *ResourceSpecificationRelationshipUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsruo.RemoveResourceSrIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) Save(ctx context.Context) (*ResourceSpecificationRelationship, error) {
	var (
		err  error
		node *ResourceSpecificationRelationship
	)
	rsruo.defaults()
	if len(rsruo.hooks) == 0 {
		if err = rsruo.check(); err != nil {
			return nil, err
		}
		node, err = rsruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceSpecificationRelationshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rsruo.check(); err != nil {
				return nil, err
			}
			rsruo.mutation = mutation
			node, err = rsruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rsruo.hooks) - 1; i >= 0; i-- {
			mut = rsruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) SaveX(ctx context.Context) *ResourceSpecificationRelationship {
	node, err := rsruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := rsruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := rsruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) defaults() {
	if _, ok := rsruo.mutation.UpdateTime(); !ok {
		v := resourcespecificationrelationship.UpdateDefaultUpdateTime()
		rsruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsruo *ResourceSpecificationRelationshipUpdateOne) check() error {
	if v, ok := rsruo.mutation.Name(); ok {
		if err := resourcespecificationrelationship.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rsruo *ResourceSpecificationRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *ResourceSpecificationRelationship, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcespecificationrelationship.Table,
			Columns: resourcespecificationrelationship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcespecificationrelationship.FieldID,
			},
		},
	}
	id, ok := rsruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceSpecificationRelationship.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rsruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcespecificationrelationship.FieldUpdateTime,
		})
	}
	if value, ok := rsruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcespecificationrelationship.FieldName,
		})
	}
	if rsruo.mutation.ResourcespecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationrelationship.ResourcespecificationTable,
			Columns: []string{resourcespecificationrelationship.ResourcespecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsruo.mutation.ResourcespecificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationrelationship.ResourcespecificationTable,
			Columns: []string{resourcespecificationrelationship.ResourcespecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsruo.mutation.ResourceSrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcespecificationrelationship.ResourceSrTable,
			Columns: []string{resourcespecificationrelationship.ResourceSrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationitems.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsruo.mutation.RemovedResourceSrIDs(); len(nodes) > 0 && !rsruo.mutation.ResourceSrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcespecificationrelationship.ResourceSrTable,
			Columns: []string{resourcespecificationrelationship.ResourceSrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationitems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsruo.mutation.ResourceSrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcespecificationrelationship.ResourceSrTable,
			Columns: []string{resourcespecificationrelationship.ResourceSrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationitems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceSpecificationRelationship{config: rsruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rsruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcespecificationrelationship.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
