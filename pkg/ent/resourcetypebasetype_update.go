// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/permissionspolicy"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetypebasetype"
)

// ResourceTypeBaseTypeUpdate is the builder for updating ResourceTypeBaseType entities.
type ResourceTypeBaseTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceTypeBaseTypeMutation
}

// Where adds a new predicate for the builder.
func (rtbtu *ResourceTypeBaseTypeUpdate) Where(ps ...predicate.ResourceTypeBaseType) *ResourceTypeBaseTypeUpdate {
	rtbtu.mutation.predicates = append(rtbtu.mutation.predicates, ps...)
	return rtbtu
}

// SetName sets the name field.
func (rtbtu *ResourceTypeBaseTypeUpdate) SetName(s string) *ResourceTypeBaseTypeUpdate {
	rtbtu.mutation.SetName(s)
	return rtbtu
}

// AddResourceTypeFkIDs adds the resource_type_fk edge to ResourceType by ids.
func (rtbtu *ResourceTypeBaseTypeUpdate) AddResourceTypeFkIDs(ids ...int) *ResourceTypeBaseTypeUpdate {
	rtbtu.mutation.AddResourceTypeFkIDs(ids...)
	return rtbtu
}

// AddResourceTypeFk adds the resource_type_fk edges to ResourceType.
func (rtbtu *ResourceTypeBaseTypeUpdate) AddResourceTypeFk(r ...*ResourceType) *ResourceTypeBaseTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtbtu.AddResourceTypeFkIDs(ids...)
}

// AddPolicyIDs adds the policies edge to PermissionsPolicy by ids.
func (rtbtu *ResourceTypeBaseTypeUpdate) AddPolicyIDs(ids ...int) *ResourceTypeBaseTypeUpdate {
	rtbtu.mutation.AddPolicyIDs(ids...)
	return rtbtu
}

// AddPolicies adds the policies edges to PermissionsPolicy.
func (rtbtu *ResourceTypeBaseTypeUpdate) AddPolicies(p ...*PermissionsPolicy) *ResourceTypeBaseTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtbtu.AddPolicyIDs(ids...)
}

// Mutation returns the ResourceTypeBaseTypeMutation object of the builder.
func (rtbtu *ResourceTypeBaseTypeUpdate) Mutation() *ResourceTypeBaseTypeMutation {
	return rtbtu.mutation
}

// ClearResourceTypeFk clears all "resource_type_fk" edges to type ResourceType.
func (rtbtu *ResourceTypeBaseTypeUpdate) ClearResourceTypeFk() *ResourceTypeBaseTypeUpdate {
	rtbtu.mutation.ClearResourceTypeFk()
	return rtbtu
}

// RemoveResourceTypeFkIDs removes the resource_type_fk edge to ResourceType by ids.
func (rtbtu *ResourceTypeBaseTypeUpdate) RemoveResourceTypeFkIDs(ids ...int) *ResourceTypeBaseTypeUpdate {
	rtbtu.mutation.RemoveResourceTypeFkIDs(ids...)
	return rtbtu
}

// RemoveResourceTypeFk removes resource_type_fk edges to ResourceType.
func (rtbtu *ResourceTypeBaseTypeUpdate) RemoveResourceTypeFk(r ...*ResourceType) *ResourceTypeBaseTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtbtu.RemoveResourceTypeFkIDs(ids...)
}

// ClearPolicies clears all "policies" edges to type PermissionsPolicy.
func (rtbtu *ResourceTypeBaseTypeUpdate) ClearPolicies() *ResourceTypeBaseTypeUpdate {
	rtbtu.mutation.ClearPolicies()
	return rtbtu
}

// RemovePolicyIDs removes the policies edge to PermissionsPolicy by ids.
func (rtbtu *ResourceTypeBaseTypeUpdate) RemovePolicyIDs(ids ...int) *ResourceTypeBaseTypeUpdate {
	rtbtu.mutation.RemovePolicyIDs(ids...)
	return rtbtu
}

// RemovePolicies removes policies edges to PermissionsPolicy.
func (rtbtu *ResourceTypeBaseTypeUpdate) RemovePolicies(p ...*PermissionsPolicy) *ResourceTypeBaseTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtbtu.RemovePolicyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtbtu *ResourceTypeBaseTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rtbtu.defaults()
	if len(rtbtu.hooks) == 0 {
		if err = rtbtu.check(); err != nil {
			return 0, err
		}
		affected, err = rtbtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceTypeBaseTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtbtu.check(); err != nil {
				return 0, err
			}
			rtbtu.mutation = mutation
			affected, err = rtbtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rtbtu.hooks) - 1; i >= 0; i-- {
			mut = rtbtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtbtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtbtu *ResourceTypeBaseTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := rtbtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtbtu *ResourceTypeBaseTypeUpdate) Exec(ctx context.Context) error {
	_, err := rtbtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtbtu *ResourceTypeBaseTypeUpdate) ExecX(ctx context.Context) {
	if err := rtbtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtbtu *ResourceTypeBaseTypeUpdate) defaults() {
	if _, ok := rtbtu.mutation.UpdateTime(); !ok {
		v := resourcetypebasetype.UpdateDefaultUpdateTime()
		rtbtu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtbtu *ResourceTypeBaseTypeUpdate) check() error {
	if v, ok := rtbtu.mutation.Name(); ok {
		if err := resourcetypebasetype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rtbtu *ResourceTypeBaseTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetypebasetype.Table,
			Columns: resourcetypebasetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetypebasetype.FieldID,
			},
		},
	}
	if ps := rtbtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtbtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcetypebasetype.FieldUpdateTime,
		})
	}
	if value, ok := rtbtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcetypebasetype.FieldName,
		})
	}
	if rtbtu.mutation.ResourceTypeFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.ResourceTypeFkTable,
			Columns: []string{resourcetypebasetype.ResourceTypeFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtbtu.mutation.RemovedResourceTypeFkIDs(); len(nodes) > 0 && !rtbtu.mutation.ResourceTypeFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.ResourceTypeFkTable,
			Columns: []string{resourcetypebasetype.ResourceTypeFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtbtu.mutation.ResourceTypeFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.ResourceTypeFkTable,
			Columns: []string{resourcetypebasetype.ResourceTypeFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtbtu.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.PoliciesTable,
			Columns: []string{resourcetypebasetype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtbtu.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !rtbtu.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.PoliciesTable,
			Columns: []string{resourcetypebasetype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtbtu.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.PoliciesTable,
			Columns: []string{resourcetypebasetype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtbtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcetypebasetype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceTypeBaseTypeUpdateOne is the builder for updating a single ResourceTypeBaseType entity.
type ResourceTypeBaseTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceTypeBaseTypeMutation
}

// SetName sets the name field.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) SetName(s string) *ResourceTypeBaseTypeUpdateOne {
	rtbtuo.mutation.SetName(s)
	return rtbtuo
}

// AddResourceTypeFkIDs adds the resource_type_fk edge to ResourceType by ids.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) AddResourceTypeFkIDs(ids ...int) *ResourceTypeBaseTypeUpdateOne {
	rtbtuo.mutation.AddResourceTypeFkIDs(ids...)
	return rtbtuo
}

// AddResourceTypeFk adds the resource_type_fk edges to ResourceType.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) AddResourceTypeFk(r ...*ResourceType) *ResourceTypeBaseTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtbtuo.AddResourceTypeFkIDs(ids...)
}

// AddPolicyIDs adds the policies edge to PermissionsPolicy by ids.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) AddPolicyIDs(ids ...int) *ResourceTypeBaseTypeUpdateOne {
	rtbtuo.mutation.AddPolicyIDs(ids...)
	return rtbtuo
}

// AddPolicies adds the policies edges to PermissionsPolicy.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) AddPolicies(p ...*PermissionsPolicy) *ResourceTypeBaseTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtbtuo.AddPolicyIDs(ids...)
}

// Mutation returns the ResourceTypeBaseTypeMutation object of the builder.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) Mutation() *ResourceTypeBaseTypeMutation {
	return rtbtuo.mutation
}

// ClearResourceTypeFk clears all "resource_type_fk" edges to type ResourceType.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) ClearResourceTypeFk() *ResourceTypeBaseTypeUpdateOne {
	rtbtuo.mutation.ClearResourceTypeFk()
	return rtbtuo
}

// RemoveResourceTypeFkIDs removes the resource_type_fk edge to ResourceType by ids.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) RemoveResourceTypeFkIDs(ids ...int) *ResourceTypeBaseTypeUpdateOne {
	rtbtuo.mutation.RemoveResourceTypeFkIDs(ids...)
	return rtbtuo
}

// RemoveResourceTypeFk removes resource_type_fk edges to ResourceType.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) RemoveResourceTypeFk(r ...*ResourceType) *ResourceTypeBaseTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtbtuo.RemoveResourceTypeFkIDs(ids...)
}

// ClearPolicies clears all "policies" edges to type PermissionsPolicy.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) ClearPolicies() *ResourceTypeBaseTypeUpdateOne {
	rtbtuo.mutation.ClearPolicies()
	return rtbtuo
}

// RemovePolicyIDs removes the policies edge to PermissionsPolicy by ids.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) RemovePolicyIDs(ids ...int) *ResourceTypeBaseTypeUpdateOne {
	rtbtuo.mutation.RemovePolicyIDs(ids...)
	return rtbtuo
}

// RemovePolicies removes policies edges to PermissionsPolicy.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) RemovePolicies(p ...*PermissionsPolicy) *ResourceTypeBaseTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtbtuo.RemovePolicyIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) Save(ctx context.Context) (*ResourceTypeBaseType, error) {
	var (
		err  error
		node *ResourceTypeBaseType
	)
	rtbtuo.defaults()
	if len(rtbtuo.hooks) == 0 {
		if err = rtbtuo.check(); err != nil {
			return nil, err
		}
		node, err = rtbtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceTypeBaseTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtbtuo.check(); err != nil {
				return nil, err
			}
			rtbtuo.mutation = mutation
			node, err = rtbtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rtbtuo.hooks) - 1; i >= 0; i-- {
			mut = rtbtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtbtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) SaveX(ctx context.Context) *ResourceTypeBaseType {
	node, err := rtbtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := rtbtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) ExecX(ctx context.Context) {
	if err := rtbtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) defaults() {
	if _, ok := rtbtuo.mutation.UpdateTime(); !ok {
		v := resourcetypebasetype.UpdateDefaultUpdateTime()
		rtbtuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtbtuo *ResourceTypeBaseTypeUpdateOne) check() error {
	if v, ok := rtbtuo.mutation.Name(); ok {
		if err := resourcetypebasetype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rtbtuo *ResourceTypeBaseTypeUpdateOne) sqlSave(ctx context.Context) (_node *ResourceTypeBaseType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetypebasetype.Table,
			Columns: resourcetypebasetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetypebasetype.FieldID,
			},
		},
	}
	id, ok := rtbtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceTypeBaseType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rtbtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcetypebasetype.FieldUpdateTime,
		})
	}
	if value, ok := rtbtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcetypebasetype.FieldName,
		})
	}
	if rtbtuo.mutation.ResourceTypeFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.ResourceTypeFkTable,
			Columns: []string{resourcetypebasetype.ResourceTypeFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtbtuo.mutation.RemovedResourceTypeFkIDs(); len(nodes) > 0 && !rtbtuo.mutation.ResourceTypeFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.ResourceTypeFkTable,
			Columns: []string{resourcetypebasetype.ResourceTypeFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtbtuo.mutation.ResourceTypeFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.ResourceTypeFkTable,
			Columns: []string{resourcetypebasetype.ResourceTypeFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtbtuo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.PoliciesTable,
			Columns: []string{resourcetypebasetype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtbtuo.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !rtbtuo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.PoliciesTable,
			Columns: []string{resourcetypebasetype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtbtuo.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypebasetype.PoliciesTable,
			Columns: []string{resourcetypebasetype.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionspolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceTypeBaseType{config: rtbtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rtbtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcetypebasetype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
