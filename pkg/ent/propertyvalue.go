// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/property"
	"github.com/facebookincubator/symphony/pkg/ent/propertytypevalue"
	"github.com/facebookincubator/symphony/pkg/ent/propertyvalue"
)

// PropertyValue is the model entity for the PropertyValue schema.
type PropertyValue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PropertyValueQuery when eager-loading is set.
	Edges                              PropertyValueEdges `json:"edges"`
	property_property_value            *int
	property_type_value_property_value *int
	property_value_property_value      *int
}

// PropertyValueEdges holds the relations/edges for other nodes in the graph.
type PropertyValueEdges struct {
	// Property holds the value of the property edge.
	Property *Property
	// PropertyTypeValue holds the value of the property_type_value edge.
	PropertyTypeValue *PropertyTypeValue
	// PropertyValueDependence holds the value of the property_value_dependence edge.
	PropertyValueDependence *PropertyValue
	// PropertyValue holds the value of the property_value edge.
	PropertyValue []*PropertyValue
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PropertyOrErr returns the Property value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PropertyValueEdges) PropertyOrErr() (*Property, error) {
	if e.loadedTypes[0] {
		if e.Property == nil {
			// The edge property was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: property.Label}
		}
		return e.Property, nil
	}
	return nil, &NotLoadedError{edge: "property"}
}

// PropertyTypeValueOrErr returns the PropertyTypeValue value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PropertyValueEdges) PropertyTypeValueOrErr() (*PropertyTypeValue, error) {
	if e.loadedTypes[1] {
		if e.PropertyTypeValue == nil {
			// The edge property_type_value was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: propertytypevalue.Label}
		}
		return e.PropertyTypeValue, nil
	}
	return nil, &NotLoadedError{edge: "property_type_value"}
}

// PropertyValueDependenceOrErr returns the PropertyValueDependence value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PropertyValueEdges) PropertyValueDependenceOrErr() (*PropertyValue, error) {
	if e.loadedTypes[2] {
		if e.PropertyValueDependence == nil {
			// The edge property_value_dependence was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: propertyvalue.Label}
		}
		return e.PropertyValueDependence, nil
	}
	return nil, &NotLoadedError{edge: "property_value_dependence"}
}

// PropertyValueOrErr returns the PropertyValue value or an error if the edge
// was not loaded in eager-loading.
func (e PropertyValueEdges) PropertyValueOrErr() ([]*PropertyValue, error) {
	if e.loadedTypes[3] {
		return e.PropertyValue, nil
	}
	return nil, &NotLoadedError{edge: "property_value"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PropertyValue) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*PropertyValue) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // property_property_value
		&sql.NullInt64{}, // property_type_value_property_value
		&sql.NullInt64{}, // property_value_property_value
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PropertyValue fields.
func (pv *PropertyValue) assignValues(values ...interface{}) error {
	if m, n := len(values), len(propertyvalue.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pv.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		pv.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		pv.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		pv.Name = value.String
	}
	values = values[3:]
	if len(values) == len(propertyvalue.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field property_property_value", value)
		} else if value.Valid {
			pv.property_property_value = new(int)
			*pv.property_property_value = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field property_type_value_property_value", value)
		} else if value.Valid {
			pv.property_type_value_property_value = new(int)
			*pv.property_type_value_property_value = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field property_value_property_value", value)
		} else if value.Valid {
			pv.property_value_property_value = new(int)
			*pv.property_value_property_value = int(value.Int64)
		}
	}
	return nil
}

// QueryProperty queries the property edge of the PropertyValue.
func (pv *PropertyValue) QueryProperty() *PropertyQuery {
	return (&PropertyValueClient{config: pv.config}).QueryProperty(pv)
}

// QueryPropertyTypeValue queries the property_type_value edge of the PropertyValue.
func (pv *PropertyValue) QueryPropertyTypeValue() *PropertyTypeValueQuery {
	return (&PropertyValueClient{config: pv.config}).QueryPropertyTypeValue(pv)
}

// QueryPropertyValueDependence queries the property_value_dependence edge of the PropertyValue.
func (pv *PropertyValue) QueryPropertyValueDependence() *PropertyValueQuery {
	return (&PropertyValueClient{config: pv.config}).QueryPropertyValueDependence(pv)
}

// QueryPropertyValue queries the property_value edge of the PropertyValue.
func (pv *PropertyValue) QueryPropertyValue() *PropertyValueQuery {
	return (&PropertyValueClient{config: pv.config}).QueryPropertyValue(pv)
}

// Update returns a builder for updating this PropertyValue.
// Note that, you need to call PropertyValue.Unwrap() before calling this method, if this PropertyValue
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *PropertyValue) Update() *PropertyValueUpdateOne {
	return (&PropertyValueClient{config: pv.config}).UpdateOne(pv)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pv *PropertyValue) Unwrap() *PropertyValue {
	tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: PropertyValue is not a transactional entity")
	}
	pv.config.driver = tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *PropertyValue) String() string {
	var builder strings.Builder
	builder.WriteString("PropertyValue(")
	builder.WriteString(fmt.Sprintf("id=%v", pv.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pv.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pv.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(pv.Name)
	builder.WriteByte(')')
	return builder.String()
}

// PropertyValues is a parsable slice of PropertyValue.
type PropertyValues []*PropertyValue

func (pv PropertyValues) config(cfg config) {
	for _i := range pv {
		pv[_i].config = cfg
	}
}
