// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/property"
	"github.com/facebookincubator/symphony/pkg/ent/propertytype"
	"github.com/facebookincubator/symphony/pkg/ent/propertytypevalue"
)

// PropertyTypeValueCreate is the builder for creating a PropertyTypeValue entity.
type PropertyTypeValueCreate struct {
	config
	mutation *PropertyTypeValueMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (ptvc *PropertyTypeValueCreate) SetCreateTime(t time.Time) *PropertyTypeValueCreate {
	ptvc.mutation.SetCreateTime(t)
	return ptvc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (ptvc *PropertyTypeValueCreate) SetNillableCreateTime(t *time.Time) *PropertyTypeValueCreate {
	if t != nil {
		ptvc.SetCreateTime(*t)
	}
	return ptvc
}

// SetUpdateTime sets the update_time field.
func (ptvc *PropertyTypeValueCreate) SetUpdateTime(t time.Time) *PropertyTypeValueCreate {
	ptvc.mutation.SetUpdateTime(t)
	return ptvc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (ptvc *PropertyTypeValueCreate) SetNillableUpdateTime(t *time.Time) *PropertyTypeValueCreate {
	if t != nil {
		ptvc.SetUpdateTime(*t)
	}
	return ptvc
}

// SetName sets the name field.
func (ptvc *PropertyTypeValueCreate) SetName(s string) *PropertyTypeValueCreate {
	ptvc.mutation.SetName(s)
	return ptvc
}

// SetDeleted sets the deleted field.
func (ptvc *PropertyTypeValueCreate) SetDeleted(b bool) *PropertyTypeValueCreate {
	ptvc.mutation.SetDeleted(b)
	return ptvc
}

// SetNillableDeleted sets the deleted field if the given value is not nil.
func (ptvc *PropertyTypeValueCreate) SetNillableDeleted(b *bool) *PropertyTypeValueCreate {
	if b != nil {
		ptvc.SetDeleted(*b)
	}
	return ptvc
}

// SetPropertyTypeID sets the property_type edge to PropertyType by id.
func (ptvc *PropertyTypeValueCreate) SetPropertyTypeID(id int) *PropertyTypeValueCreate {
	ptvc.mutation.SetPropertyTypeID(id)
	return ptvc
}

// SetNillablePropertyTypeID sets the property_type edge to PropertyType by id if the given value is not nil.
func (ptvc *PropertyTypeValueCreate) SetNillablePropertyTypeID(id *int) *PropertyTypeValueCreate {
	if id != nil {
		ptvc = ptvc.SetPropertyTypeID(*id)
	}
	return ptvc
}

// SetPropertyType sets the property_type edge to PropertyType.
func (ptvc *PropertyTypeValueCreate) SetPropertyType(p *PropertyType) *PropertyTypeValueCreate {
	return ptvc.SetPropertyTypeID(p.ID)
}

// AddParentPropertyTypeValueIDs adds the parent_property_type_value edge to PropertyTypeValue by ids.
func (ptvc *PropertyTypeValueCreate) AddParentPropertyTypeValueIDs(ids ...int) *PropertyTypeValueCreate {
	ptvc.mutation.AddParentPropertyTypeValueIDs(ids...)
	return ptvc
}

// AddParentPropertyTypeValue adds the parent_property_type_value edges to PropertyTypeValue.
func (ptvc *PropertyTypeValueCreate) AddParentPropertyTypeValue(p ...*PropertyTypeValue) *PropertyTypeValueCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptvc.AddParentPropertyTypeValueIDs(ids...)
}

// AddPropertyTypeValueIDs adds the property_type_value edge to PropertyTypeValue by ids.
func (ptvc *PropertyTypeValueCreate) AddPropertyTypeValueIDs(ids ...int) *PropertyTypeValueCreate {
	ptvc.mutation.AddPropertyTypeValueIDs(ids...)
	return ptvc
}

// AddPropertyTypeValue adds the property_type_value edges to PropertyTypeValue.
func (ptvc *PropertyTypeValueCreate) AddPropertyTypeValue(p ...*PropertyTypeValue) *PropertyTypeValueCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptvc.AddPropertyTypeValueIDs(ids...)
}

// AddPropertyIDs adds the property edge to Property by ids.
func (ptvc *PropertyTypeValueCreate) AddPropertyIDs(ids ...int) *PropertyTypeValueCreate {
	ptvc.mutation.AddPropertyIDs(ids...)
	return ptvc
}

// AddProperty adds the property edges to Property.
func (ptvc *PropertyTypeValueCreate) AddProperty(p ...*Property) *PropertyTypeValueCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptvc.AddPropertyIDs(ids...)
}

// Mutation returns the PropertyTypeValueMutation object of the builder.
func (ptvc *PropertyTypeValueCreate) Mutation() *PropertyTypeValueMutation {
	return ptvc.mutation
}

// Save creates the PropertyTypeValue in the database.
func (ptvc *PropertyTypeValueCreate) Save(ctx context.Context) (*PropertyTypeValue, error) {
	var (
		err  error
		node *PropertyTypeValue
	)
	ptvc.defaults()
	if len(ptvc.hooks) == 0 {
		if err = ptvc.check(); err != nil {
			return nil, err
		}
		node, err = ptvc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PropertyTypeValueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptvc.check(); err != nil {
				return nil, err
			}
			ptvc.mutation = mutation
			node, err = ptvc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptvc.hooks) - 1; i >= 0; i-- {
			mut = ptvc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptvc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptvc *PropertyTypeValueCreate) SaveX(ctx context.Context) *PropertyTypeValue {
	v, err := ptvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ptvc *PropertyTypeValueCreate) defaults() {
	if _, ok := ptvc.mutation.CreateTime(); !ok {
		v := propertytypevalue.DefaultCreateTime()
		ptvc.mutation.SetCreateTime(v)
	}
	if _, ok := ptvc.mutation.UpdateTime(); !ok {
		v := propertytypevalue.DefaultUpdateTime()
		ptvc.mutation.SetUpdateTime(v)
	}
	if _, ok := ptvc.mutation.Deleted(); !ok {
		v := propertytypevalue.DefaultDeleted
		ptvc.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptvc *PropertyTypeValueCreate) check() error {
	if _, ok := ptvc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ptvc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := ptvc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := ptvc.mutation.Name(); ok {
		if err := propertytypevalue.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := ptvc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (ptvc *PropertyTypeValueCreate) sqlSave(ctx context.Context) (*PropertyTypeValue, error) {
	_node, _spec := ptvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptvc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ptvc *PropertyTypeValueCreate) createSpec() (*PropertyTypeValue, *sqlgraph.CreateSpec) {
	var (
		_node = &PropertyTypeValue{config: ptvc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: propertytypevalue.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: propertytypevalue.FieldID,
			},
		}
	)
	if value, ok := ptvc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: propertytypevalue.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ptvc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: propertytypevalue.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ptvc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: propertytypevalue.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ptvc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: propertytypevalue.FieldDeleted,
		})
		_node.Deleted = value
	}
	if nodes := ptvc.mutation.PropertyTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   propertytypevalue.PropertyTypeTable,
			Columns: []string{propertytypevalue.PropertyTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptvc.mutation.ParentPropertyTypeValueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   propertytypevalue.ParentPropertyTypeValueTable,
			Columns: propertytypevalue.ParentPropertyTypeValuePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertytypevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptvc.mutation.PropertyTypeValueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   propertytypevalue.PropertyTypeValueTable,
			Columns: propertytypevalue.PropertyTypeValuePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertytypevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptvc.mutation.PropertyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   propertytypevalue.PropertyTable,
			Columns: []string{propertytypevalue.PropertyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: property.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PropertyTypeValueCreateBulk is the builder for creating a bulk of PropertyTypeValue entities.
type PropertyTypeValueCreateBulk struct {
	config
	builders []*PropertyTypeValueCreate
}

// Save creates the PropertyTypeValue entities in the database.
func (ptvcb *PropertyTypeValueCreateBulk) Save(ctx context.Context) ([]*PropertyTypeValue, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptvcb.builders))
	nodes := make([]*PropertyTypeValue, len(ptvcb.builders))
	mutators := make([]Mutator, len(ptvcb.builders))
	for i := range ptvcb.builders {
		func(i int, root context.Context) {
			builder := ptvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PropertyTypeValueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptvcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptvcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ptvcb *PropertyTypeValueCreateBulk) SaveX(ctx context.Context) []*PropertyTypeValue {
	v, err := ptvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
