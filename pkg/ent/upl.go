// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/contract"
	"github.com/facebookincubator/symphony/pkg/ent/upl"
)

// Upl is the model entity for the Upl schema.
type Upl struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UplQuery when eager-loading is set.
	Edges                 UplEdges `json:"edges"`
	contract_upl_contract *int
}

// UplEdges holds the relations/edges for other nodes in the graph.
type UplEdges struct {
	// Contract holds the value of the contract edge.
	Contract *Contract
	// UplItems holds the value of the upl_items edge.
	UplItems []*UplItem
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ContractOrErr returns the Contract value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UplEdges) ContractOrErr() (*Contract, error) {
	if e.loadedTypes[0] {
		if e.Contract == nil {
			// The edge contract was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: contract.Label}
		}
		return e.Contract, nil
	}
	return nil, &NotLoadedError{edge: "contract"}
}

// UplItemsOrErr returns the UplItems value or an error if the edge
// was not loaded in eager-loading.
func (e UplEdges) UplItemsOrErr() ([]*UplItem, error) {
	if e.loadedTypes[1] {
		return e.UplItems, nil
	}
	return nil, &NotLoadedError{edge: "upl_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Upl) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullString{}, // description
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Upl) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // contract_upl_contract
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Upl fields.
func (u *Upl) assignValues(values ...interface{}) error {
	if m, n := len(values), len(upl.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		u.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		u.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		u.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[3])
	} else if value.Valid {
		u.Description = value.String
	}
	values = values[4:]
	if len(values) == len(upl.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field contract_upl_contract", value)
		} else if value.Valid {
			u.contract_upl_contract = new(int)
			*u.contract_upl_contract = int(value.Int64)
		}
	}
	return nil
}

// QueryContract queries the contract edge of the Upl.
func (u *Upl) QueryContract() *ContractQuery {
	return (&UplClient{config: u.config}).QueryContract(u)
}

// QueryUplItems queries the upl_items edge of the Upl.
func (u *Upl) QueryUplItems() *UplItemQuery {
	return (&UplClient{config: u.config}).QueryUplItems(u)
}

// Update returns a builder for updating this Upl.
// Note that, you need to call Upl.Unwrap() before calling this method, if this Upl
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Upl) Update() *UplUpdateOne {
	return (&UplClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *Upl) Unwrap() *Upl {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Upl is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Upl) String() string {
	var builder strings.Builder
	builder.WriteString("Upl(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(u.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(u.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", description=")
	builder.WriteString(u.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Upls is a parsable slice of Upl.
type Upls []*Upl

func (u Upls) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
