// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package propertytypevalue

import (
	"time"

	"github.com/facebook/ent"
)

const (
	// Label holds the string label denoting the propertytypevalue type in the database.
	Label = "property_type_value"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"

	// EdgePropertyType holds the string denoting the property_type edge name in mutations.
	EdgePropertyType = "property_type"
	// EdgeParentPropertyTypeValue holds the string denoting the parent_property_type_value edge name in mutations.
	EdgeParentPropertyTypeValue = "parent_property_type_value"
	// EdgePropertyTypeValue holds the string denoting the property_type_value edge name in mutations.
	EdgePropertyTypeValue = "property_type_value"
	// EdgeProperty holds the string denoting the property edge name in mutations.
	EdgeProperty = "property"

	// Table holds the table name of the propertytypevalue in the database.
	Table = "property_type_values"
	// PropertyTypeTable is the table the holds the property_type relation/edge.
	PropertyTypeTable = "property_type_values"
	// PropertyTypeInverseTable is the table name for the PropertyType entity.
	// It exists in this package in order to avoid circular dependency with the "propertytype" package.
	PropertyTypeInverseTable = "property_types"
	// PropertyTypeColumn is the table column denoting the property_type relation/edge.
	PropertyTypeColumn = "property_type_property_type_values"
	// ParentPropertyTypeValueTable is the table the holds the parent_property_type_value relation/edge. The primary key declared below.
	ParentPropertyTypeValueTable = "property_type_value_property_type_value"
	// PropertyTypeValueTable is the table the holds the property_type_value relation/edge. The primary key declared below.
	PropertyTypeValueTable = "property_type_value_property_type_value"
	// PropertyTable is the table the holds the property relation/edge.
	PropertyTable = "properties"
	// PropertyInverseTable is the table name for the Property entity.
	// It exists in this package in order to avoid circular dependency with the "property" package.
	PropertyInverseTable = "properties"
	// PropertyColumn is the table column denoting the property relation/edge.
	PropertyColumn = "property_type_value_property"
)

// Columns holds all SQL columns for propertytypevalue fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldDeleted,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the PropertyTypeValue type.
var ForeignKeys = []string{
	"property_type_property_type_values",
}

var (
	// ParentPropertyTypeValuePrimaryKey and ParentPropertyTypeValueColumn2 are the table columns denoting the
	// primary key for the parent_property_type_value relation (M2M).
	ParentPropertyTypeValuePrimaryKey = []string{"property_type_value_id", "parent_property_type_value_id"}
	// PropertyTypeValuePrimaryKey and PropertyTypeValueColumn2 are the table columns denoting the
	// primary key for the property_type_value relation (M2M).
	PropertyTypeValuePrimaryKey = []string{"property_type_value_id", "parent_property_type_value_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/facebookincubator/symphony/pkg/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the create_time field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the update_time field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultDeleted holds the default value on creation for the deleted field.
	DefaultDeleted bool
)
