// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetyperelationship"
)

// ResourceTypeUpdate is the builder for updating ResourceType entities.
type ResourceTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceTypeMutation
}

// Where adds a new predicate for the builder.
func (rtu *ResourceTypeUpdate) Where(ps ...predicate.ResourceType) *ResourceTypeUpdate {
	rtu.mutation.predicates = append(rtu.mutation.predicates, ps...)
	return rtu
}

// SetName sets the name field.
func (rtu *ResourceTypeUpdate) SetName(s string) *ResourceTypeUpdate {
	rtu.mutation.SetName(s)
	return rtu
}

// SetResourceTypeClass sets the ResourceTypeClass field.
func (rtu *ResourceTypeUpdate) SetResourceTypeClass(rtc resourcetype.ResourceTypeClass) *ResourceTypeUpdate {
	rtu.mutation.SetResourceTypeClass(rtc)
	return rtu
}

// SetResourceTypeBaseType sets the ResourceTypeBaseType field.
func (rtu *ResourceTypeUpdate) SetResourceTypeBaseType(rtbt resourcetype.ResourceTypeBaseType) *ResourceTypeUpdate {
	rtu.mutation.SetResourceTypeBaseType(rtbt)
	return rtu
}

// AddResourceRelationshipAIDs adds the resource_relationship_a edge to ResourceTypeRelationship by ids.
func (rtu *ResourceTypeUpdate) AddResourceRelationshipAIDs(ids ...int) *ResourceTypeUpdate {
	rtu.mutation.AddResourceRelationshipAIDs(ids...)
	return rtu
}

// AddResourceRelationshipA adds the resource_relationship_a edges to ResourceTypeRelationship.
func (rtu *ResourceTypeUpdate) AddResourceRelationshipA(r ...*ResourceTypeRelationship) *ResourceTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.AddResourceRelationshipAIDs(ids...)
}

// AddResourceRelationshipBIDs adds the resource_relationship_b edge to ResourceTypeRelationship by ids.
func (rtu *ResourceTypeUpdate) AddResourceRelationshipBIDs(ids ...int) *ResourceTypeUpdate {
	rtu.mutation.AddResourceRelationshipBIDs(ids...)
	return rtu
}

// AddResourceRelationshipB adds the resource_relationship_b edges to ResourceTypeRelationship.
func (rtu *ResourceTypeUpdate) AddResourceRelationshipB(r ...*ResourceTypeRelationship) *ResourceTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.AddResourceRelationshipBIDs(ids...)
}

// AddResourceSpecificationIDs adds the resource_specification edge to ResourceSpecification by ids.
func (rtu *ResourceTypeUpdate) AddResourceSpecificationIDs(ids ...int) *ResourceTypeUpdate {
	rtu.mutation.AddResourceSpecificationIDs(ids...)
	return rtu
}

// AddResourceSpecification adds the resource_specification edges to ResourceSpecification.
func (rtu *ResourceTypeUpdate) AddResourceSpecification(r ...*ResourceSpecification) *ResourceTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.AddResourceSpecificationIDs(ids...)
}

// Mutation returns the ResourceTypeMutation object of the builder.
func (rtu *ResourceTypeUpdate) Mutation() *ResourceTypeMutation {
	return rtu.mutation
}

// ClearResourceRelationshipA clears all "resource_relationship_a" edges to type ResourceTypeRelationship.
func (rtu *ResourceTypeUpdate) ClearResourceRelationshipA() *ResourceTypeUpdate {
	rtu.mutation.ClearResourceRelationshipA()
	return rtu
}

// RemoveResourceRelationshipAIDs removes the resource_relationship_a edge to ResourceTypeRelationship by ids.
func (rtu *ResourceTypeUpdate) RemoveResourceRelationshipAIDs(ids ...int) *ResourceTypeUpdate {
	rtu.mutation.RemoveResourceRelationshipAIDs(ids...)
	return rtu
}

// RemoveResourceRelationshipA removes resource_relationship_a edges to ResourceTypeRelationship.
func (rtu *ResourceTypeUpdate) RemoveResourceRelationshipA(r ...*ResourceTypeRelationship) *ResourceTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.RemoveResourceRelationshipAIDs(ids...)
}

// ClearResourceRelationshipB clears all "resource_relationship_b" edges to type ResourceTypeRelationship.
func (rtu *ResourceTypeUpdate) ClearResourceRelationshipB() *ResourceTypeUpdate {
	rtu.mutation.ClearResourceRelationshipB()
	return rtu
}

// RemoveResourceRelationshipBIDs removes the resource_relationship_b edge to ResourceTypeRelationship by ids.
func (rtu *ResourceTypeUpdate) RemoveResourceRelationshipBIDs(ids ...int) *ResourceTypeUpdate {
	rtu.mutation.RemoveResourceRelationshipBIDs(ids...)
	return rtu
}

// RemoveResourceRelationshipB removes resource_relationship_b edges to ResourceTypeRelationship.
func (rtu *ResourceTypeUpdate) RemoveResourceRelationshipB(r ...*ResourceTypeRelationship) *ResourceTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.RemoveResourceRelationshipBIDs(ids...)
}

// ClearResourceSpecification clears all "resource_specification" edges to type ResourceSpecification.
func (rtu *ResourceTypeUpdate) ClearResourceSpecification() *ResourceTypeUpdate {
	rtu.mutation.ClearResourceSpecification()
	return rtu
}

// RemoveResourceSpecificationIDs removes the resource_specification edge to ResourceSpecification by ids.
func (rtu *ResourceTypeUpdate) RemoveResourceSpecificationIDs(ids ...int) *ResourceTypeUpdate {
	rtu.mutation.RemoveResourceSpecificationIDs(ids...)
	return rtu
}

// RemoveResourceSpecification removes resource_specification edges to ResourceSpecification.
func (rtu *ResourceTypeUpdate) RemoveResourceSpecification(r ...*ResourceSpecification) *ResourceTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.RemoveResourceSpecificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *ResourceTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rtu.defaults()
	if len(rtu.hooks) == 0 {
		if err = rtu.check(); err != nil {
			return 0, err
		}
		affected, err = rtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtu.check(); err != nil {
				return 0, err
			}
			rtu.mutation = mutation
			affected, err = rtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rtu.hooks) - 1; i >= 0; i-- {
			mut = rtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *ResourceTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *ResourceTypeUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *ResourceTypeUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtu *ResourceTypeUpdate) defaults() {
	if _, ok := rtu.mutation.UpdateTime(); !ok {
		v := resourcetype.UpdateDefaultUpdateTime()
		rtu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtu *ResourceTypeUpdate) check() error {
	if v, ok := rtu.mutation.Name(); ok {
		if err := resourcetype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := rtu.mutation.ResourceTypeClass(); ok {
		if err := resourcetype.ResourceTypeClassValidator(v); err != nil {
			return &ValidationError{Name: "ResourceTypeClass", err: fmt.Errorf("ent: validator failed for field \"ResourceTypeClass\": %w", err)}
		}
	}
	if v, ok := rtu.mutation.ResourceTypeBaseType(); ok {
		if err := resourcetype.ResourceTypeBaseTypeValidator(v); err != nil {
			return &ValidationError{Name: "ResourceTypeBaseType", err: fmt.Errorf("ent: validator failed for field \"ResourceTypeBaseType\": %w", err)}
		}
	}
	return nil
}

func (rtu *ResourceTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetype.Table,
			Columns: resourcetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetype.FieldID,
			},
		},
	}
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcetype.FieldUpdateTime,
		})
	}
	if value, ok := rtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcetype.FieldName,
		})
	}
	if value, ok := rtu.mutation.ResourceTypeClass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcetype.FieldResourceTypeClass,
		})
	}
	if value, ok := rtu.mutation.ResourceTypeBaseType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcetype.FieldResourceTypeBaseType,
		})
	}
	if rtu.mutation.ResourceRelationshipACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipATable,
			Columns: []string{resourcetype.ResourceRelationshipAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedResourceRelationshipAIDs(); len(nodes) > 0 && !rtu.mutation.ResourceRelationshipACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipATable,
			Columns: []string{resourcetype.ResourceRelationshipAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.ResourceRelationshipAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipATable,
			Columns: []string{resourcetype.ResourceRelationshipAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.ResourceRelationshipBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipBTable,
			Columns: []string{resourcetype.ResourceRelationshipBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedResourceRelationshipBIDs(); len(nodes) > 0 && !rtu.mutation.ResourceRelationshipBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipBTable,
			Columns: []string{resourcetype.ResourceRelationshipBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.ResourceRelationshipBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipBTable,
			Columns: []string{resourcetype.ResourceRelationshipBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.ResourceSpecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceSpecificationTable,
			Columns: []string{resourcetype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedResourceSpecificationIDs(); len(nodes) > 0 && !rtu.mutation.ResourceSpecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceSpecificationTable,
			Columns: []string{resourcetype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.ResourceSpecificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceSpecificationTable,
			Columns: []string{resourcetype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcetype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceTypeUpdateOne is the builder for updating a single ResourceType entity.
type ResourceTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceTypeMutation
}

// SetName sets the name field.
func (rtuo *ResourceTypeUpdateOne) SetName(s string) *ResourceTypeUpdateOne {
	rtuo.mutation.SetName(s)
	return rtuo
}

// SetResourceTypeClass sets the ResourceTypeClass field.
func (rtuo *ResourceTypeUpdateOne) SetResourceTypeClass(rtc resourcetype.ResourceTypeClass) *ResourceTypeUpdateOne {
	rtuo.mutation.SetResourceTypeClass(rtc)
	return rtuo
}

// SetResourceTypeBaseType sets the ResourceTypeBaseType field.
func (rtuo *ResourceTypeUpdateOne) SetResourceTypeBaseType(rtbt resourcetype.ResourceTypeBaseType) *ResourceTypeUpdateOne {
	rtuo.mutation.SetResourceTypeBaseType(rtbt)
	return rtuo
}

// AddResourceRelationshipAIDs adds the resource_relationship_a edge to ResourceTypeRelationship by ids.
func (rtuo *ResourceTypeUpdateOne) AddResourceRelationshipAIDs(ids ...int) *ResourceTypeUpdateOne {
	rtuo.mutation.AddResourceRelationshipAIDs(ids...)
	return rtuo
}

// AddResourceRelationshipA adds the resource_relationship_a edges to ResourceTypeRelationship.
func (rtuo *ResourceTypeUpdateOne) AddResourceRelationshipA(r ...*ResourceTypeRelationship) *ResourceTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.AddResourceRelationshipAIDs(ids...)
}

// AddResourceRelationshipBIDs adds the resource_relationship_b edge to ResourceTypeRelationship by ids.
func (rtuo *ResourceTypeUpdateOne) AddResourceRelationshipBIDs(ids ...int) *ResourceTypeUpdateOne {
	rtuo.mutation.AddResourceRelationshipBIDs(ids...)
	return rtuo
}

// AddResourceRelationshipB adds the resource_relationship_b edges to ResourceTypeRelationship.
func (rtuo *ResourceTypeUpdateOne) AddResourceRelationshipB(r ...*ResourceTypeRelationship) *ResourceTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.AddResourceRelationshipBIDs(ids...)
}

// AddResourceSpecificationIDs adds the resource_specification edge to ResourceSpecification by ids.
func (rtuo *ResourceTypeUpdateOne) AddResourceSpecificationIDs(ids ...int) *ResourceTypeUpdateOne {
	rtuo.mutation.AddResourceSpecificationIDs(ids...)
	return rtuo
}

// AddResourceSpecification adds the resource_specification edges to ResourceSpecification.
func (rtuo *ResourceTypeUpdateOne) AddResourceSpecification(r ...*ResourceSpecification) *ResourceTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.AddResourceSpecificationIDs(ids...)
}

// Mutation returns the ResourceTypeMutation object of the builder.
func (rtuo *ResourceTypeUpdateOne) Mutation() *ResourceTypeMutation {
	return rtuo.mutation
}

// ClearResourceRelationshipA clears all "resource_relationship_a" edges to type ResourceTypeRelationship.
func (rtuo *ResourceTypeUpdateOne) ClearResourceRelationshipA() *ResourceTypeUpdateOne {
	rtuo.mutation.ClearResourceRelationshipA()
	return rtuo
}

// RemoveResourceRelationshipAIDs removes the resource_relationship_a edge to ResourceTypeRelationship by ids.
func (rtuo *ResourceTypeUpdateOne) RemoveResourceRelationshipAIDs(ids ...int) *ResourceTypeUpdateOne {
	rtuo.mutation.RemoveResourceRelationshipAIDs(ids...)
	return rtuo
}

// RemoveResourceRelationshipA removes resource_relationship_a edges to ResourceTypeRelationship.
func (rtuo *ResourceTypeUpdateOne) RemoveResourceRelationshipA(r ...*ResourceTypeRelationship) *ResourceTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.RemoveResourceRelationshipAIDs(ids...)
}

// ClearResourceRelationshipB clears all "resource_relationship_b" edges to type ResourceTypeRelationship.
func (rtuo *ResourceTypeUpdateOne) ClearResourceRelationshipB() *ResourceTypeUpdateOne {
	rtuo.mutation.ClearResourceRelationshipB()
	return rtuo
}

// RemoveResourceRelationshipBIDs removes the resource_relationship_b edge to ResourceTypeRelationship by ids.
func (rtuo *ResourceTypeUpdateOne) RemoveResourceRelationshipBIDs(ids ...int) *ResourceTypeUpdateOne {
	rtuo.mutation.RemoveResourceRelationshipBIDs(ids...)
	return rtuo
}

// RemoveResourceRelationshipB removes resource_relationship_b edges to ResourceTypeRelationship.
func (rtuo *ResourceTypeUpdateOne) RemoveResourceRelationshipB(r ...*ResourceTypeRelationship) *ResourceTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.RemoveResourceRelationshipBIDs(ids...)
}

// ClearResourceSpecification clears all "resource_specification" edges to type ResourceSpecification.
func (rtuo *ResourceTypeUpdateOne) ClearResourceSpecification() *ResourceTypeUpdateOne {
	rtuo.mutation.ClearResourceSpecification()
	return rtuo
}

// RemoveResourceSpecificationIDs removes the resource_specification edge to ResourceSpecification by ids.
func (rtuo *ResourceTypeUpdateOne) RemoveResourceSpecificationIDs(ids ...int) *ResourceTypeUpdateOne {
	rtuo.mutation.RemoveResourceSpecificationIDs(ids...)
	return rtuo
}

// RemoveResourceSpecification removes resource_specification edges to ResourceSpecification.
func (rtuo *ResourceTypeUpdateOne) RemoveResourceSpecification(r ...*ResourceSpecification) *ResourceTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.RemoveResourceSpecificationIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (rtuo *ResourceTypeUpdateOne) Save(ctx context.Context) (*ResourceType, error) {
	var (
		err  error
		node *ResourceType
	)
	rtuo.defaults()
	if len(rtuo.hooks) == 0 {
		if err = rtuo.check(); err != nil {
			return nil, err
		}
		node, err = rtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtuo.check(); err != nil {
				return nil, err
			}
			rtuo.mutation = mutation
			node, err = rtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rtuo.hooks) - 1; i >= 0; i-- {
			mut = rtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *ResourceTypeUpdateOne) SaveX(ctx context.Context) *ResourceType {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *ResourceTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *ResourceTypeUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtuo *ResourceTypeUpdateOne) defaults() {
	if _, ok := rtuo.mutation.UpdateTime(); !ok {
		v := resourcetype.UpdateDefaultUpdateTime()
		rtuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtuo *ResourceTypeUpdateOne) check() error {
	if v, ok := rtuo.mutation.Name(); ok {
		if err := resourcetype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := rtuo.mutation.ResourceTypeClass(); ok {
		if err := resourcetype.ResourceTypeClassValidator(v); err != nil {
			return &ValidationError{Name: "ResourceTypeClass", err: fmt.Errorf("ent: validator failed for field \"ResourceTypeClass\": %w", err)}
		}
	}
	if v, ok := rtuo.mutation.ResourceTypeBaseType(); ok {
		if err := resourcetype.ResourceTypeBaseTypeValidator(v); err != nil {
			return &ValidationError{Name: "ResourceTypeBaseType", err: fmt.Errorf("ent: validator failed for field \"ResourceTypeBaseType\": %w", err)}
		}
	}
	return nil
}

func (rtuo *ResourceTypeUpdateOne) sqlSave(ctx context.Context) (_node *ResourceType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetype.Table,
			Columns: resourcetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetype.FieldID,
			},
		},
	}
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcetype.FieldUpdateTime,
		})
	}
	if value, ok := rtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcetype.FieldName,
		})
	}
	if value, ok := rtuo.mutation.ResourceTypeClass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcetype.FieldResourceTypeClass,
		})
	}
	if value, ok := rtuo.mutation.ResourceTypeBaseType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcetype.FieldResourceTypeBaseType,
		})
	}
	if rtuo.mutation.ResourceRelationshipACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipATable,
			Columns: []string{resourcetype.ResourceRelationshipAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedResourceRelationshipAIDs(); len(nodes) > 0 && !rtuo.mutation.ResourceRelationshipACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipATable,
			Columns: []string{resourcetype.ResourceRelationshipAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.ResourceRelationshipAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipATable,
			Columns: []string{resourcetype.ResourceRelationshipAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.ResourceRelationshipBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipBTable,
			Columns: []string{resourcetype.ResourceRelationshipBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedResourceRelationshipBIDs(); len(nodes) > 0 && !rtuo.mutation.ResourceRelationshipBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipBTable,
			Columns: []string{resourcetype.ResourceRelationshipBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.ResourceRelationshipBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceRelationshipBTable,
			Columns: []string{resourcetype.ResourceRelationshipBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetyperelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.ResourceSpecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceSpecificationTable,
			Columns: []string{resourcetype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedResourceSpecificationIDs(); len(nodes) > 0 && !rtuo.mutation.ResourceSpecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceSpecificationTable,
			Columns: []string{resourcetype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.ResourceSpecificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.ResourceSpecificationTable,
			Columns: []string{resourcetype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceType{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcetype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
