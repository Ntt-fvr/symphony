// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/execution"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/user"
)

// ExecutionUpdate is the builder for updating Execution entities.
type ExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *ExecutionMutation
}

// Where adds a new predicate for the builder.
func (eu *ExecutionUpdate) Where(ps ...predicate.Execution) *ExecutionUpdate {
	eu.mutation.predicates = append(eu.mutation.predicates, ps...)
	return eu
}

// SetManualConfirmation sets the manualConfirmation field.
func (eu *ExecutionUpdate) SetManualConfirmation(t time.Time) *ExecutionUpdate {
	eu.mutation.SetManualConfirmation(t)
	return eu
}

// SetUserID sets the user edge to User by id.
func (eu *ExecutionUpdate) SetUserID(id int) *ExecutionUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (eu *ExecutionUpdate) SetNillableUserID(id *int) *ExecutionUpdate {
	if id != nil {
		eu = eu.SetUserID(*id)
	}
	return eu
}

// SetUser sets the user edge to User.
func (eu *ExecutionUpdate) SetUser(u *User) *ExecutionUpdate {
	return eu.SetUserID(u.ID)
}

// Mutation returns the ExecutionMutation object of the builder.
func (eu *ExecutionUpdate) Mutation() *ExecutionMutation {
	return eu.mutation
}

// ClearUser clears the "user" edge to type User.
func (eu *ExecutionUpdate) ClearUser() *ExecutionUpdate {
	eu.mutation.ClearUser()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExecutionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExecutionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExecutionUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExecutionUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *ExecutionUpdate) defaults() {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		v := execution.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
}

func (eu *ExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   execution.Table,
			Columns: execution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: execution.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldUpdateTime,
		})
	}
	if value, ok := eu.mutation.ManualConfirmation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldManualConfirmation,
		})
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   execution.UserTable,
			Columns: []string{execution.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   execution.UserTable,
			Columns: []string{execution.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{execution.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ExecutionUpdateOne is the builder for updating a single Execution entity.
type ExecutionUpdateOne struct {
	config
	hooks    []Hook
	mutation *ExecutionMutation
}

// SetManualConfirmation sets the manualConfirmation field.
func (euo *ExecutionUpdateOne) SetManualConfirmation(t time.Time) *ExecutionUpdateOne {
	euo.mutation.SetManualConfirmation(t)
	return euo
}

// SetUserID sets the user edge to User by id.
func (euo *ExecutionUpdateOne) SetUserID(id int) *ExecutionUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (euo *ExecutionUpdateOne) SetNillableUserID(id *int) *ExecutionUpdateOne {
	if id != nil {
		euo = euo.SetUserID(*id)
	}
	return euo
}

// SetUser sets the user edge to User.
func (euo *ExecutionUpdateOne) SetUser(u *User) *ExecutionUpdateOne {
	return euo.SetUserID(u.ID)
}

// Mutation returns the ExecutionMutation object of the builder.
func (euo *ExecutionUpdateOne) Mutation() *ExecutionMutation {
	return euo.mutation
}

// ClearUser clears the "user" edge to type User.
func (euo *ExecutionUpdateOne) ClearUser() *ExecutionUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// Save executes the query and returns the updated entity.
func (euo *ExecutionUpdateOne) Save(ctx context.Context) (*Execution, error) {
	var (
		err  error
		node *Execution
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExecutionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExecutionUpdateOne) SaveX(ctx context.Context) *Execution {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *ExecutionUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		v := execution.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
}

func (euo *ExecutionUpdateOne) sqlSave(ctx context.Context) (_node *Execution, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   execution.Table,
			Columns: execution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: execution.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Execution.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldUpdateTime,
		})
	}
	if value, ok := euo.mutation.ManualConfirmation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldManualConfirmation,
		})
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   execution.UserTable,
			Columns: []string{execution.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   execution.UserTable,
			Columns: []string{execution.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Execution{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{execution.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
