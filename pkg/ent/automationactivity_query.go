// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/automationactivity"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/user"
)

// AutomationActivityQuery is the builder for querying AutomationActivity entities.
type AutomationActivityQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.AutomationActivity
	// eager-loading edges.
	withAuthor        *UserQuery
	withFlowInstance  *FlowInstanceQuery
	withBlockInstance *BlockInstanceQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (aaq *AutomationActivityQuery) Where(ps ...predicate.AutomationActivity) *AutomationActivityQuery {
	aaq.predicates = append(aaq.predicates, ps...)
	return aaq
}

// Limit adds a limit step to the query.
func (aaq *AutomationActivityQuery) Limit(limit int) *AutomationActivityQuery {
	aaq.limit = &limit
	return aaq
}

// Offset adds an offset step to the query.
func (aaq *AutomationActivityQuery) Offset(offset int) *AutomationActivityQuery {
	aaq.offset = &offset
	return aaq
}

// Order adds an order step to the query.
func (aaq *AutomationActivityQuery) Order(o ...OrderFunc) *AutomationActivityQuery {
	aaq.order = append(aaq.order, o...)
	return aaq
}

// QueryAuthor chains the current query on the author edge.
func (aaq *AutomationActivityQuery) QueryAuthor() *UserQuery {
	query := &UserQuery{config: aaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aaq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(automationactivity.Table, automationactivity.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, automationactivity.AuthorTable, automationactivity.AuthorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFlowInstance chains the current query on the flow_instance edge.
func (aaq *AutomationActivityQuery) QueryFlowInstance() *FlowInstanceQuery {
	query := &FlowInstanceQuery{config: aaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aaq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(automationactivity.Table, automationactivity.FieldID, selector),
			sqlgraph.To(flowinstance.Table, flowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, automationactivity.FlowInstanceTable, automationactivity.FlowInstanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(aaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockInstance chains the current query on the block_instance edge.
func (aaq *AutomationActivityQuery) QueryBlockInstance() *BlockInstanceQuery {
	query := &BlockInstanceQuery{config: aaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aaq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(automationactivity.Table, automationactivity.FieldID, selector),
			sqlgraph.To(blockinstance.Table, blockinstance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, automationactivity.BlockInstanceTable, automationactivity.BlockInstanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(aaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AutomationActivity entity in the query. Returns *NotFoundError when no automationactivity was found.
func (aaq *AutomationActivityQuery) First(ctx context.Context) (*AutomationActivity, error) {
	nodes, err := aaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{automationactivity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aaq *AutomationActivityQuery) FirstX(ctx context.Context) *AutomationActivity {
	node, err := aaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AutomationActivity id in the query. Returns *NotFoundError when no id was found.
func (aaq *AutomationActivityQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{automationactivity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aaq *AutomationActivityQuery) FirstIDX(ctx context.Context) int {
	id, err := aaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only AutomationActivity entity in the query, returns an error if not exactly one entity was returned.
func (aaq *AutomationActivityQuery) Only(ctx context.Context) (*AutomationActivity, error) {
	nodes, err := aaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{automationactivity.Label}
	default:
		return nil, &NotSingularError{automationactivity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aaq *AutomationActivityQuery) OnlyX(ctx context.Context) *AutomationActivity {
	node, err := aaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only AutomationActivity id in the query, returns an error if not exactly one id was returned.
func (aaq *AutomationActivityQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{automationactivity.Label}
	default:
		err = &NotSingularError{automationactivity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aaq *AutomationActivityQuery) OnlyIDX(ctx context.Context) int {
	id, err := aaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AutomationActivities.
func (aaq *AutomationActivityQuery) All(ctx context.Context) ([]*AutomationActivity, error) {
	if err := aaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aaq *AutomationActivityQuery) AllX(ctx context.Context) []*AutomationActivity {
	nodes, err := aaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AutomationActivity ids.
func (aaq *AutomationActivityQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := aaq.Select(automationactivity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aaq *AutomationActivityQuery) IDsX(ctx context.Context) []int {
	ids, err := aaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aaq *AutomationActivityQuery) Count(ctx context.Context) (int, error) {
	if err := aaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aaq *AutomationActivityQuery) CountX(ctx context.Context) int {
	count, err := aaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aaq *AutomationActivityQuery) Exist(ctx context.Context) (bool, error) {
	if err := aaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aaq *AutomationActivityQuery) ExistX(ctx context.Context) bool {
	exist, err := aaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aaq *AutomationActivityQuery) Clone() *AutomationActivityQuery {
	if aaq == nil {
		return nil
	}
	return &AutomationActivityQuery{
		config:            aaq.config,
		limit:             aaq.limit,
		offset:            aaq.offset,
		order:             append([]OrderFunc{}, aaq.order...),
		unique:            append([]string{}, aaq.unique...),
		predicates:        append([]predicate.AutomationActivity{}, aaq.predicates...),
		withAuthor:        aaq.withAuthor.Clone(),
		withFlowInstance:  aaq.withFlowInstance.Clone(),
		withBlockInstance: aaq.withBlockInstance.Clone(),
		// clone intermediate query.
		sql:  aaq.sql.Clone(),
		path: aaq.path,
	}
}

//  WithAuthor tells the query-builder to eager-loads the nodes that are connected to
// the "author" edge. The optional arguments used to configure the query builder of the edge.
func (aaq *AutomationActivityQuery) WithAuthor(opts ...func(*UserQuery)) *AutomationActivityQuery {
	query := &UserQuery{config: aaq.config}
	for _, opt := range opts {
		opt(query)
	}
	aaq.withAuthor = query
	return aaq
}

//  WithFlowInstance tells the query-builder to eager-loads the nodes that are connected to
// the "flow_instance" edge. The optional arguments used to configure the query builder of the edge.
func (aaq *AutomationActivityQuery) WithFlowInstance(opts ...func(*FlowInstanceQuery)) *AutomationActivityQuery {
	query := &FlowInstanceQuery{config: aaq.config}
	for _, opt := range opts {
		opt(query)
	}
	aaq.withFlowInstance = query
	return aaq
}

//  WithBlockInstance tells the query-builder to eager-loads the nodes that are connected to
// the "block_instance" edge. The optional arguments used to configure the query builder of the edge.
func (aaq *AutomationActivityQuery) WithBlockInstance(opts ...func(*BlockInstanceQuery)) *AutomationActivityQuery {
	query := &BlockInstanceQuery{config: aaq.config}
	for _, opt := range opts {
		opt(query)
	}
	aaq.withBlockInstance = query
	return aaq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AutomationActivity.Query().
//		GroupBy(automationactivity.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aaq *AutomationActivityQuery) GroupBy(field string, fields ...string) *AutomationActivityGroupBy {
	group := &AutomationActivityGroupBy{config: aaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aaq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.AutomationActivity.Query().
//		Select(automationactivity.FieldCreateTime).
//		Scan(ctx, &v)
//
func (aaq *AutomationActivityQuery) Select(field string, fields ...string) *AutomationActivitySelect {
	selector := &AutomationActivitySelect{config: aaq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aaq.sqlQuery(), nil
	}
	return selector
}

func (aaq *AutomationActivityQuery) prepareQuery(ctx context.Context) error {
	if aaq.path != nil {
		prev, err := aaq.path(ctx)
		if err != nil {
			return err
		}
		aaq.sql = prev
	}
	if err := automationactivity.Policy.EvalQuery(ctx, aaq); err != nil {
		return err
	}
	return nil
}

func (aaq *AutomationActivityQuery) sqlAll(ctx context.Context) ([]*AutomationActivity, error) {
	var (
		nodes       = []*AutomationActivity{}
		withFKs     = aaq.withFKs
		_spec       = aaq.querySpec()
		loadedTypes = [3]bool{
			aaq.withAuthor != nil,
			aaq.withFlowInstance != nil,
			aaq.withBlockInstance != nil,
		}
	)
	if aaq.withAuthor != nil || aaq.withFlowInstance != nil || aaq.withBlockInstance != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, automationactivity.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &AutomationActivity{config: aaq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, aaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := aaq.withAuthor; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AutomationActivity)
		for i := range nodes {
			if fk := nodes[i].automation_activity_author; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "automation_activity_author" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Author = n
			}
		}
	}

	if query := aaq.withFlowInstance; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AutomationActivity)
		for i := range nodes {
			if fk := nodes[i].flow_instance_flow_activities; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(flowinstance.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "flow_instance_flow_activities" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.FlowInstance = n
			}
		}
	}

	if query := aaq.withBlockInstance; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AutomationActivity)
		for i := range nodes {
			if fk := nodes[i].block_instance_block_activities; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(blockinstance.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "block_instance_block_activities" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.BlockInstance = n
			}
		}
	}

	return nodes, nil
}

func (aaq *AutomationActivityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aaq.querySpec()
	return sqlgraph.CountNodes(ctx, aaq.driver, _spec)
}

func (aaq *AutomationActivityQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (aaq *AutomationActivityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   automationactivity.Table,
			Columns: automationactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: automationactivity.FieldID,
			},
		},
		From:   aaq.sql,
		Unique: true,
	}
	if ps := aaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, automationactivity.ValidColumn)
			}
		}
	}
	return _spec
}

func (aaq *AutomationActivityQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(aaq.driver.Dialect())
	t1 := builder.Table(automationactivity.Table)
	selector := builder.Select(t1.Columns(automationactivity.Columns...)...).From(t1)
	if aaq.sql != nil {
		selector = aaq.sql
		selector.Select(selector.Columns(automationactivity.Columns...)...)
	}
	for _, p := range aaq.predicates {
		p(selector)
	}
	for _, p := range aaq.order {
		p(selector, automationactivity.ValidColumn)
	}
	if offset := aaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AutomationActivityGroupBy is the builder for group-by AutomationActivity entities.
type AutomationActivityGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aagb *AutomationActivityGroupBy) Aggregate(fns ...AggregateFunc) *AutomationActivityGroupBy {
	aagb.fns = append(aagb.fns, fns...)
	return aagb
}

// Scan applies the group-by query and scan the result into the given value.
func (aagb *AutomationActivityGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := aagb.path(ctx)
	if err != nil {
		return err
	}
	aagb.sql = query
	return aagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aagb *AutomationActivityGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := aagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (aagb *AutomationActivityGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(aagb.fields) > 1 {
		return nil, errors.New("ent: AutomationActivityGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := aagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aagb *AutomationActivityGroupBy) StringsX(ctx context.Context) []string {
	v, err := aagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (aagb *AutomationActivityGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{automationactivity.Label}
	default:
		err = fmt.Errorf("ent: AutomationActivityGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aagb *AutomationActivityGroupBy) StringX(ctx context.Context) string {
	v, err := aagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (aagb *AutomationActivityGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(aagb.fields) > 1 {
		return nil, errors.New("ent: AutomationActivityGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := aagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aagb *AutomationActivityGroupBy) IntsX(ctx context.Context) []int {
	v, err := aagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (aagb *AutomationActivityGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{automationactivity.Label}
	default:
		err = fmt.Errorf("ent: AutomationActivityGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aagb *AutomationActivityGroupBy) IntX(ctx context.Context) int {
	v, err := aagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (aagb *AutomationActivityGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(aagb.fields) > 1 {
		return nil, errors.New("ent: AutomationActivityGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := aagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aagb *AutomationActivityGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := aagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (aagb *AutomationActivityGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{automationactivity.Label}
	default:
		err = fmt.Errorf("ent: AutomationActivityGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aagb *AutomationActivityGroupBy) Float64X(ctx context.Context) float64 {
	v, err := aagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (aagb *AutomationActivityGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(aagb.fields) > 1 {
		return nil, errors.New("ent: AutomationActivityGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := aagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aagb *AutomationActivityGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := aagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (aagb *AutomationActivityGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{automationactivity.Label}
	default:
		err = fmt.Errorf("ent: AutomationActivityGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aagb *AutomationActivityGroupBy) BoolX(ctx context.Context) bool {
	v, err := aagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aagb *AutomationActivityGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range aagb.fields {
		if !automationactivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := aagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aagb *AutomationActivityGroupBy) sqlQuery() *sql.Selector {
	selector := aagb.sql
	columns := make([]string, 0, len(aagb.fields)+len(aagb.fns))
	columns = append(columns, aagb.fields...)
	for _, fn := range aagb.fns {
		columns = append(columns, fn(selector, automationactivity.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(aagb.fields...)
}

// AutomationActivitySelect is the builder for select fields of AutomationActivity entities.
type AutomationActivitySelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (aas *AutomationActivitySelect) Scan(ctx context.Context, v interface{}) error {
	query, err := aas.path(ctx)
	if err != nil {
		return err
	}
	aas.sql = query
	return aas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aas *AutomationActivitySelect) ScanX(ctx context.Context, v interface{}) {
	if err := aas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (aas *AutomationActivitySelect) Strings(ctx context.Context) ([]string, error) {
	if len(aas.fields) > 1 {
		return nil, errors.New("ent: AutomationActivitySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := aas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aas *AutomationActivitySelect) StringsX(ctx context.Context) []string {
	v, err := aas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (aas *AutomationActivitySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{automationactivity.Label}
	default:
		err = fmt.Errorf("ent: AutomationActivitySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aas *AutomationActivitySelect) StringX(ctx context.Context) string {
	v, err := aas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (aas *AutomationActivitySelect) Ints(ctx context.Context) ([]int, error) {
	if len(aas.fields) > 1 {
		return nil, errors.New("ent: AutomationActivitySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := aas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aas *AutomationActivitySelect) IntsX(ctx context.Context) []int {
	v, err := aas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (aas *AutomationActivitySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{automationactivity.Label}
	default:
		err = fmt.Errorf("ent: AutomationActivitySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aas *AutomationActivitySelect) IntX(ctx context.Context) int {
	v, err := aas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (aas *AutomationActivitySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(aas.fields) > 1 {
		return nil, errors.New("ent: AutomationActivitySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := aas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aas *AutomationActivitySelect) Float64sX(ctx context.Context) []float64 {
	v, err := aas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (aas *AutomationActivitySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{automationactivity.Label}
	default:
		err = fmt.Errorf("ent: AutomationActivitySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aas *AutomationActivitySelect) Float64X(ctx context.Context) float64 {
	v, err := aas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (aas *AutomationActivitySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(aas.fields) > 1 {
		return nil, errors.New("ent: AutomationActivitySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := aas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aas *AutomationActivitySelect) BoolsX(ctx context.Context) []bool {
	v, err := aas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (aas *AutomationActivitySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{automationactivity.Label}
	default:
		err = fmt.Errorf("ent: AutomationActivitySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aas *AutomationActivitySelect) BoolX(ctx context.Context) bool {
	v, err := aas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aas *AutomationActivitySelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range aas.fields {
		if !automationactivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := aas.sqlQuery().Query()
	if err := aas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aas *AutomationActivitySelect) sqlQuery() sql.Querier {
	selector := aas.sql
	selector.Select(selector.Columns(aas.fields...)...)
	return selector
}
