// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package uplitem

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Externalid applies equality check predicate on the "externalid" field. It's identical to ExternalidEQ.
func Externalid(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalid), v))
	})
}

// Item applies equality check predicate on the "item" field. It's identical to ItemEQ.
func Item(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItem), v))
	})
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// ExternalidEQ applies the EQ predicate on the "externalid" field.
func ExternalidEQ(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalid), v))
	})
}

// ExternalidNEQ applies the NEQ predicate on the "externalid" field.
func ExternalidNEQ(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExternalid), v))
	})
}

// ExternalidIn applies the In predicate on the "externalid" field.
func ExternalidIn(vs ...string) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExternalid), v...))
	})
}

// ExternalidNotIn applies the NotIn predicate on the "externalid" field.
func ExternalidNotIn(vs ...string) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExternalid), v...))
	})
}

// ExternalidGT applies the GT predicate on the "externalid" field.
func ExternalidGT(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExternalid), v))
	})
}

// ExternalidGTE applies the GTE predicate on the "externalid" field.
func ExternalidGTE(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExternalid), v))
	})
}

// ExternalidLT applies the LT predicate on the "externalid" field.
func ExternalidLT(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExternalid), v))
	})
}

// ExternalidLTE applies the LTE predicate on the "externalid" field.
func ExternalidLTE(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExternalid), v))
	})
}

// ExternalidContains applies the Contains predicate on the "externalid" field.
func ExternalidContains(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExternalid), v))
	})
}

// ExternalidHasPrefix applies the HasPrefix predicate on the "externalid" field.
func ExternalidHasPrefix(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExternalid), v))
	})
}

// ExternalidHasSuffix applies the HasSuffix predicate on the "externalid" field.
func ExternalidHasSuffix(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExternalid), v))
	})
}

// ExternalidEqualFold applies the EqualFold predicate on the "externalid" field.
func ExternalidEqualFold(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExternalid), v))
	})
}

// ExternalidContainsFold applies the ContainsFold predicate on the "externalid" field.
func ExternalidContainsFold(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExternalid), v))
	})
}

// ItemEQ applies the EQ predicate on the "item" field.
func ItemEQ(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItem), v))
	})
}

// ItemNEQ applies the NEQ predicate on the "item" field.
func ItemNEQ(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItem), v))
	})
}

// ItemIn applies the In predicate on the "item" field.
func ItemIn(vs ...string) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldItem), v...))
	})
}

// ItemNotIn applies the NotIn predicate on the "item" field.
func ItemNotIn(vs ...string) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldItem), v...))
	})
}

// ItemGT applies the GT predicate on the "item" field.
func ItemGT(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItem), v))
	})
}

// ItemGTE applies the GTE predicate on the "item" field.
func ItemGTE(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItem), v))
	})
}

// ItemLT applies the LT predicate on the "item" field.
func ItemLT(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItem), v))
	})
}

// ItemLTE applies the LTE predicate on the "item" field.
func ItemLTE(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItem), v))
	})
}

// ItemContains applies the Contains predicate on the "item" field.
func ItemContains(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItem), v))
	})
}

// ItemHasPrefix applies the HasPrefix predicate on the "item" field.
func ItemHasPrefix(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItem), v))
	})
}

// ItemHasSuffix applies the HasSuffix predicate on the "item" field.
func ItemHasSuffix(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItem), v))
	})
}

// ItemEqualFold applies the EqualFold predicate on the "item" field.
func ItemEqualFold(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItem), v))
	})
}

// ItemContainsFold applies the ContainsFold predicate on the "item" field.
func ItemContainsFold(v string) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItem), v))
	})
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnit), v))
	})
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...float64) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnit), v...))
	})
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...float64) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnit), v...))
	})
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnit), v))
	})
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnit), v))
	})
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnit), v))
	})
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnit), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.UplItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UplItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// HasUplitem applies the HasEdge predicate on the "uplitem" edge.
func HasUplitem() predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UplitemTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UplitemTable, UplitemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUplitemWith applies the HasEdge predicate on the "uplitem" edge with a given conditions (other predicates).
func HasUplitemWith(preds ...predicate.Cost) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UplitemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UplitemTable, UplitemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpl applies the HasEdge predicate on the "upl" edge.
func HasUpl() predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UplTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UplTable, UplColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUplWith applies the HasEdge predicate on the "upl" edge with a given conditions (other predicates).
func HasUplWith(preds ...predicate.Upl) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UplInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UplTable, UplColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.UplItem) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.UplItem) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UplItem) predicate.UplItem {
	return predicate.UplItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
