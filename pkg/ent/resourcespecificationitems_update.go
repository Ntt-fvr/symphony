// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecificationitems"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecificationrelationship"
)

// ResourceSpecificationItemsUpdate is the builder for updating ResourceSpecificationItems entities.
type ResourceSpecificationItemsUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceSpecificationItemsMutation
}

// Where adds a new predicate for the builder.
func (rsiu *ResourceSpecificationItemsUpdate) Where(ps ...predicate.ResourceSpecificationItems) *ResourceSpecificationItemsUpdate {
	rsiu.mutation.predicates = append(rsiu.mutation.predicates, ps...)
	return rsiu
}

// SetResourcespecificationrelationshipID sets the resourcespecificationrelationship edge to ResourceSpecificationRelationship by id.
func (rsiu *ResourceSpecificationItemsUpdate) SetResourcespecificationrelationshipID(id int) *ResourceSpecificationItemsUpdate {
	rsiu.mutation.SetResourcespecificationrelationshipID(id)
	return rsiu
}

// SetNillableResourcespecificationrelationshipID sets the resourcespecificationrelationship edge to ResourceSpecificationRelationship by id if the given value is not nil.
func (rsiu *ResourceSpecificationItemsUpdate) SetNillableResourcespecificationrelationshipID(id *int) *ResourceSpecificationItemsUpdate {
	if id != nil {
		rsiu = rsiu.SetResourcespecificationrelationshipID(*id)
	}
	return rsiu
}

// SetResourcespecificationrelationship sets the resourcespecificationrelationship edge to ResourceSpecificationRelationship.
func (rsiu *ResourceSpecificationItemsUpdate) SetResourcespecificationrelationship(r *ResourceSpecificationRelationship) *ResourceSpecificationItemsUpdate {
	return rsiu.SetResourcespecificationrelationshipID(r.ID)
}

// SetResourcespecificationitemsID sets the resourcespecificationitems edge to ResourceSpecification by id.
func (rsiu *ResourceSpecificationItemsUpdate) SetResourcespecificationitemsID(id int) *ResourceSpecificationItemsUpdate {
	rsiu.mutation.SetResourcespecificationitemsID(id)
	return rsiu
}

// SetNillableResourcespecificationitemsID sets the resourcespecificationitems edge to ResourceSpecification by id if the given value is not nil.
func (rsiu *ResourceSpecificationItemsUpdate) SetNillableResourcespecificationitemsID(id *int) *ResourceSpecificationItemsUpdate {
	if id != nil {
		rsiu = rsiu.SetResourcespecificationitemsID(*id)
	}
	return rsiu
}

// SetResourcespecificationitems sets the resourcespecificationitems edge to ResourceSpecification.
func (rsiu *ResourceSpecificationItemsUpdate) SetResourcespecificationitems(r *ResourceSpecification) *ResourceSpecificationItemsUpdate {
	return rsiu.SetResourcespecificationitemsID(r.ID)
}

// Mutation returns the ResourceSpecificationItemsMutation object of the builder.
func (rsiu *ResourceSpecificationItemsUpdate) Mutation() *ResourceSpecificationItemsMutation {
	return rsiu.mutation
}

// ClearResourcespecificationrelationship clears the "resourcespecificationrelationship" edge to type ResourceSpecificationRelationship.
func (rsiu *ResourceSpecificationItemsUpdate) ClearResourcespecificationrelationship() *ResourceSpecificationItemsUpdate {
	rsiu.mutation.ClearResourcespecificationrelationship()
	return rsiu
}

// ClearResourcespecificationitems clears the "resourcespecificationitems" edge to type ResourceSpecification.
func (rsiu *ResourceSpecificationItemsUpdate) ClearResourcespecificationitems() *ResourceSpecificationItemsUpdate {
	rsiu.mutation.ClearResourcespecificationitems()
	return rsiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsiu *ResourceSpecificationItemsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rsiu.defaults()
	if len(rsiu.hooks) == 0 {
		affected, err = rsiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceSpecificationItemsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rsiu.mutation = mutation
			affected, err = rsiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rsiu.hooks) - 1; i >= 0; i-- {
			mut = rsiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsiu *ResourceSpecificationItemsUpdate) SaveX(ctx context.Context) int {
	affected, err := rsiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsiu *ResourceSpecificationItemsUpdate) Exec(ctx context.Context) error {
	_, err := rsiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsiu *ResourceSpecificationItemsUpdate) ExecX(ctx context.Context) {
	if err := rsiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsiu *ResourceSpecificationItemsUpdate) defaults() {
	if _, ok := rsiu.mutation.UpdateTime(); !ok {
		v := resourcespecificationitems.UpdateDefaultUpdateTime()
		rsiu.mutation.SetUpdateTime(v)
	}
}

func (rsiu *ResourceSpecificationItemsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcespecificationitems.Table,
			Columns: resourcespecificationitems.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcespecificationitems.FieldID,
			},
		},
	}
	if ps := rsiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcespecificationitems.FieldUpdateTime,
		})
	}
	if rsiu.mutation.ResourcespecificationrelationshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationitems.ResourcespecificationrelationshipTable,
			Columns: []string{resourcespecificationitems.ResourcespecificationrelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationrelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsiu.mutation.ResourcespecificationrelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationitems.ResourcespecificationrelationshipTable,
			Columns: []string{resourcespecificationitems.ResourcespecificationrelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationrelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsiu.mutation.ResourcespecificationitemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationitems.ResourcespecificationitemsTable,
			Columns: []string{resourcespecificationitems.ResourcespecificationitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsiu.mutation.ResourcespecificationitemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationitems.ResourcespecificationitemsTable,
			Columns: []string{resourcespecificationitems.ResourcespecificationitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcespecificationitems.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceSpecificationItemsUpdateOne is the builder for updating a single ResourceSpecificationItems entity.
type ResourceSpecificationItemsUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceSpecificationItemsMutation
}

// SetResourcespecificationrelationshipID sets the resourcespecificationrelationship edge to ResourceSpecificationRelationship by id.
func (rsiuo *ResourceSpecificationItemsUpdateOne) SetResourcespecificationrelationshipID(id int) *ResourceSpecificationItemsUpdateOne {
	rsiuo.mutation.SetResourcespecificationrelationshipID(id)
	return rsiuo
}

// SetNillableResourcespecificationrelationshipID sets the resourcespecificationrelationship edge to ResourceSpecificationRelationship by id if the given value is not nil.
func (rsiuo *ResourceSpecificationItemsUpdateOne) SetNillableResourcespecificationrelationshipID(id *int) *ResourceSpecificationItemsUpdateOne {
	if id != nil {
		rsiuo = rsiuo.SetResourcespecificationrelationshipID(*id)
	}
	return rsiuo
}

// SetResourcespecificationrelationship sets the resourcespecificationrelationship edge to ResourceSpecificationRelationship.
func (rsiuo *ResourceSpecificationItemsUpdateOne) SetResourcespecificationrelationship(r *ResourceSpecificationRelationship) *ResourceSpecificationItemsUpdateOne {
	return rsiuo.SetResourcespecificationrelationshipID(r.ID)
}

// SetResourcespecificationitemsID sets the resourcespecificationitems edge to ResourceSpecification by id.
func (rsiuo *ResourceSpecificationItemsUpdateOne) SetResourcespecificationitemsID(id int) *ResourceSpecificationItemsUpdateOne {
	rsiuo.mutation.SetResourcespecificationitemsID(id)
	return rsiuo
}

// SetNillableResourcespecificationitemsID sets the resourcespecificationitems edge to ResourceSpecification by id if the given value is not nil.
func (rsiuo *ResourceSpecificationItemsUpdateOne) SetNillableResourcespecificationitemsID(id *int) *ResourceSpecificationItemsUpdateOne {
	if id != nil {
		rsiuo = rsiuo.SetResourcespecificationitemsID(*id)
	}
	return rsiuo
}

// SetResourcespecificationitems sets the resourcespecificationitems edge to ResourceSpecification.
func (rsiuo *ResourceSpecificationItemsUpdateOne) SetResourcespecificationitems(r *ResourceSpecification) *ResourceSpecificationItemsUpdateOne {
	return rsiuo.SetResourcespecificationitemsID(r.ID)
}

// Mutation returns the ResourceSpecificationItemsMutation object of the builder.
func (rsiuo *ResourceSpecificationItemsUpdateOne) Mutation() *ResourceSpecificationItemsMutation {
	return rsiuo.mutation
}

// ClearResourcespecificationrelationship clears the "resourcespecificationrelationship" edge to type ResourceSpecificationRelationship.
func (rsiuo *ResourceSpecificationItemsUpdateOne) ClearResourcespecificationrelationship() *ResourceSpecificationItemsUpdateOne {
	rsiuo.mutation.ClearResourcespecificationrelationship()
	return rsiuo
}

// ClearResourcespecificationitems clears the "resourcespecificationitems" edge to type ResourceSpecification.
func (rsiuo *ResourceSpecificationItemsUpdateOne) ClearResourcespecificationitems() *ResourceSpecificationItemsUpdateOne {
	rsiuo.mutation.ClearResourcespecificationitems()
	return rsiuo
}

// Save executes the query and returns the updated entity.
func (rsiuo *ResourceSpecificationItemsUpdateOne) Save(ctx context.Context) (*ResourceSpecificationItems, error) {
	var (
		err  error
		node *ResourceSpecificationItems
	)
	rsiuo.defaults()
	if len(rsiuo.hooks) == 0 {
		node, err = rsiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceSpecificationItemsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rsiuo.mutation = mutation
			node, err = rsiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rsiuo.hooks) - 1; i >= 0; i-- {
			mut = rsiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsiuo *ResourceSpecificationItemsUpdateOne) SaveX(ctx context.Context) *ResourceSpecificationItems {
	node, err := rsiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsiuo *ResourceSpecificationItemsUpdateOne) Exec(ctx context.Context) error {
	_, err := rsiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsiuo *ResourceSpecificationItemsUpdateOne) ExecX(ctx context.Context) {
	if err := rsiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsiuo *ResourceSpecificationItemsUpdateOne) defaults() {
	if _, ok := rsiuo.mutation.UpdateTime(); !ok {
		v := resourcespecificationitems.UpdateDefaultUpdateTime()
		rsiuo.mutation.SetUpdateTime(v)
	}
}

func (rsiuo *ResourceSpecificationItemsUpdateOne) sqlSave(ctx context.Context) (_node *ResourceSpecificationItems, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcespecificationitems.Table,
			Columns: resourcespecificationitems.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcespecificationitems.FieldID,
			},
		},
	}
	id, ok := rsiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceSpecificationItems.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rsiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcespecificationitems.FieldUpdateTime,
		})
	}
	if rsiuo.mutation.ResourcespecificationrelationshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationitems.ResourcespecificationrelationshipTable,
			Columns: []string{resourcespecificationitems.ResourcespecificationrelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationrelationship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsiuo.mutation.ResourcespecificationrelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationitems.ResourcespecificationrelationshipTable,
			Columns: []string{resourcespecificationitems.ResourcespecificationrelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecificationrelationship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsiuo.mutation.ResourcespecificationitemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationitems.ResourcespecificationitemsTable,
			Columns: []string{resourcespecificationitems.ResourcespecificationitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsiuo.mutation.ResourcespecificationitemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcespecificationitems.ResourcespecificationitemsTable,
			Columns: []string{resourcespecificationitems.ResourcespecificationitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceSpecificationItems{config: rsiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rsiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcespecificationitems.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
