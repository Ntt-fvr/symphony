// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetypeclass"
)

// ResourceTypeClassUpdate is the builder for updating ResourceTypeClass entities.
type ResourceTypeClassUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceTypeClassMutation
}

// Where adds a new predicate for the builder.
func (rtcu *ResourceTypeClassUpdate) Where(ps ...predicate.ResourceTypeClass) *ResourceTypeClassUpdate {
	rtcu.mutation.predicates = append(rtcu.mutation.predicates, ps...)
	return rtcu
}

// SetName sets the name field.
func (rtcu *ResourceTypeClassUpdate) SetName(s string) *ResourceTypeClassUpdate {
	rtcu.mutation.SetName(s)
	return rtcu
}

// AddResourceTypeClasIDs adds the resource_type_class edge to ResourceType by ids.
func (rtcu *ResourceTypeClassUpdate) AddResourceTypeClasIDs(ids ...int) *ResourceTypeClassUpdate {
	rtcu.mutation.AddResourceTypeClasIDs(ids...)
	return rtcu
}

// AddResourceTypeClass adds the resource_type_class edges to ResourceType.
func (rtcu *ResourceTypeClassUpdate) AddResourceTypeClass(r ...*ResourceType) *ResourceTypeClassUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtcu.AddResourceTypeClasIDs(ids...)
}

// Mutation returns the ResourceTypeClassMutation object of the builder.
func (rtcu *ResourceTypeClassUpdate) Mutation() *ResourceTypeClassMutation {
	return rtcu.mutation
}

// ClearResourceTypeClass clears all "resource_type_class" edges to type ResourceType.
func (rtcu *ResourceTypeClassUpdate) ClearResourceTypeClass() *ResourceTypeClassUpdate {
	rtcu.mutation.ClearResourceTypeClass()
	return rtcu
}

// RemoveResourceTypeClasIDs removes the resource_type_class edge to ResourceType by ids.
func (rtcu *ResourceTypeClassUpdate) RemoveResourceTypeClasIDs(ids ...int) *ResourceTypeClassUpdate {
	rtcu.mutation.RemoveResourceTypeClasIDs(ids...)
	return rtcu
}

// RemoveResourceTypeClass removes resource_type_class edges to ResourceType.
func (rtcu *ResourceTypeClassUpdate) RemoveResourceTypeClass(r ...*ResourceType) *ResourceTypeClassUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtcu.RemoveResourceTypeClasIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtcu *ResourceTypeClassUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rtcu.defaults()
	if len(rtcu.hooks) == 0 {
		if err = rtcu.check(); err != nil {
			return 0, err
		}
		affected, err = rtcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceTypeClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtcu.check(); err != nil {
				return 0, err
			}
			rtcu.mutation = mutation
			affected, err = rtcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rtcu.hooks) - 1; i >= 0; i-- {
			mut = rtcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtcu *ResourceTypeClassUpdate) SaveX(ctx context.Context) int {
	affected, err := rtcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtcu *ResourceTypeClassUpdate) Exec(ctx context.Context) error {
	_, err := rtcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcu *ResourceTypeClassUpdate) ExecX(ctx context.Context) {
	if err := rtcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtcu *ResourceTypeClassUpdate) defaults() {
	if _, ok := rtcu.mutation.UpdateTime(); !ok {
		v := resourcetypeclass.UpdateDefaultUpdateTime()
		rtcu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtcu *ResourceTypeClassUpdate) check() error {
	if v, ok := rtcu.mutation.Name(); ok {
		if err := resourcetypeclass.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rtcu *ResourceTypeClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetypeclass.Table,
			Columns: resourcetypeclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetypeclass.FieldID,
			},
		},
	}
	if ps := rtcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcetypeclass.FieldUpdateTime,
		})
	}
	if value, ok := rtcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcetypeclass.FieldName,
		})
	}
	if rtcu.mutation.ResourceTypeClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypeclass.ResourceTypeClassTable,
			Columns: []string{resourcetypeclass.ResourceTypeClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtcu.mutation.RemovedResourceTypeClassIDs(); len(nodes) > 0 && !rtcu.mutation.ResourceTypeClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypeclass.ResourceTypeClassTable,
			Columns: []string{resourcetypeclass.ResourceTypeClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtcu.mutation.ResourceTypeClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypeclass.ResourceTypeClassTable,
			Columns: []string{resourcetypeclass.ResourceTypeClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcetypeclass.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceTypeClassUpdateOne is the builder for updating a single ResourceTypeClass entity.
type ResourceTypeClassUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceTypeClassMutation
}

// SetName sets the name field.
func (rtcuo *ResourceTypeClassUpdateOne) SetName(s string) *ResourceTypeClassUpdateOne {
	rtcuo.mutation.SetName(s)
	return rtcuo
}

// AddResourceTypeClasIDs adds the resource_type_class edge to ResourceType by ids.
func (rtcuo *ResourceTypeClassUpdateOne) AddResourceTypeClasIDs(ids ...int) *ResourceTypeClassUpdateOne {
	rtcuo.mutation.AddResourceTypeClasIDs(ids...)
	return rtcuo
}

// AddResourceTypeClass adds the resource_type_class edges to ResourceType.
func (rtcuo *ResourceTypeClassUpdateOne) AddResourceTypeClass(r ...*ResourceType) *ResourceTypeClassUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtcuo.AddResourceTypeClasIDs(ids...)
}

// Mutation returns the ResourceTypeClassMutation object of the builder.
func (rtcuo *ResourceTypeClassUpdateOne) Mutation() *ResourceTypeClassMutation {
	return rtcuo.mutation
}

// ClearResourceTypeClass clears all "resource_type_class" edges to type ResourceType.
func (rtcuo *ResourceTypeClassUpdateOne) ClearResourceTypeClass() *ResourceTypeClassUpdateOne {
	rtcuo.mutation.ClearResourceTypeClass()
	return rtcuo
}

// RemoveResourceTypeClasIDs removes the resource_type_class edge to ResourceType by ids.
func (rtcuo *ResourceTypeClassUpdateOne) RemoveResourceTypeClasIDs(ids ...int) *ResourceTypeClassUpdateOne {
	rtcuo.mutation.RemoveResourceTypeClasIDs(ids...)
	return rtcuo
}

// RemoveResourceTypeClass removes resource_type_class edges to ResourceType.
func (rtcuo *ResourceTypeClassUpdateOne) RemoveResourceTypeClass(r ...*ResourceType) *ResourceTypeClassUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtcuo.RemoveResourceTypeClasIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (rtcuo *ResourceTypeClassUpdateOne) Save(ctx context.Context) (*ResourceTypeClass, error) {
	var (
		err  error
		node *ResourceTypeClass
	)
	rtcuo.defaults()
	if len(rtcuo.hooks) == 0 {
		if err = rtcuo.check(); err != nil {
			return nil, err
		}
		node, err = rtcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceTypeClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtcuo.check(); err != nil {
				return nil, err
			}
			rtcuo.mutation = mutation
			node, err = rtcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rtcuo.hooks) - 1; i >= 0; i-- {
			mut = rtcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtcuo *ResourceTypeClassUpdateOne) SaveX(ctx context.Context) *ResourceTypeClass {
	node, err := rtcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtcuo *ResourceTypeClassUpdateOne) Exec(ctx context.Context) error {
	_, err := rtcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcuo *ResourceTypeClassUpdateOne) ExecX(ctx context.Context) {
	if err := rtcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtcuo *ResourceTypeClassUpdateOne) defaults() {
	if _, ok := rtcuo.mutation.UpdateTime(); !ok {
		v := resourcetypeclass.UpdateDefaultUpdateTime()
		rtcuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtcuo *ResourceTypeClassUpdateOne) check() error {
	if v, ok := rtcuo.mutation.Name(); ok {
		if err := resourcetypeclass.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rtcuo *ResourceTypeClassUpdateOne) sqlSave(ctx context.Context) (_node *ResourceTypeClass, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetypeclass.Table,
			Columns: resourcetypeclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetypeclass.FieldID,
			},
		},
	}
	id, ok := rtcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceTypeClass.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rtcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcetypeclass.FieldUpdateTime,
		})
	}
	if value, ok := rtcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcetypeclass.FieldName,
		})
	}
	if rtcuo.mutation.ResourceTypeClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypeclass.ResourceTypeClassTable,
			Columns: []string{resourcetypeclass.ResourceTypeClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtcuo.mutation.RemovedResourceTypeClassIDs(); len(nodes) > 0 && !rtcuo.mutation.ResourceTypeClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypeclass.ResourceTypeClassTable,
			Columns: []string{resourcetypeclass.ResourceTypeClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtcuo.mutation.ResourceTypeClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetypeclass.ResourceTypeClassTable,
			Columns: []string{resourcetypeclass.ResourceTypeClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceTypeClass{config: rtcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rtcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcetypeclass.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
