// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/reconciliationrule"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
)

// ReconciliationRuleUpdate is the builder for updating ReconciliationRule entities.
type ReconciliationRuleUpdate struct {
	config
	hooks    []Hook
	mutation *ReconciliationRuleMutation
}

// Where adds a new predicate for the builder.
func (rru *ReconciliationRuleUpdate) Where(ps ...predicate.ReconciliationRule) *ReconciliationRuleUpdate {
	rru.mutation.predicates = append(rru.mutation.predicates, ps...)
	return rru
}

// SetName sets the name field.
func (rru *ReconciliationRuleUpdate) SetName(s string) *ReconciliationRuleUpdate {
	rru.mutation.SetName(s)
	return rru
}

// AddReconciliationRuleTypeIDs adds the reconciliation_rule_type edge to ResourceType by ids.
func (rru *ReconciliationRuleUpdate) AddReconciliationRuleTypeIDs(ids ...int) *ReconciliationRuleUpdate {
	rru.mutation.AddReconciliationRuleTypeIDs(ids...)
	return rru
}

// AddReconciliationRuleType adds the reconciliation_rule_type edges to ResourceType.
func (rru *ReconciliationRuleUpdate) AddReconciliationRuleType(r ...*ResourceType) *ReconciliationRuleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rru.AddReconciliationRuleTypeIDs(ids...)
}

// AddReconciliationRuleSpecificationIDs adds the reconciliation_rule_specification edge to ResourceSpecification by ids.
func (rru *ReconciliationRuleUpdate) AddReconciliationRuleSpecificationIDs(ids ...int) *ReconciliationRuleUpdate {
	rru.mutation.AddReconciliationRuleSpecificationIDs(ids...)
	return rru
}

// AddReconciliationRuleSpecification adds the reconciliation_rule_specification edges to ResourceSpecification.
func (rru *ReconciliationRuleUpdate) AddReconciliationRuleSpecification(r ...*ResourceSpecification) *ReconciliationRuleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rru.AddReconciliationRuleSpecificationIDs(ids...)
}

// Mutation returns the ReconciliationRuleMutation object of the builder.
func (rru *ReconciliationRuleUpdate) Mutation() *ReconciliationRuleMutation {
	return rru.mutation
}

// ClearReconciliationRuleType clears all "reconciliation_rule_type" edges to type ResourceType.
func (rru *ReconciliationRuleUpdate) ClearReconciliationRuleType() *ReconciliationRuleUpdate {
	rru.mutation.ClearReconciliationRuleType()
	return rru
}

// RemoveReconciliationRuleTypeIDs removes the reconciliation_rule_type edge to ResourceType by ids.
func (rru *ReconciliationRuleUpdate) RemoveReconciliationRuleTypeIDs(ids ...int) *ReconciliationRuleUpdate {
	rru.mutation.RemoveReconciliationRuleTypeIDs(ids...)
	return rru
}

// RemoveReconciliationRuleType removes reconciliation_rule_type edges to ResourceType.
func (rru *ReconciliationRuleUpdate) RemoveReconciliationRuleType(r ...*ResourceType) *ReconciliationRuleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rru.RemoveReconciliationRuleTypeIDs(ids...)
}

// ClearReconciliationRuleSpecification clears all "reconciliation_rule_specification" edges to type ResourceSpecification.
func (rru *ReconciliationRuleUpdate) ClearReconciliationRuleSpecification() *ReconciliationRuleUpdate {
	rru.mutation.ClearReconciliationRuleSpecification()
	return rru
}

// RemoveReconciliationRuleSpecificationIDs removes the reconciliation_rule_specification edge to ResourceSpecification by ids.
func (rru *ReconciliationRuleUpdate) RemoveReconciliationRuleSpecificationIDs(ids ...int) *ReconciliationRuleUpdate {
	rru.mutation.RemoveReconciliationRuleSpecificationIDs(ids...)
	return rru
}

// RemoveReconciliationRuleSpecification removes reconciliation_rule_specification edges to ResourceSpecification.
func (rru *ReconciliationRuleUpdate) RemoveReconciliationRuleSpecification(r ...*ResourceSpecification) *ReconciliationRuleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rru.RemoveReconciliationRuleSpecificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rru *ReconciliationRuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rru.defaults()
	if len(rru.hooks) == 0 {
		if err = rru.check(); err != nil {
			return 0, err
		}
		affected, err = rru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReconciliationRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rru.check(); err != nil {
				return 0, err
			}
			rru.mutation = mutation
			affected, err = rru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rru.hooks) - 1; i >= 0; i-- {
			mut = rru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rru *ReconciliationRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *ReconciliationRuleUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *ReconciliationRuleUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rru *ReconciliationRuleUpdate) defaults() {
	if _, ok := rru.mutation.UpdateTime(); !ok {
		v := reconciliationrule.UpdateDefaultUpdateTime()
		rru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rru *ReconciliationRuleUpdate) check() error {
	if v, ok := rru.mutation.Name(); ok {
		if err := reconciliationrule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rru *ReconciliationRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reconciliationrule.Table,
			Columns: reconciliationrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reconciliationrule.FieldID,
			},
		},
	}
	if ps := rru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reconciliationrule.FieldUpdateTime,
		})
	}
	if value, ok := rru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reconciliationrule.FieldName,
		})
	}
	if rru.mutation.ReconciliationRuleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleTypeTable,
			Columns: []string{reconciliationrule.ReconciliationRuleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.RemovedReconciliationRuleTypeIDs(); len(nodes) > 0 && !rru.mutation.ReconciliationRuleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleTypeTable,
			Columns: []string{reconciliationrule.ReconciliationRuleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.ReconciliationRuleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleTypeTable,
			Columns: []string{reconciliationrule.ReconciliationRuleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.ReconciliationRuleSpecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleSpecificationTable,
			Columns: []string{reconciliationrule.ReconciliationRuleSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.RemovedReconciliationRuleSpecificationIDs(); len(nodes) > 0 && !rru.mutation.ReconciliationRuleSpecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleSpecificationTable,
			Columns: []string{reconciliationrule.ReconciliationRuleSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.ReconciliationRuleSpecificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleSpecificationTable,
			Columns: []string{reconciliationrule.ReconciliationRuleSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reconciliationrule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ReconciliationRuleUpdateOne is the builder for updating a single ReconciliationRule entity.
type ReconciliationRuleUpdateOne struct {
	config
	hooks    []Hook
	mutation *ReconciliationRuleMutation
}

// SetName sets the name field.
func (rruo *ReconciliationRuleUpdateOne) SetName(s string) *ReconciliationRuleUpdateOne {
	rruo.mutation.SetName(s)
	return rruo
}

// AddReconciliationRuleTypeIDs adds the reconciliation_rule_type edge to ResourceType by ids.
func (rruo *ReconciliationRuleUpdateOne) AddReconciliationRuleTypeIDs(ids ...int) *ReconciliationRuleUpdateOne {
	rruo.mutation.AddReconciliationRuleTypeIDs(ids...)
	return rruo
}

// AddReconciliationRuleType adds the reconciliation_rule_type edges to ResourceType.
func (rruo *ReconciliationRuleUpdateOne) AddReconciliationRuleType(r ...*ResourceType) *ReconciliationRuleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rruo.AddReconciliationRuleTypeIDs(ids...)
}

// AddReconciliationRuleSpecificationIDs adds the reconciliation_rule_specification edge to ResourceSpecification by ids.
func (rruo *ReconciliationRuleUpdateOne) AddReconciliationRuleSpecificationIDs(ids ...int) *ReconciliationRuleUpdateOne {
	rruo.mutation.AddReconciliationRuleSpecificationIDs(ids...)
	return rruo
}

// AddReconciliationRuleSpecification adds the reconciliation_rule_specification edges to ResourceSpecification.
func (rruo *ReconciliationRuleUpdateOne) AddReconciliationRuleSpecification(r ...*ResourceSpecification) *ReconciliationRuleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rruo.AddReconciliationRuleSpecificationIDs(ids...)
}

// Mutation returns the ReconciliationRuleMutation object of the builder.
func (rruo *ReconciliationRuleUpdateOne) Mutation() *ReconciliationRuleMutation {
	return rruo.mutation
}

// ClearReconciliationRuleType clears all "reconciliation_rule_type" edges to type ResourceType.
func (rruo *ReconciliationRuleUpdateOne) ClearReconciliationRuleType() *ReconciliationRuleUpdateOne {
	rruo.mutation.ClearReconciliationRuleType()
	return rruo
}

// RemoveReconciliationRuleTypeIDs removes the reconciliation_rule_type edge to ResourceType by ids.
func (rruo *ReconciliationRuleUpdateOne) RemoveReconciliationRuleTypeIDs(ids ...int) *ReconciliationRuleUpdateOne {
	rruo.mutation.RemoveReconciliationRuleTypeIDs(ids...)
	return rruo
}

// RemoveReconciliationRuleType removes reconciliation_rule_type edges to ResourceType.
func (rruo *ReconciliationRuleUpdateOne) RemoveReconciliationRuleType(r ...*ResourceType) *ReconciliationRuleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rruo.RemoveReconciliationRuleTypeIDs(ids...)
}

// ClearReconciliationRuleSpecification clears all "reconciliation_rule_specification" edges to type ResourceSpecification.
func (rruo *ReconciliationRuleUpdateOne) ClearReconciliationRuleSpecification() *ReconciliationRuleUpdateOne {
	rruo.mutation.ClearReconciliationRuleSpecification()
	return rruo
}

// RemoveReconciliationRuleSpecificationIDs removes the reconciliation_rule_specification edge to ResourceSpecification by ids.
func (rruo *ReconciliationRuleUpdateOne) RemoveReconciliationRuleSpecificationIDs(ids ...int) *ReconciliationRuleUpdateOne {
	rruo.mutation.RemoveReconciliationRuleSpecificationIDs(ids...)
	return rruo
}

// RemoveReconciliationRuleSpecification removes reconciliation_rule_specification edges to ResourceSpecification.
func (rruo *ReconciliationRuleUpdateOne) RemoveReconciliationRuleSpecification(r ...*ResourceSpecification) *ReconciliationRuleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rruo.RemoveReconciliationRuleSpecificationIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (rruo *ReconciliationRuleUpdateOne) Save(ctx context.Context) (*ReconciliationRule, error) {
	var (
		err  error
		node *ReconciliationRule
	)
	rruo.defaults()
	if len(rruo.hooks) == 0 {
		if err = rruo.check(); err != nil {
			return nil, err
		}
		node, err = rruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReconciliationRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rruo.check(); err != nil {
				return nil, err
			}
			rruo.mutation = mutation
			node, err = rruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rruo.hooks) - 1; i >= 0; i-- {
			mut = rruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *ReconciliationRuleUpdateOne) SaveX(ctx context.Context) *ReconciliationRule {
	node, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rruo *ReconciliationRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *ReconciliationRuleUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rruo *ReconciliationRuleUpdateOne) defaults() {
	if _, ok := rruo.mutation.UpdateTime(); !ok {
		v := reconciliationrule.UpdateDefaultUpdateTime()
		rruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rruo *ReconciliationRuleUpdateOne) check() error {
	if v, ok := rruo.mutation.Name(); ok {
		if err := reconciliationrule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rruo *ReconciliationRuleUpdateOne) sqlSave(ctx context.Context) (_node *ReconciliationRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reconciliationrule.Table,
			Columns: reconciliationrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reconciliationrule.FieldID,
			},
		},
	}
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReconciliationRule.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reconciliationrule.FieldUpdateTime,
		})
	}
	if value, ok := rruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reconciliationrule.FieldName,
		})
	}
	if rruo.mutation.ReconciliationRuleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleTypeTable,
			Columns: []string{reconciliationrule.ReconciliationRuleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.RemovedReconciliationRuleTypeIDs(); len(nodes) > 0 && !rruo.mutation.ReconciliationRuleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleTypeTable,
			Columns: []string{reconciliationrule.ReconciliationRuleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.ReconciliationRuleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleTypeTable,
			Columns: []string{reconciliationrule.ReconciliationRuleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.ReconciliationRuleSpecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleSpecificationTable,
			Columns: []string{reconciliationrule.ReconciliationRuleSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.RemovedReconciliationRuleSpecificationIDs(); len(nodes) > 0 && !rruo.mutation.ReconciliationRuleSpecificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleSpecificationTable,
			Columns: []string{reconciliationrule.ReconciliationRuleSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.ReconciliationRuleSpecificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reconciliationrule.ReconciliationRuleSpecificationTable,
			Columns: []string{reconciliationrule.ReconciliationRuleSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReconciliationRule{config: rruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reconciliationrule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
