// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/cost"
	"github.com/facebookincubator/symphony/pkg/ent/uplitem"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
)

// CostCreate is the builder for creating a Cost entity.
type CostCreate struct {
	config
	mutation *CostMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (cc *CostCreate) SetCreateTime(t time.Time) *CostCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (cc *CostCreate) SetNillableCreateTime(t *time.Time) *CostCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the update_time field.
func (cc *CostCreate) SetUpdateTime(t time.Time) *CostCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (cc *CostCreate) SetNillableUpdateTime(t *time.Time) *CostCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetItem sets the item field.
func (cc *CostCreate) SetItem(s string) *CostCreate {
	cc.mutation.SetItem(s)
	return cc
}

// SetUnit sets the unit field.
func (cc *CostCreate) SetUnit(f float64) *CostCreate {
	cc.mutation.SetUnit(f)
	return cc
}

// SetPrice sets the price field.
func (cc *CostCreate) SetPrice(f float64) *CostCreate {
	cc.mutation.SetPrice(f)
	return cc
}

// SetQuantity sets the quantity field.
func (cc *CostCreate) SetQuantity(i int) *CostCreate {
	cc.mutation.SetQuantity(i)
	return cc
}

// SetTotal sets the total field.
func (cc *CostCreate) SetTotal(f float64) *CostCreate {
	cc.mutation.SetTotal(f)
	return cc
}

// SetUplitemID sets the uplitem edge to UplItem by id.
func (cc *CostCreate) SetUplitemID(id int) *CostCreate {
	cc.mutation.SetUplitemID(id)
	return cc
}

// SetNillableUplitemID sets the uplitem edge to UplItem by id if the given value is not nil.
func (cc *CostCreate) SetNillableUplitemID(id *int) *CostCreate {
	if id != nil {
		cc = cc.SetUplitemID(*id)
	}
	return cc
}

// SetUplitem sets the uplitem edge to UplItem.
func (cc *CostCreate) SetUplitem(u *UplItem) *CostCreate {
	return cc.SetUplitemID(u.ID)
}

// SetWorkorderID sets the workorder edge to WorkOrder by id.
func (cc *CostCreate) SetWorkorderID(id int) *CostCreate {
	cc.mutation.SetWorkorderID(id)
	return cc
}

// SetNillableWorkorderID sets the workorder edge to WorkOrder by id if the given value is not nil.
func (cc *CostCreate) SetNillableWorkorderID(id *int) *CostCreate {
	if id != nil {
		cc = cc.SetWorkorderID(*id)
	}
	return cc
}

// SetWorkorder sets the workorder edge to WorkOrder.
func (cc *CostCreate) SetWorkorder(w *WorkOrder) *CostCreate {
	return cc.SetWorkorderID(w.ID)
}

// Mutation returns the CostMutation object of the builder.
func (cc *CostCreate) Mutation() *CostMutation {
	return cc.mutation
}

// Save creates the Cost in the database.
func (cc *CostCreate) Save(ctx context.Context) (*Cost, error) {
	var (
		err  error
		node *Cost
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CostCreate) SaveX(ctx context.Context) *Cost {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cc *CostCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := cost.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := cost.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CostCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := cc.mutation.Item(); !ok {
		return &ValidationError{Name: "item", err: errors.New("ent: missing required field \"item\"")}
	}
	if _, ok := cc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New("ent: missing required field \"unit\"")}
	}
	if _, ok := cc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New("ent: missing required field \"price\"")}
	}
	if _, ok := cc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New("ent: missing required field \"quantity\"")}
	}
	if _, ok := cc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New("ent: missing required field \"total\"")}
	}
	return nil
}

func (cc *CostCreate) sqlSave(ctx context.Context) (*Cost, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CostCreate) createSpec() (*Cost, *sqlgraph.CreateSpec) {
	var (
		_node = &Cost{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cost.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cost.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cost.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cost.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Item(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cost.FieldItem,
		})
		_node.Item = value
	}
	if value, ok := cc.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := cc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := cc.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cost.FieldQuantity,
		})
		_node.Quantity = value
	}
	if value, ok := cc.mutation.Total(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cost.FieldTotal,
		})
		_node.Total = value
	}
	if nodes := cc.mutation.UplitemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.UplitemTable,
			Columns: []string{cost.UplitemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uplitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.WorkorderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cost.WorkorderTable,
			Columns: []string{cost.WorkorderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CostCreateBulk is the builder for creating a bulk of Cost entities.
type CostCreateBulk struct {
	config
	builders []*CostCreate
}

// Save creates the Cost entities in the database.
func (ccb *CostCreateBulk) Save(ctx context.Context) ([]*Cost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cost, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ccb *CostCreateBulk) SaveX(ctx context.Context) []*Cost {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
