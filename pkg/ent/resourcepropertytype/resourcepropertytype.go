// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package resourcepropertytype

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/facebook/ent"
)

const (
	// Label holds the string label denoting the resourcepropertytype type in the database.
	Label = "resource_property_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldIntVal holds the string denoting the int_val field in the database.
	FieldIntVal = "int_val"
	// FieldBoolVal holds the string denoting the bool_val field in the database.
	FieldBoolVal = "bool_val"
	// FieldFloatVal holds the string denoting the float_val field in the database.
	FieldFloatVal = "float_val"
	// FieldLatitudeVal holds the string denoting the latitude_val field in the database.
	FieldLatitudeVal = "latitude_val"
	// FieldLongitudeVal holds the string denoting the longitude_val field in the database.
	FieldLongitudeVal = "longitude_val"
	// FieldStringVal holds the string denoting the string_val field in the database.
	FieldStringVal = "string_val"
	// FieldRangeFromVal holds the string denoting the range_from_val field in the database.
	FieldRangeFromVal = "range_from_val"
	// FieldRangeToVal holds the string denoting the range_to_val field in the database.
	FieldRangeToVal = "range_to_val"
	// FieldIsInstanceProperty holds the string denoting the is_instance_property field in the database.
	FieldIsInstanceProperty = "is_instance_property"
	// FieldEditable holds the string denoting the editable field in the database.
	FieldEditable = "editable"
	// FieldMandatory holds the string denoting the mandatory field in the database.
	FieldMandatory = "mandatory"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldListable holds the string denoting the listable field in the database.
	FieldListable = "listable"
	// FieldNodeType holds the string denoting the nodetype field in the database.
	FieldNodeType = "node_type"

	// EdgeResourceSpecification holds the string denoting the resourcespecification edge name in mutations.
	EdgeResourceSpecification = "resourceSpecification"
	// EdgePropertyCategory holds the string denoting the property_category edge name in mutations.
	EdgePropertyCategory = "property_category"

	// Table holds the table name of the resourcepropertytype in the database.
	Table = "resource_property_types"
	// ResourceSpecificationTable is the table the holds the resourceSpecification relation/edge.
	ResourceSpecificationTable = "resource_property_types"
	// ResourceSpecificationInverseTable is the table name for the ResourceSpecification entity.
	// It exists in this package in order to avoid circular dependency with the "resourcespecification" package.
	ResourceSpecificationInverseTable = "resource_specifications"
	// ResourceSpecificationColumn is the table column denoting the resourceSpecification relation/edge.
	ResourceSpecificationColumn = "resource_specification_resource_property_type"
	// PropertyCategoryTable is the table the holds the property_category relation/edge.
	PropertyCategoryTable = "resource_property_types"
	// PropertyCategoryInverseTable is the table name for the PropertyCategory entity.
	// It exists in this package in order to avoid circular dependency with the "propertycategory" package.
	PropertyCategoryInverseTable = "property_categories"
	// PropertyCategoryColumn is the table column denoting the property_category relation/edge.
	PropertyCategoryColumn = "property_category_resource_properties_type"
)

// Columns holds all SQL columns for resourcepropertytype fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldType,
	FieldName,
	FieldExternalID,
	FieldIndex,
	FieldCategory,
	FieldIntVal,
	FieldBoolVal,
	FieldFloatVal,
	FieldLatitudeVal,
	FieldLongitudeVal,
	FieldStringVal,
	FieldRangeFromVal,
	FieldRangeToVal,
	FieldIsInstanceProperty,
	FieldEditable,
	FieldMandatory,
	FieldDeleted,
	FieldListable,
	FieldNodeType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the ResourcePropertyType type.
var ForeignKeys = []string{
	"property_category_resource_properties_type",
	"resource_specification_resource_property_type",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/facebookincubator/symphony/pkg/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the create_time field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the update_time field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultIsInstanceProperty holds the default value on creation for the is_instance_property field.
	DefaultIsInstanceProperty bool
	// DefaultEditable holds the default value on creation for the editable field.
	DefaultEditable bool
	// DefaultMandatory holds the default value on creation for the mandatory field.
	DefaultMandatory bool
	// DefaultDeleted holds the default value on creation for the deleted field.
	DefaultDeleted bool
	// DefaultListable holds the default value on creation for the listable field.
	DefaultListable bool
)

// Type defines the type for the type enum field.
type Type string

// Type values.
const (
	TypeString        Type = "string"
	TypeInt           Type = "int"
	TypeBool          Type = "bool"
	TypeFloat         Type = "float"
	TypeDate          Type = "date"
	TypeEnum          Type = "enum"
	TypeRange         Type = "range"
	TypeEmail         Type = "email"
	TypeGpsLocation   Type = "gps_location"
	TypeDatetimeLocal Type = "datetime_local"
	TypeNode          Type = "node"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeString, TypeInt, TypeBool, TypeFloat, TypeDate, TypeEnum, TypeRange, TypeEmail, TypeGpsLocation, TypeDatetimeLocal, TypeNode:
		return nil
	default:
		return fmt.Errorf("resourcepropertytype: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
