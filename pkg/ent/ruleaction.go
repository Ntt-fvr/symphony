// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/reconciliationrule"
	"github.com/facebookincubator/symphony/pkg/ent/ruleaction"
	"github.com/facebookincubator/symphony/pkg/ent/ruleactiontemplate"
)

// RuleAction is the model entity for the RuleAction schema.
type RuleAction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation ruleaction.Operation `json:"operation,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RuleActionQuery when eager-loading is set.
	Edges                                                 RuleActionEdges `json:"edges"`
	reconciliation_rule_reconciliation_rule_rule_action   *int
	rule_action_template_rule_action_template_rule_action *int
}

// RuleActionEdges holds the relations/edges for other nodes in the graph.
type RuleActionEdges struct {
	// Reconciliationrule holds the value of the reconciliationrule edge.
	Reconciliationrule *ReconciliationRule
	// Ruleactiontemplate holds the value of the ruleactiontemplate edge.
	Ruleactiontemplate *RuleActionTemplate
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ReconciliationruleOrErr returns the Reconciliationrule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RuleActionEdges) ReconciliationruleOrErr() (*ReconciliationRule, error) {
	if e.loadedTypes[0] {
		if e.Reconciliationrule == nil {
			// The edge reconciliationrule was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: reconciliationrule.Label}
		}
		return e.Reconciliationrule, nil
	}
	return nil, &NotLoadedError{edge: "reconciliationrule"}
}

// RuleactiontemplateOrErr returns the Ruleactiontemplate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RuleActionEdges) RuleactiontemplateOrErr() (*RuleActionTemplate, error) {
	if e.loadedTypes[1] {
		if e.Ruleactiontemplate == nil {
			// The edge ruleactiontemplate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ruleactiontemplate.Label}
		}
		return e.Ruleactiontemplate, nil
	}
	return nil, &NotLoadedError{edge: "ruleactiontemplate"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RuleAction) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // operation
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*RuleAction) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // reconciliation_rule_reconciliation_rule_rule_action
		&sql.NullInt64{}, // rule_action_template_rule_action_template_rule_action
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RuleAction fields.
func (ra *RuleAction) assignValues(values ...interface{}) error {
	if m, n := len(values), len(ruleaction.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ra.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		ra.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		ra.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field operation", values[2])
	} else if value.Valid {
		ra.Operation = ruleaction.Operation(value.String)
	}
	values = values[3:]
	if len(values) == len(ruleaction.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field reconciliation_rule_reconciliation_rule_rule_action", value)
		} else if value.Valid {
			ra.reconciliation_rule_reconciliation_rule_rule_action = new(int)
			*ra.reconciliation_rule_reconciliation_rule_rule_action = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field rule_action_template_rule_action_template_rule_action", value)
		} else if value.Valid {
			ra.rule_action_template_rule_action_template_rule_action = new(int)
			*ra.rule_action_template_rule_action_template_rule_action = int(value.Int64)
		}
	}
	return nil
}

// QueryReconciliationrule queries the reconciliationrule edge of the RuleAction.
func (ra *RuleAction) QueryReconciliationrule() *ReconciliationRuleQuery {
	return (&RuleActionClient{config: ra.config}).QueryReconciliationrule(ra)
}

// QueryRuleactiontemplate queries the ruleactiontemplate edge of the RuleAction.
func (ra *RuleAction) QueryRuleactiontemplate() *RuleActionTemplateQuery {
	return (&RuleActionClient{config: ra.config}).QueryRuleactiontemplate(ra)
}

// Update returns a builder for updating this RuleAction.
// Note that, you need to call RuleAction.Unwrap() before calling this method, if this RuleAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (ra *RuleAction) Update() *RuleActionUpdateOne {
	return (&RuleActionClient{config: ra.config}).UpdateOne(ra)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ra *RuleAction) Unwrap() *RuleAction {
	tx, ok := ra.config.driver.(*txDriver)
	if !ok {
		panic("ent: RuleAction is not a transactional entity")
	}
	ra.config.driver = tx.drv
	return ra
}

// String implements the fmt.Stringer.
func (ra *RuleAction) String() string {
	var builder strings.Builder
	builder.WriteString("RuleAction(")
	builder.WriteString(fmt.Sprintf("id=%v", ra.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ra.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ra.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", operation=")
	builder.WriteString(fmt.Sprintf("%v", ra.Operation))
	builder.WriteByte(')')
	return builder.String()
}

// RuleActions is a parsable slice of RuleAction.
type RuleActions []*RuleAction

func (ra RuleActions) config(cfg config) {
	for _i := range ra {
		ra[_i].config = cfg
	}
}
