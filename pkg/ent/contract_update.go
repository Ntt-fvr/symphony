// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/contract"
	"github.com/facebookincubator/symphony/pkg/ent/organization"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/upl"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
)

// ContractUpdate is the builder for updating Contract entities.
type ContractUpdate struct {
	config
	hooks    []Hook
	mutation *ContractMutation
}

// Where adds a new predicate for the builder.
func (cu *ContractUpdate) Where(ps ...predicate.Contract) *ContractUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetExternalID sets the external_id field.
func (cu *ContractUpdate) SetExternalID(s string) *ContractUpdate {
	cu.mutation.SetExternalID(s)
	return cu
}

// SetName sets the name field.
func (cu *ContractUpdate) SetName(s string) *ContractUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetCategory sets the category field.
func (cu *ContractUpdate) SetCategory(s string) *ContractUpdate {
	cu.mutation.SetCategory(s)
	return cu
}

// SetEffectiveDate sets the effective_date field.
func (cu *ContractUpdate) SetEffectiveDate(t time.Time) *ContractUpdate {
	cu.mutation.SetEffectiveDate(t)
	return cu
}

// SetExpirationDate sets the expiration_date field.
func (cu *ContractUpdate) SetExpirationDate(t time.Time) *ContractUpdate {
	cu.mutation.SetExpirationDate(t)
	return cu
}

// SetDescription sets the description field.
func (cu *ContractUpdate) SetDescription(s string) *ContractUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetStatus sets the status field.
func (cu *ContractUpdate) SetStatus(c contract.Status) *ContractUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetOrganizationID sets the organization edge to Organization by id.
func (cu *ContractUpdate) SetOrganizationID(id int) *ContractUpdate {
	cu.mutation.SetOrganizationID(id)
	return cu
}

// SetNillableOrganizationID sets the organization edge to Organization by id if the given value is not nil.
func (cu *ContractUpdate) SetNillableOrganizationID(id *int) *ContractUpdate {
	if id != nil {
		cu = cu.SetOrganizationID(*id)
	}
	return cu
}

// SetOrganization sets the organization edge to Organization.
func (cu *ContractUpdate) SetOrganization(o *Organization) *ContractUpdate {
	return cu.SetOrganizationID(o.ID)
}

// AddUplContractIDs adds the upl_contract edge to Upl by ids.
func (cu *ContractUpdate) AddUplContractIDs(ids ...int) *ContractUpdate {
	cu.mutation.AddUplContractIDs(ids...)
	return cu
}

// AddUplContract adds the upl_contract edges to Upl.
func (cu *ContractUpdate) AddUplContract(u ...*Upl) *ContractUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUplContractIDs(ids...)
}

// AddWorkOrderContractIDs adds the work_order_contract edge to WorkOrder by ids.
func (cu *ContractUpdate) AddWorkOrderContractIDs(ids ...int) *ContractUpdate {
	cu.mutation.AddWorkOrderContractIDs(ids...)
	return cu
}

// AddWorkOrderContract adds the work_order_contract edges to WorkOrder.
func (cu *ContractUpdate) AddWorkOrderContract(w ...*WorkOrder) *ContractUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.AddWorkOrderContractIDs(ids...)
}

// Mutation returns the ContractMutation object of the builder.
func (cu *ContractUpdate) Mutation() *ContractMutation {
	return cu.mutation
}

// ClearOrganization clears the "organization" edge to type Organization.
func (cu *ContractUpdate) ClearOrganization() *ContractUpdate {
	cu.mutation.ClearOrganization()
	return cu
}

// ClearUplContract clears all "upl_contract" edges to type Upl.
func (cu *ContractUpdate) ClearUplContract() *ContractUpdate {
	cu.mutation.ClearUplContract()
	return cu
}

// RemoveUplContractIDs removes the upl_contract edge to Upl by ids.
func (cu *ContractUpdate) RemoveUplContractIDs(ids ...int) *ContractUpdate {
	cu.mutation.RemoveUplContractIDs(ids...)
	return cu
}

// RemoveUplContract removes upl_contract edges to Upl.
func (cu *ContractUpdate) RemoveUplContract(u ...*Upl) *ContractUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUplContractIDs(ids...)
}

// ClearWorkOrderContract clears all "work_order_contract" edges to type WorkOrder.
func (cu *ContractUpdate) ClearWorkOrderContract() *ContractUpdate {
	cu.mutation.ClearWorkOrderContract()
	return cu
}

// RemoveWorkOrderContractIDs removes the work_order_contract edge to WorkOrder by ids.
func (cu *ContractUpdate) RemoveWorkOrderContractIDs(ids ...int) *ContractUpdate {
	cu.mutation.RemoveWorkOrderContractIDs(ids...)
	return cu
}

// RemoveWorkOrderContract removes work_order_contract edges to WorkOrder.
func (cu *ContractUpdate) RemoveWorkOrderContract(w ...*WorkOrder) *ContractUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.RemoveWorkOrderContractIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContractUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContractUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContractUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContractUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContractUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := contract.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContractUpdate) check() error {
	if v, ok := cu.mutation.ExternalID(); ok {
		if err := contract.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf("ent: validator failed for field \"external_id\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Name(); ok {
		if err := contract.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Category(); ok {
		if err := contract.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf("ent: validator failed for field \"category\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Description(); ok {
		if err := contract.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := contract.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (cu *ContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contract.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldExternalID,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldName,
		})
	}
	if value, ok := cu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldCategory,
		})
	}
	if value, ok := cu.mutation.EffectiveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldEffectiveDate,
		})
	}
	if value, ok := cu.mutation.ExpirationDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldExpirationDate,
		})
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldDescription,
		})
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: contract.FieldStatus,
		})
	}
	if cu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.OrganizationTable,
			Columns: []string{contract.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.OrganizationTable,
			Columns: []string{contract.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UplContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.UplContractTable,
			Columns: []string{contract.UplContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: upl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUplContractIDs(); len(nodes) > 0 && !cu.mutation.UplContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.UplContractTable,
			Columns: []string{contract.UplContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: upl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UplContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.UplContractTable,
			Columns: []string{contract.UplContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: upl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WorkOrderContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.WorkOrderContractTable,
			Columns: []string{contract.WorkOrderContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedWorkOrderContractIDs(); len(nodes) > 0 && !cu.mutation.WorkOrderContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.WorkOrderContractTable,
			Columns: []string{contract.WorkOrderContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WorkOrderContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.WorkOrderContractTable,
			Columns: []string{contract.WorkOrderContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ContractUpdateOne is the builder for updating a single Contract entity.
type ContractUpdateOne struct {
	config
	hooks    []Hook
	mutation *ContractMutation
}

// SetExternalID sets the external_id field.
func (cuo *ContractUpdateOne) SetExternalID(s string) *ContractUpdateOne {
	cuo.mutation.SetExternalID(s)
	return cuo
}

// SetName sets the name field.
func (cuo *ContractUpdateOne) SetName(s string) *ContractUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetCategory sets the category field.
func (cuo *ContractUpdateOne) SetCategory(s string) *ContractUpdateOne {
	cuo.mutation.SetCategory(s)
	return cuo
}

// SetEffectiveDate sets the effective_date field.
func (cuo *ContractUpdateOne) SetEffectiveDate(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetEffectiveDate(t)
	return cuo
}

// SetExpirationDate sets the expiration_date field.
func (cuo *ContractUpdateOne) SetExpirationDate(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetExpirationDate(t)
	return cuo
}

// SetDescription sets the description field.
func (cuo *ContractUpdateOne) SetDescription(s string) *ContractUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetStatus sets the status field.
func (cuo *ContractUpdateOne) SetStatus(c contract.Status) *ContractUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetOrganizationID sets the organization edge to Organization by id.
func (cuo *ContractUpdateOne) SetOrganizationID(id int) *ContractUpdateOne {
	cuo.mutation.SetOrganizationID(id)
	return cuo
}

// SetNillableOrganizationID sets the organization edge to Organization by id if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableOrganizationID(id *int) *ContractUpdateOne {
	if id != nil {
		cuo = cuo.SetOrganizationID(*id)
	}
	return cuo
}

// SetOrganization sets the organization edge to Organization.
func (cuo *ContractUpdateOne) SetOrganization(o *Organization) *ContractUpdateOne {
	return cuo.SetOrganizationID(o.ID)
}

// AddUplContractIDs adds the upl_contract edge to Upl by ids.
func (cuo *ContractUpdateOne) AddUplContractIDs(ids ...int) *ContractUpdateOne {
	cuo.mutation.AddUplContractIDs(ids...)
	return cuo
}

// AddUplContract adds the upl_contract edges to Upl.
func (cuo *ContractUpdateOne) AddUplContract(u ...*Upl) *ContractUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUplContractIDs(ids...)
}

// AddWorkOrderContractIDs adds the work_order_contract edge to WorkOrder by ids.
func (cuo *ContractUpdateOne) AddWorkOrderContractIDs(ids ...int) *ContractUpdateOne {
	cuo.mutation.AddWorkOrderContractIDs(ids...)
	return cuo
}

// AddWorkOrderContract adds the work_order_contract edges to WorkOrder.
func (cuo *ContractUpdateOne) AddWorkOrderContract(w ...*WorkOrder) *ContractUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.AddWorkOrderContractIDs(ids...)
}

// Mutation returns the ContractMutation object of the builder.
func (cuo *ContractUpdateOne) Mutation() *ContractMutation {
	return cuo.mutation
}

// ClearOrganization clears the "organization" edge to type Organization.
func (cuo *ContractUpdateOne) ClearOrganization() *ContractUpdateOne {
	cuo.mutation.ClearOrganization()
	return cuo
}

// ClearUplContract clears all "upl_contract" edges to type Upl.
func (cuo *ContractUpdateOne) ClearUplContract() *ContractUpdateOne {
	cuo.mutation.ClearUplContract()
	return cuo
}

// RemoveUplContractIDs removes the upl_contract edge to Upl by ids.
func (cuo *ContractUpdateOne) RemoveUplContractIDs(ids ...int) *ContractUpdateOne {
	cuo.mutation.RemoveUplContractIDs(ids...)
	return cuo
}

// RemoveUplContract removes upl_contract edges to Upl.
func (cuo *ContractUpdateOne) RemoveUplContract(u ...*Upl) *ContractUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUplContractIDs(ids...)
}

// ClearWorkOrderContract clears all "work_order_contract" edges to type WorkOrder.
func (cuo *ContractUpdateOne) ClearWorkOrderContract() *ContractUpdateOne {
	cuo.mutation.ClearWorkOrderContract()
	return cuo
}

// RemoveWorkOrderContractIDs removes the work_order_contract edge to WorkOrder by ids.
func (cuo *ContractUpdateOne) RemoveWorkOrderContractIDs(ids ...int) *ContractUpdateOne {
	cuo.mutation.RemoveWorkOrderContractIDs(ids...)
	return cuo
}

// RemoveWorkOrderContract removes work_order_contract edges to WorkOrder.
func (cuo *ContractUpdateOne) RemoveWorkOrderContract(w ...*WorkOrder) *ContractUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.RemoveWorkOrderContractIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *ContractUpdateOne) Save(ctx context.Context) (*Contract, error) {
	var (
		err  error
		node *Contract
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContractUpdateOne) SaveX(ctx context.Context) *Contract {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContractUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContractUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContractUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := contract.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContractUpdateOne) check() error {
	if v, ok := cuo.mutation.ExternalID(); ok {
		if err := contract.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf("ent: validator failed for field \"external_id\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Name(); ok {
		if err := contract.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Category(); ok {
		if err := contract.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf("ent: validator failed for field \"category\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Description(); ok {
		if err := contract.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := contract.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (cuo *ContractUpdateOne) sqlSave(ctx context.Context) (_node *Contract, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contract.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Contract.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldExternalID,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldName,
		})
	}
	if value, ok := cuo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldCategory,
		})
	}
	if value, ok := cuo.mutation.EffectiveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldEffectiveDate,
		})
	}
	if value, ok := cuo.mutation.ExpirationDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldExpirationDate,
		})
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldDescription,
		})
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: contract.FieldStatus,
		})
	}
	if cuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.OrganizationTable,
			Columns: []string{contract.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.OrganizationTable,
			Columns: []string{contract.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UplContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.UplContractTable,
			Columns: []string{contract.UplContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: upl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUplContractIDs(); len(nodes) > 0 && !cuo.mutation.UplContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.UplContractTable,
			Columns: []string{contract.UplContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: upl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UplContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.UplContractTable,
			Columns: []string{contract.UplContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: upl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WorkOrderContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.WorkOrderContractTable,
			Columns: []string{contract.WorkOrderContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedWorkOrderContractIDs(); len(nodes) > 0 && !cuo.mutation.WorkOrderContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.WorkOrderContractTable,
			Columns: []string{contract.WorkOrderContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WorkOrderContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.WorkOrderContractTable,
			Columns: []string{contract.WorkOrderContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Contract{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
