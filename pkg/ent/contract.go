// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/contract"
	"github.com/facebookincubator/symphony/pkg/ent/organization"
)

// Contract is the model entity for the Contract schema.
type Contract struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// EffectiveDate holds the value of the "effective_date" field.
	EffectiveDate time.Time `json:"effective_date,omitempty"`
	// ExpirationDate holds the value of the "expiration_date" field.
	ExpirationDate time.Time `json:"expiration_date,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Status holds the value of the "status" field.
	Status contract.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContractQuery when eager-loading is set.
	Edges                              ContractEdges `json:"edges"`
	organization_contract_organization *int
}

// ContractEdges holds the relations/edges for other nodes in the graph.
type ContractEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization
	// UplContract holds the value of the upl_contract edge.
	UplContract []*Upl
	// WorkOrderContract holds the value of the work_order_contract edge.
	WorkOrderContract []*WorkOrder
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContractEdges) OrganizationOrErr() (*Organization, error) {
	if e.loadedTypes[0] {
		if e.Organization == nil {
			// The edge organization was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// UplContractOrErr returns the UplContract value or an error if the edge
// was not loaded in eager-loading.
func (e ContractEdges) UplContractOrErr() ([]*Upl, error) {
	if e.loadedTypes[1] {
		return e.UplContract, nil
	}
	return nil, &NotLoadedError{edge: "upl_contract"}
}

// WorkOrderContractOrErr returns the WorkOrderContract value or an error if the edge
// was not loaded in eager-loading.
func (e ContractEdges) WorkOrderContractOrErr() ([]*WorkOrder, error) {
	if e.loadedTypes[2] {
		return e.WorkOrderContract, nil
	}
	return nil, &NotLoadedError{edge: "work_order_contract"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Contract) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // external_id
		&sql.NullString{}, // name
		&sql.NullString{}, // category
		&sql.NullTime{},   // effective_date
		&sql.NullTime{},   // expiration_date
		&sql.NullString{}, // description
		&sql.NullString{}, // status
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Contract) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // organization_contract_organization
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Contract fields.
func (c *Contract) assignValues(values ...interface{}) error {
	if m, n := len(values), len(contract.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		c.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		c.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field external_id", values[2])
	} else if value.Valid {
		c.ExternalID = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[3])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field category", values[4])
	} else if value.Valid {
		c.Category = value.String
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field effective_date", values[5])
	} else if value.Valid {
		c.EffectiveDate = value.Time
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field expiration_date", values[6])
	} else if value.Valid {
		c.ExpirationDate = value.Time
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[7])
	} else if value.Valid {
		c.Description = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[8])
	} else if value.Valid {
		c.Status = contract.Status(value.String)
	}
	values = values[9:]
	if len(values) == len(contract.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field organization_contract_organization", value)
		} else if value.Valid {
			c.organization_contract_organization = new(int)
			*c.organization_contract_organization = int(value.Int64)
		}
	}
	return nil
}

// QueryOrganization queries the organization edge of the Contract.
func (c *Contract) QueryOrganization() *OrganizationQuery {
	return (&ContractClient{config: c.config}).QueryOrganization(c)
}

// QueryUplContract queries the upl_contract edge of the Contract.
func (c *Contract) QueryUplContract() *UplQuery {
	return (&ContractClient{config: c.config}).QueryUplContract(c)
}

// QueryWorkOrderContract queries the work_order_contract edge of the Contract.
func (c *Contract) QueryWorkOrderContract() *WorkOrderQuery {
	return (&ContractClient{config: c.config}).QueryWorkOrderContract(c)
}

// Update returns a builder for updating this Contract.
// Note that, you need to call Contract.Unwrap() before calling this method, if this Contract
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Contract) Update() *ContractUpdateOne {
	return (&ContractClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Contract) Unwrap() *Contract {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Contract is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Contract) String() string {
	var builder strings.Builder
	builder.WriteString("Contract(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", external_id=")
	builder.WriteString(c.ExternalID)
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", category=")
	builder.WriteString(c.Category)
	builder.WriteString(", effective_date=")
	builder.WriteString(c.EffectiveDate.Format(time.ANSIC))
	builder.WriteString(", expiration_date=")
	builder.WriteString(c.ExpirationDate.Format(time.ANSIC))
	builder.WriteString(", description=")
	builder.WriteString(c.Description)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Contracts is a parsable slice of Contract.
type Contracts []*Contract

func (c Contracts) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
