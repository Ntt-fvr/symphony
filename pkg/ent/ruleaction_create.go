// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/action"
	"github.com/facebookincubator/symphony/pkg/ent/reconciliationrule"
	"github.com/facebookincubator/symphony/pkg/ent/ruleaction"
	"github.com/facebookincubator/symphony/pkg/ent/ruleactiontemplate"
)

// RuleActionCreate is the builder for creating a RuleAction entity.
type RuleActionCreate struct {
	config
	mutation *RuleActionMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (rac *RuleActionCreate) SetCreateTime(t time.Time) *RuleActionCreate {
	rac.mutation.SetCreateTime(t)
	return rac
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (rac *RuleActionCreate) SetNillableCreateTime(t *time.Time) *RuleActionCreate {
	if t != nil {
		rac.SetCreateTime(*t)
	}
	return rac
}

// SetUpdateTime sets the update_time field.
func (rac *RuleActionCreate) SetUpdateTime(t time.Time) *RuleActionCreate {
	rac.mutation.SetUpdateTime(t)
	return rac
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (rac *RuleActionCreate) SetNillableUpdateTime(t *time.Time) *RuleActionCreate {
	if t != nil {
		rac.SetUpdateTime(*t)
	}
	return rac
}

// SetOperation sets the operation field.
func (rac *RuleActionCreate) SetOperation(r ruleaction.Operation) *RuleActionCreate {
	rac.mutation.SetOperation(r)
	return rac
}

// SetReconciliationruleID sets the reconciliationrule edge to ReconciliationRule by id.
func (rac *RuleActionCreate) SetReconciliationruleID(id int) *RuleActionCreate {
	rac.mutation.SetReconciliationruleID(id)
	return rac
}

// SetNillableReconciliationruleID sets the reconciliationrule edge to ReconciliationRule by id if the given value is not nil.
func (rac *RuleActionCreate) SetNillableReconciliationruleID(id *int) *RuleActionCreate {
	if id != nil {
		rac = rac.SetReconciliationruleID(*id)
	}
	return rac
}

// SetReconciliationrule sets the reconciliationrule edge to ReconciliationRule.
func (rac *RuleActionCreate) SetReconciliationrule(r *ReconciliationRule) *RuleActionCreate {
	return rac.SetReconciliationruleID(r.ID)
}

// SetRuleactiontemplateID sets the ruleactiontemplate edge to RuleActionTemplate by id.
func (rac *RuleActionCreate) SetRuleactiontemplateID(id int) *RuleActionCreate {
	rac.mutation.SetRuleactiontemplateID(id)
	return rac
}

// SetNillableRuleactiontemplateID sets the ruleactiontemplate edge to RuleActionTemplate by id if the given value is not nil.
func (rac *RuleActionCreate) SetNillableRuleactiontemplateID(id *int) *RuleActionCreate {
	if id != nil {
		rac = rac.SetRuleactiontemplateID(*id)
	}
	return rac
}

// SetRuleactiontemplate sets the ruleactiontemplate edge to RuleActionTemplate.
func (rac *RuleActionCreate) SetRuleactiontemplate(r *RuleActionTemplate) *RuleActionCreate {
	return rac.SetRuleactiontemplateID(r.ID)
}

// AddRuleActionIDs adds the rule_action edge to Action by ids.
func (rac *RuleActionCreate) AddRuleActionIDs(ids ...int) *RuleActionCreate {
	rac.mutation.AddRuleActionIDs(ids...)
	return rac
}

// AddRuleAction adds the rule_action edges to Action.
func (rac *RuleActionCreate) AddRuleAction(a ...*Action) *RuleActionCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rac.AddRuleActionIDs(ids...)
}

// Mutation returns the RuleActionMutation object of the builder.
func (rac *RuleActionCreate) Mutation() *RuleActionMutation {
	return rac.mutation
}

// Save creates the RuleAction in the database.
func (rac *RuleActionCreate) Save(ctx context.Context) (*RuleAction, error) {
	var (
		err  error
		node *RuleAction
	)
	rac.defaults()
	if len(rac.hooks) == 0 {
		if err = rac.check(); err != nil {
			return nil, err
		}
		node, err = rac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rac.check(); err != nil {
				return nil, err
			}
			rac.mutation = mutation
			node, err = rac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rac.hooks) - 1; i >= 0; i-- {
			mut = rac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rac *RuleActionCreate) SaveX(ctx context.Context) *RuleAction {
	v, err := rac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rac *RuleActionCreate) defaults() {
	if _, ok := rac.mutation.CreateTime(); !ok {
		v := ruleaction.DefaultCreateTime()
		rac.mutation.SetCreateTime(v)
	}
	if _, ok := rac.mutation.UpdateTime(); !ok {
		v := ruleaction.DefaultUpdateTime()
		rac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rac *RuleActionCreate) check() error {
	if _, ok := rac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := rac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := rac.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New("ent: missing required field \"operation\"")}
	}
	if v, ok := rac.mutation.Operation(); ok {
		if err := ruleaction.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf("ent: validator failed for field \"operation\": %w", err)}
		}
	}
	return nil
}

func (rac *RuleActionCreate) sqlSave(ctx context.Context) (*RuleAction, error) {
	_node, _spec := rac.createSpec()
	if err := sqlgraph.CreateNode(ctx, rac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rac *RuleActionCreate) createSpec() (*RuleAction, *sqlgraph.CreateSpec) {
	var (
		_node = &RuleAction{config: rac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ruleaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ruleaction.FieldID,
			},
		}
	)
	if value, ok := rac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ruleaction.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := rac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ruleaction.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := rac.mutation.Operation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ruleaction.FieldOperation,
		})
		_node.Operation = value
	}
	if nodes := rac.mutation.ReconciliationruleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ruleaction.ReconciliationruleTable,
			Columns: []string{ruleaction.ReconciliationruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reconciliationrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rac.mutation.RuleactiontemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ruleaction.RuleactiontemplateTable,
			Columns: []string{ruleaction.RuleactiontemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruleactiontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rac.mutation.RuleActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ruleaction.RuleActionTable,
			Columns: []string{ruleaction.RuleActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RuleActionCreateBulk is the builder for creating a bulk of RuleAction entities.
type RuleActionCreateBulk struct {
	config
	builders []*RuleActionCreate
}

// Save creates the RuleAction entities in the database.
func (racb *RuleActionCreateBulk) Save(ctx context.Context) ([]*RuleAction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(racb.builders))
	nodes := make([]*RuleAction, len(racb.builders))
	mutators := make([]Mutator, len(racb.builders))
	for i := range racb.builders {
		func(i int, root context.Context) {
			builder := racb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RuleActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, racb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, racb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, racb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (racb *RuleActionCreateBulk) SaveX(ctx context.Context) []*RuleAction {
	v, err := racb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
