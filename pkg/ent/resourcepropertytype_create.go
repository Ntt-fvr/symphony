// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/propertycategory"
	"github.com/facebookincubator/symphony/pkg/ent/resourcepropertytype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcespecification"
)

// ResourcePropertyTypeCreate is the builder for creating a ResourcePropertyType entity.
type ResourcePropertyTypeCreate struct {
	config
	mutation *ResourcePropertyTypeMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (rptc *ResourcePropertyTypeCreate) SetCreateTime(t time.Time) *ResourcePropertyTypeCreate {
	rptc.mutation.SetCreateTime(t)
	return rptc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableCreateTime(t *time.Time) *ResourcePropertyTypeCreate {
	if t != nil {
		rptc.SetCreateTime(*t)
	}
	return rptc
}

// SetUpdateTime sets the update_time field.
func (rptc *ResourcePropertyTypeCreate) SetUpdateTime(t time.Time) *ResourcePropertyTypeCreate {
	rptc.mutation.SetUpdateTime(t)
	return rptc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableUpdateTime(t *time.Time) *ResourcePropertyTypeCreate {
	if t != nil {
		rptc.SetUpdateTime(*t)
	}
	return rptc
}

// SetType sets the type field.
func (rptc *ResourcePropertyTypeCreate) SetType(r resourcepropertytype.Type) *ResourcePropertyTypeCreate {
	rptc.mutation.SetType(r)
	return rptc
}

// SetName sets the name field.
func (rptc *ResourcePropertyTypeCreate) SetName(s string) *ResourcePropertyTypeCreate {
	rptc.mutation.SetName(s)
	return rptc
}

// SetExternalID sets the external_id field.
func (rptc *ResourcePropertyTypeCreate) SetExternalID(s string) *ResourcePropertyTypeCreate {
	rptc.mutation.SetExternalID(s)
	return rptc
}

// SetNillableExternalID sets the external_id field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableExternalID(s *string) *ResourcePropertyTypeCreate {
	if s != nil {
		rptc.SetExternalID(*s)
	}
	return rptc
}

// SetIndex sets the index field.
func (rptc *ResourcePropertyTypeCreate) SetIndex(i int) *ResourcePropertyTypeCreate {
	rptc.mutation.SetIndex(i)
	return rptc
}

// SetNillableIndex sets the index field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableIndex(i *int) *ResourcePropertyTypeCreate {
	if i != nil {
		rptc.SetIndex(*i)
	}
	return rptc
}

// SetCategory sets the category field.
func (rptc *ResourcePropertyTypeCreate) SetCategory(s string) *ResourcePropertyTypeCreate {
	rptc.mutation.SetCategory(s)
	return rptc
}

// SetNillableCategory sets the category field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableCategory(s *string) *ResourcePropertyTypeCreate {
	if s != nil {
		rptc.SetCategory(*s)
	}
	return rptc
}

// SetIntVal sets the int_val field.
func (rptc *ResourcePropertyTypeCreate) SetIntVal(i int) *ResourcePropertyTypeCreate {
	rptc.mutation.SetIntVal(i)
	return rptc
}

// SetNillableIntVal sets the int_val field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableIntVal(i *int) *ResourcePropertyTypeCreate {
	if i != nil {
		rptc.SetIntVal(*i)
	}
	return rptc
}

// SetBoolVal sets the bool_val field.
func (rptc *ResourcePropertyTypeCreate) SetBoolVal(b bool) *ResourcePropertyTypeCreate {
	rptc.mutation.SetBoolVal(b)
	return rptc
}

// SetNillableBoolVal sets the bool_val field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableBoolVal(b *bool) *ResourcePropertyTypeCreate {
	if b != nil {
		rptc.SetBoolVal(*b)
	}
	return rptc
}

// SetFloatVal sets the float_val field.
func (rptc *ResourcePropertyTypeCreate) SetFloatVal(f float64) *ResourcePropertyTypeCreate {
	rptc.mutation.SetFloatVal(f)
	return rptc
}

// SetNillableFloatVal sets the float_val field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableFloatVal(f *float64) *ResourcePropertyTypeCreate {
	if f != nil {
		rptc.SetFloatVal(*f)
	}
	return rptc
}

// SetLatitudeVal sets the latitude_val field.
func (rptc *ResourcePropertyTypeCreate) SetLatitudeVal(f float64) *ResourcePropertyTypeCreate {
	rptc.mutation.SetLatitudeVal(f)
	return rptc
}

// SetNillableLatitudeVal sets the latitude_val field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableLatitudeVal(f *float64) *ResourcePropertyTypeCreate {
	if f != nil {
		rptc.SetLatitudeVal(*f)
	}
	return rptc
}

// SetLongitudeVal sets the longitude_val field.
func (rptc *ResourcePropertyTypeCreate) SetLongitudeVal(f float64) *ResourcePropertyTypeCreate {
	rptc.mutation.SetLongitudeVal(f)
	return rptc
}

// SetNillableLongitudeVal sets the longitude_val field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableLongitudeVal(f *float64) *ResourcePropertyTypeCreate {
	if f != nil {
		rptc.SetLongitudeVal(*f)
	}
	return rptc
}

// SetStringVal sets the string_val field.
func (rptc *ResourcePropertyTypeCreate) SetStringVal(s string) *ResourcePropertyTypeCreate {
	rptc.mutation.SetStringVal(s)
	return rptc
}

// SetNillableStringVal sets the string_val field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableStringVal(s *string) *ResourcePropertyTypeCreate {
	if s != nil {
		rptc.SetStringVal(*s)
	}
	return rptc
}

// SetRangeFromVal sets the range_from_val field.
func (rptc *ResourcePropertyTypeCreate) SetRangeFromVal(f float64) *ResourcePropertyTypeCreate {
	rptc.mutation.SetRangeFromVal(f)
	return rptc
}

// SetNillableRangeFromVal sets the range_from_val field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableRangeFromVal(f *float64) *ResourcePropertyTypeCreate {
	if f != nil {
		rptc.SetRangeFromVal(*f)
	}
	return rptc
}

// SetRangeToVal sets the range_to_val field.
func (rptc *ResourcePropertyTypeCreate) SetRangeToVal(f float64) *ResourcePropertyTypeCreate {
	rptc.mutation.SetRangeToVal(f)
	return rptc
}

// SetNillableRangeToVal sets the range_to_val field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableRangeToVal(f *float64) *ResourcePropertyTypeCreate {
	if f != nil {
		rptc.SetRangeToVal(*f)
	}
	return rptc
}

// SetIsInstanceProperty sets the is_instance_property field.
func (rptc *ResourcePropertyTypeCreate) SetIsInstanceProperty(b bool) *ResourcePropertyTypeCreate {
	rptc.mutation.SetIsInstanceProperty(b)
	return rptc
}

// SetNillableIsInstanceProperty sets the is_instance_property field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableIsInstanceProperty(b *bool) *ResourcePropertyTypeCreate {
	if b != nil {
		rptc.SetIsInstanceProperty(*b)
	}
	return rptc
}

// SetEditable sets the editable field.
func (rptc *ResourcePropertyTypeCreate) SetEditable(b bool) *ResourcePropertyTypeCreate {
	rptc.mutation.SetEditable(b)
	return rptc
}

// SetNillableEditable sets the editable field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableEditable(b *bool) *ResourcePropertyTypeCreate {
	if b != nil {
		rptc.SetEditable(*b)
	}
	return rptc
}

// SetMandatory sets the mandatory field.
func (rptc *ResourcePropertyTypeCreate) SetMandatory(b bool) *ResourcePropertyTypeCreate {
	rptc.mutation.SetMandatory(b)
	return rptc
}

// SetNillableMandatory sets the mandatory field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableMandatory(b *bool) *ResourcePropertyTypeCreate {
	if b != nil {
		rptc.SetMandatory(*b)
	}
	return rptc
}

// SetDeleted sets the deleted field.
func (rptc *ResourcePropertyTypeCreate) SetDeleted(b bool) *ResourcePropertyTypeCreate {
	rptc.mutation.SetDeleted(b)
	return rptc
}

// SetNillableDeleted sets the deleted field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableDeleted(b *bool) *ResourcePropertyTypeCreate {
	if b != nil {
		rptc.SetDeleted(*b)
	}
	return rptc
}

// SetListable sets the listable field.
func (rptc *ResourcePropertyTypeCreate) SetListable(b bool) *ResourcePropertyTypeCreate {
	rptc.mutation.SetListable(b)
	return rptc
}

// SetNillableListable sets the listable field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableListable(b *bool) *ResourcePropertyTypeCreate {
	if b != nil {
		rptc.SetListable(*b)
	}
	return rptc
}

// SetNodeType sets the nodeType field.
func (rptc *ResourcePropertyTypeCreate) SetNodeType(s string) *ResourcePropertyTypeCreate {
	rptc.mutation.SetNodeType(s)
	return rptc
}

// SetNillableNodeType sets the nodeType field if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableNodeType(s *string) *ResourcePropertyTypeCreate {
	if s != nil {
		rptc.SetNodeType(*s)
	}
	return rptc
}

// SetResourceSpecificationID sets the resourceSpecification edge to ResourceSpecification by id.
func (rptc *ResourcePropertyTypeCreate) SetResourceSpecificationID(id int) *ResourcePropertyTypeCreate {
	rptc.mutation.SetResourceSpecificationID(id)
	return rptc
}

// SetNillableResourceSpecificationID sets the resourceSpecification edge to ResourceSpecification by id if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillableResourceSpecificationID(id *int) *ResourcePropertyTypeCreate {
	if id != nil {
		rptc = rptc.SetResourceSpecificationID(*id)
	}
	return rptc
}

// SetResourceSpecification sets the resourceSpecification edge to ResourceSpecification.
func (rptc *ResourcePropertyTypeCreate) SetResourceSpecification(r *ResourceSpecification) *ResourcePropertyTypeCreate {
	return rptc.SetResourceSpecificationID(r.ID)
}

// SetPropertyCategoryID sets the property_category edge to PropertyCategory by id.
func (rptc *ResourcePropertyTypeCreate) SetPropertyCategoryID(id int) *ResourcePropertyTypeCreate {
	rptc.mutation.SetPropertyCategoryID(id)
	return rptc
}

// SetNillablePropertyCategoryID sets the property_category edge to PropertyCategory by id if the given value is not nil.
func (rptc *ResourcePropertyTypeCreate) SetNillablePropertyCategoryID(id *int) *ResourcePropertyTypeCreate {
	if id != nil {
		rptc = rptc.SetPropertyCategoryID(*id)
	}
	return rptc
}

// SetPropertyCategory sets the property_category edge to PropertyCategory.
func (rptc *ResourcePropertyTypeCreate) SetPropertyCategory(p *PropertyCategory) *ResourcePropertyTypeCreate {
	return rptc.SetPropertyCategoryID(p.ID)
}

// Mutation returns the ResourcePropertyTypeMutation object of the builder.
func (rptc *ResourcePropertyTypeCreate) Mutation() *ResourcePropertyTypeMutation {
	return rptc.mutation
}

// Save creates the ResourcePropertyType in the database.
func (rptc *ResourcePropertyTypeCreate) Save(ctx context.Context) (*ResourcePropertyType, error) {
	var (
		err  error
		node *ResourcePropertyType
	)
	rptc.defaults()
	if len(rptc.hooks) == 0 {
		if err = rptc.check(); err != nil {
			return nil, err
		}
		node, err = rptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourcePropertyTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rptc.check(); err != nil {
				return nil, err
			}
			rptc.mutation = mutation
			node, err = rptc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rptc.hooks) - 1; i >= 0; i-- {
			mut = rptc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rptc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rptc *ResourcePropertyTypeCreate) SaveX(ctx context.Context) *ResourcePropertyType {
	v, err := rptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rptc *ResourcePropertyTypeCreate) defaults() {
	if _, ok := rptc.mutation.CreateTime(); !ok {
		v := resourcepropertytype.DefaultCreateTime()
		rptc.mutation.SetCreateTime(v)
	}
	if _, ok := rptc.mutation.UpdateTime(); !ok {
		v := resourcepropertytype.DefaultUpdateTime()
		rptc.mutation.SetUpdateTime(v)
	}
	if _, ok := rptc.mutation.IsInstanceProperty(); !ok {
		v := resourcepropertytype.DefaultIsInstanceProperty
		rptc.mutation.SetIsInstanceProperty(v)
	}
	if _, ok := rptc.mutation.Editable(); !ok {
		v := resourcepropertytype.DefaultEditable
		rptc.mutation.SetEditable(v)
	}
	if _, ok := rptc.mutation.Mandatory(); !ok {
		v := resourcepropertytype.DefaultMandatory
		rptc.mutation.SetMandatory(v)
	}
	if _, ok := rptc.mutation.Deleted(); !ok {
		v := resourcepropertytype.DefaultDeleted
		rptc.mutation.SetDeleted(v)
	}
	if _, ok := rptc.mutation.Listable(); !ok {
		v := resourcepropertytype.DefaultListable
		rptc.mutation.SetListable(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rptc *ResourcePropertyTypeCreate) check() error {
	if _, ok := rptc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := rptc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := rptc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := rptc.mutation.GetType(); ok {
		if err := resourcepropertytype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := rptc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := rptc.mutation.IsInstanceProperty(); !ok {
		return &ValidationError{Name: "is_instance_property", err: errors.New("ent: missing required field \"is_instance_property\"")}
	}
	if _, ok := rptc.mutation.Editable(); !ok {
		return &ValidationError{Name: "editable", err: errors.New("ent: missing required field \"editable\"")}
	}
	if _, ok := rptc.mutation.Mandatory(); !ok {
		return &ValidationError{Name: "mandatory", err: errors.New("ent: missing required field \"mandatory\"")}
	}
	if _, ok := rptc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	if _, ok := rptc.mutation.Listable(); !ok {
		return &ValidationError{Name: "listable", err: errors.New("ent: missing required field \"listable\"")}
	}
	return nil
}

func (rptc *ResourcePropertyTypeCreate) sqlSave(ctx context.Context) (*ResourcePropertyType, error) {
	_node, _spec := rptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rptc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rptc *ResourcePropertyTypeCreate) createSpec() (*ResourcePropertyType, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourcePropertyType{config: rptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: resourcepropertytype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcepropertytype.FieldID,
			},
		}
	)
	if value, ok := rptc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcepropertytype.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := rptc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcepropertytype.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := rptc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcepropertytype.FieldType,
		})
		_node.Type = value
	}
	if value, ok := rptc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rptc.mutation.ExternalID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldExternalID,
		})
		_node.ExternalID = value
	}
	if value, ok := rptc.mutation.Index(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepropertytype.FieldIndex,
		})
		_node.Index = value
	}
	if value, ok := rptc.mutation.Category(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldCategory,
		})
		_node.Category = value
	}
	if value, ok := rptc.mutation.IntVal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepropertytype.FieldIntVal,
		})
		_node.IntVal = &value
	}
	if value, ok := rptc.mutation.BoolVal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldBoolVal,
		})
		_node.BoolVal = &value
	}
	if value, ok := rptc.mutation.FloatVal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldFloatVal,
		})
		_node.FloatVal = &value
	}
	if value, ok := rptc.mutation.LatitudeVal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldLatitudeVal,
		})
		_node.LatitudeVal = &value
	}
	if value, ok := rptc.mutation.LongitudeVal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldLongitudeVal,
		})
		_node.LongitudeVal = &value
	}
	if value, ok := rptc.mutation.StringVal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldStringVal,
		})
		_node.StringVal = &value
	}
	if value, ok := rptc.mutation.RangeFromVal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldRangeFromVal,
		})
		_node.RangeFromVal = &value
	}
	if value, ok := rptc.mutation.RangeToVal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: resourcepropertytype.FieldRangeToVal,
		})
		_node.RangeToVal = &value
	}
	if value, ok := rptc.mutation.IsInstanceProperty(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldIsInstanceProperty,
		})
		_node.IsInstanceProperty = value
	}
	if value, ok := rptc.mutation.Editable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldEditable,
		})
		_node.Editable = value
	}
	if value, ok := rptc.mutation.Mandatory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldMandatory,
		})
		_node.Mandatory = value
	}
	if value, ok := rptc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldDeleted,
		})
		_node.Deleted = value
	}
	if value, ok := rptc.mutation.Listable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: resourcepropertytype.FieldListable,
		})
		_node.Listable = value
	}
	if value, ok := rptc.mutation.NodeType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepropertytype.FieldNodeType,
		})
		_node.NodeType = value
	}
	if nodes := rptc.mutation.ResourceSpecificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepropertytype.ResourceSpecificationTable,
			Columns: []string{resourcepropertytype.ResourceSpecificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcespecification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rptc.mutation.PropertyCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepropertytype.PropertyCategoryTable,
			Columns: []string{resourcepropertytype.PropertyCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertycategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ResourcePropertyTypeCreateBulk is the builder for creating a bulk of ResourcePropertyType entities.
type ResourcePropertyTypeCreateBulk struct {
	config
	builders []*ResourcePropertyTypeCreate
}

// Save creates the ResourcePropertyType entities in the database.
func (rptcb *ResourcePropertyTypeCreateBulk) Save(ctx context.Context) ([]*ResourcePropertyType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rptcb.builders))
	nodes := make([]*ResourcePropertyType, len(rptcb.builders))
	mutators := make([]Mutator, len(rptcb.builders))
	for i := range rptcb.builders {
		func(i int, root context.Context) {
			builder := rptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourcePropertyTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rptcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rptcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rptcb *ResourcePropertyTypeCreateBulk) SaveX(ctx context.Context) []*ResourcePropertyType {
	v, err := rptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
