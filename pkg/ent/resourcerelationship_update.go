// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationship"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationshipmultiplicity"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationshiptype"
	"github.com/facebookincubator/symphony/pkg/ent/resourcetype"
)

// ResourceRelationshipUpdate is the builder for updating ResourceRelationship entities.
type ResourceRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceRelationshipMutation
}

// Where adds a new predicate for the builder.
func (rru *ResourceRelationshipUpdate) Where(ps ...predicate.ResourceRelationship) *ResourceRelationshipUpdate {
	rru.mutation.predicates = append(rru.mutation.predicates, ps...)
	return rru
}

// SetName sets the name field.
func (rru *ResourceRelationshipUpdate) SetName(s string) *ResourceRelationshipUpdate {
	rru.mutation.SetName(s)
	return rru
}

// SetResourcetypeaID sets the resourcetypea edge to ResourceType by id.
func (rru *ResourceRelationshipUpdate) SetResourcetypeaID(id int) *ResourceRelationshipUpdate {
	rru.mutation.SetResourcetypeaID(id)
	return rru
}

// SetNillableResourcetypeaID sets the resourcetypea edge to ResourceType by id if the given value is not nil.
func (rru *ResourceRelationshipUpdate) SetNillableResourcetypeaID(id *int) *ResourceRelationshipUpdate {
	if id != nil {
		rru = rru.SetResourcetypeaID(*id)
	}
	return rru
}

// SetResourcetypea sets the resourcetypea edge to ResourceType.
func (rru *ResourceRelationshipUpdate) SetResourcetypea(r *ResourceType) *ResourceRelationshipUpdate {
	return rru.SetResourcetypeaID(r.ID)
}

// SetResourcetypebID sets the resourcetypeb edge to ResourceType by id.
func (rru *ResourceRelationshipUpdate) SetResourcetypebID(id int) *ResourceRelationshipUpdate {
	rru.mutation.SetResourcetypebID(id)
	return rru
}

// SetNillableResourcetypebID sets the resourcetypeb edge to ResourceType by id if the given value is not nil.
func (rru *ResourceRelationshipUpdate) SetNillableResourcetypebID(id *int) *ResourceRelationshipUpdate {
	if id != nil {
		rru = rru.SetResourcetypebID(*id)
	}
	return rru
}

// SetResourcetypeb sets the resourcetypeb edge to ResourceType.
func (rru *ResourceRelationshipUpdate) SetResourcetypeb(r *ResourceType) *ResourceRelationshipUpdate {
	return rru.SetResourcetypebID(r.ID)
}

// SetResourcerelationshiptypefkID sets the resourcerelationshiptypefk edge to ResourceRelationshipType by id.
func (rru *ResourceRelationshipUpdate) SetResourcerelationshiptypefkID(id int) *ResourceRelationshipUpdate {
	rru.mutation.SetResourcerelationshiptypefkID(id)
	return rru
}

// SetNillableResourcerelationshiptypefkID sets the resourcerelationshiptypefk edge to ResourceRelationshipType by id if the given value is not nil.
func (rru *ResourceRelationshipUpdate) SetNillableResourcerelationshiptypefkID(id *int) *ResourceRelationshipUpdate {
	if id != nil {
		rru = rru.SetResourcerelationshiptypefkID(*id)
	}
	return rru
}

// SetResourcerelationshiptypefk sets the resourcerelationshiptypefk edge to ResourceRelationshipType.
func (rru *ResourceRelationshipUpdate) SetResourcerelationshiptypefk(r *ResourceRelationshipType) *ResourceRelationshipUpdate {
	return rru.SetResourcerelationshiptypefkID(r.ID)
}

// SetLocationtypefkID sets the locationtypefk edge to LocationType by id.
func (rru *ResourceRelationshipUpdate) SetLocationtypefkID(id int) *ResourceRelationshipUpdate {
	rru.mutation.SetLocationtypefkID(id)
	return rru
}

// SetNillableLocationtypefkID sets the locationtypefk edge to LocationType by id if the given value is not nil.
func (rru *ResourceRelationshipUpdate) SetNillableLocationtypefkID(id *int) *ResourceRelationshipUpdate {
	if id != nil {
		rru = rru.SetLocationtypefkID(*id)
	}
	return rru
}

// SetLocationtypefk sets the locationtypefk edge to LocationType.
func (rru *ResourceRelationshipUpdate) SetLocationtypefk(l *LocationType) *ResourceRelationshipUpdate {
	return rru.SetLocationtypefkID(l.ID)
}

// SetResourceRelationshipMultiplicityFkID sets the resource_relationship_multiplicity_fk edge to ResourceRelationshipMultiplicity by id.
func (rru *ResourceRelationshipUpdate) SetResourceRelationshipMultiplicityFkID(id int) *ResourceRelationshipUpdate {
	rru.mutation.SetResourceRelationshipMultiplicityFkID(id)
	return rru
}

// SetNillableResourceRelationshipMultiplicityFkID sets the resource_relationship_multiplicity_fk edge to ResourceRelationshipMultiplicity by id if the given value is not nil.
func (rru *ResourceRelationshipUpdate) SetNillableResourceRelationshipMultiplicityFkID(id *int) *ResourceRelationshipUpdate {
	if id != nil {
		rru = rru.SetResourceRelationshipMultiplicityFkID(*id)
	}
	return rru
}

// SetResourceRelationshipMultiplicityFk sets the resource_relationship_multiplicity_fk edge to ResourceRelationshipMultiplicity.
func (rru *ResourceRelationshipUpdate) SetResourceRelationshipMultiplicityFk(r *ResourceRelationshipMultiplicity) *ResourceRelationshipUpdate {
	return rru.SetResourceRelationshipMultiplicityFkID(r.ID)
}

// Mutation returns the ResourceRelationshipMutation object of the builder.
func (rru *ResourceRelationshipUpdate) Mutation() *ResourceRelationshipMutation {
	return rru.mutation
}

// ClearResourcetypea clears the "resourcetypea" edge to type ResourceType.
func (rru *ResourceRelationshipUpdate) ClearResourcetypea() *ResourceRelationshipUpdate {
	rru.mutation.ClearResourcetypea()
	return rru
}

// ClearResourcetypeb clears the "resourcetypeb" edge to type ResourceType.
func (rru *ResourceRelationshipUpdate) ClearResourcetypeb() *ResourceRelationshipUpdate {
	rru.mutation.ClearResourcetypeb()
	return rru
}

// ClearResourcerelationshiptypefk clears the "resourcerelationshiptypefk" edge to type ResourceRelationshipType.
func (rru *ResourceRelationshipUpdate) ClearResourcerelationshiptypefk() *ResourceRelationshipUpdate {
	rru.mutation.ClearResourcerelationshiptypefk()
	return rru
}

// ClearLocationtypefk clears the "locationtypefk" edge to type LocationType.
func (rru *ResourceRelationshipUpdate) ClearLocationtypefk() *ResourceRelationshipUpdate {
	rru.mutation.ClearLocationtypefk()
	return rru
}

// ClearResourceRelationshipMultiplicityFk clears the "resource_relationship_multiplicity_fk" edge to type ResourceRelationshipMultiplicity.
func (rru *ResourceRelationshipUpdate) ClearResourceRelationshipMultiplicityFk() *ResourceRelationshipUpdate {
	rru.mutation.ClearResourceRelationshipMultiplicityFk()
	return rru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rru *ResourceRelationshipUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rru.defaults()
	if len(rru.hooks) == 0 {
		if err = rru.check(); err != nil {
			return 0, err
		}
		affected, err = rru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceRelationshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rru.check(); err != nil {
				return 0, err
			}
			rru.mutation = mutation
			affected, err = rru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rru.hooks) - 1; i >= 0; i-- {
			mut = rru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rru *ResourceRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *ResourceRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *ResourceRelationshipUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rru *ResourceRelationshipUpdate) defaults() {
	if _, ok := rru.mutation.UpdateTime(); !ok {
		v := resourcerelationship.UpdateDefaultUpdateTime()
		rru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rru *ResourceRelationshipUpdate) check() error {
	if v, ok := rru.mutation.Name(); ok {
		if err := resourcerelationship.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rru *ResourceRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcerelationship.Table,
			Columns: resourcerelationship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcerelationship.FieldID,
			},
		},
	}
	if ps := rru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcerelationship.FieldUpdateTime,
		})
	}
	if value, ok := rru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcerelationship.FieldName,
		})
	}
	if rru.mutation.ResourcetypeaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcetypeaTable,
			Columns: []string{resourcerelationship.ResourcetypeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.ResourcetypeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcetypeaTable,
			Columns: []string{resourcerelationship.ResourcetypeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.ResourcetypebCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcetypebTable,
			Columns: []string{resourcerelationship.ResourcetypebColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.ResourcetypebIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcetypebTable,
			Columns: []string{resourcerelationship.ResourcetypebColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.ResourcerelationshiptypefkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcerelationshiptypefkTable,
			Columns: []string{resourcerelationship.ResourcerelationshiptypefkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.ResourcerelationshiptypefkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcerelationshiptypefkTable,
			Columns: []string{resourcerelationship.ResourcerelationshiptypefkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.LocationtypefkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.LocationtypefkTable,
			Columns: []string{resourcerelationship.LocationtypefkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.LocationtypefkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.LocationtypefkTable,
			Columns: []string{resourcerelationship.LocationtypefkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.ResourceRelationshipMultiplicityFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourceRelationshipMultiplicityFkTable,
			Columns: []string{resourcerelationship.ResourceRelationshipMultiplicityFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationshipmultiplicity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.ResourceRelationshipMultiplicityFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourceRelationshipMultiplicityFkTable,
			Columns: []string{resourcerelationship.ResourceRelationshipMultiplicityFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationshipmultiplicity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcerelationship.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceRelationshipUpdateOne is the builder for updating a single ResourceRelationship entity.
type ResourceRelationshipUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceRelationshipMutation
}

// SetName sets the name field.
func (rruo *ResourceRelationshipUpdateOne) SetName(s string) *ResourceRelationshipUpdateOne {
	rruo.mutation.SetName(s)
	return rruo
}

// SetResourcetypeaID sets the resourcetypea edge to ResourceType by id.
func (rruo *ResourceRelationshipUpdateOne) SetResourcetypeaID(id int) *ResourceRelationshipUpdateOne {
	rruo.mutation.SetResourcetypeaID(id)
	return rruo
}

// SetNillableResourcetypeaID sets the resourcetypea edge to ResourceType by id if the given value is not nil.
func (rruo *ResourceRelationshipUpdateOne) SetNillableResourcetypeaID(id *int) *ResourceRelationshipUpdateOne {
	if id != nil {
		rruo = rruo.SetResourcetypeaID(*id)
	}
	return rruo
}

// SetResourcetypea sets the resourcetypea edge to ResourceType.
func (rruo *ResourceRelationshipUpdateOne) SetResourcetypea(r *ResourceType) *ResourceRelationshipUpdateOne {
	return rruo.SetResourcetypeaID(r.ID)
}

// SetResourcetypebID sets the resourcetypeb edge to ResourceType by id.
func (rruo *ResourceRelationshipUpdateOne) SetResourcetypebID(id int) *ResourceRelationshipUpdateOne {
	rruo.mutation.SetResourcetypebID(id)
	return rruo
}

// SetNillableResourcetypebID sets the resourcetypeb edge to ResourceType by id if the given value is not nil.
func (rruo *ResourceRelationshipUpdateOne) SetNillableResourcetypebID(id *int) *ResourceRelationshipUpdateOne {
	if id != nil {
		rruo = rruo.SetResourcetypebID(*id)
	}
	return rruo
}

// SetResourcetypeb sets the resourcetypeb edge to ResourceType.
func (rruo *ResourceRelationshipUpdateOne) SetResourcetypeb(r *ResourceType) *ResourceRelationshipUpdateOne {
	return rruo.SetResourcetypebID(r.ID)
}

// SetResourcerelationshiptypefkID sets the resourcerelationshiptypefk edge to ResourceRelationshipType by id.
func (rruo *ResourceRelationshipUpdateOne) SetResourcerelationshiptypefkID(id int) *ResourceRelationshipUpdateOne {
	rruo.mutation.SetResourcerelationshiptypefkID(id)
	return rruo
}

// SetNillableResourcerelationshiptypefkID sets the resourcerelationshiptypefk edge to ResourceRelationshipType by id if the given value is not nil.
func (rruo *ResourceRelationshipUpdateOne) SetNillableResourcerelationshiptypefkID(id *int) *ResourceRelationshipUpdateOne {
	if id != nil {
		rruo = rruo.SetResourcerelationshiptypefkID(*id)
	}
	return rruo
}

// SetResourcerelationshiptypefk sets the resourcerelationshiptypefk edge to ResourceRelationshipType.
func (rruo *ResourceRelationshipUpdateOne) SetResourcerelationshiptypefk(r *ResourceRelationshipType) *ResourceRelationshipUpdateOne {
	return rruo.SetResourcerelationshiptypefkID(r.ID)
}

// SetLocationtypefkID sets the locationtypefk edge to LocationType by id.
func (rruo *ResourceRelationshipUpdateOne) SetLocationtypefkID(id int) *ResourceRelationshipUpdateOne {
	rruo.mutation.SetLocationtypefkID(id)
	return rruo
}

// SetNillableLocationtypefkID sets the locationtypefk edge to LocationType by id if the given value is not nil.
func (rruo *ResourceRelationshipUpdateOne) SetNillableLocationtypefkID(id *int) *ResourceRelationshipUpdateOne {
	if id != nil {
		rruo = rruo.SetLocationtypefkID(*id)
	}
	return rruo
}

// SetLocationtypefk sets the locationtypefk edge to LocationType.
func (rruo *ResourceRelationshipUpdateOne) SetLocationtypefk(l *LocationType) *ResourceRelationshipUpdateOne {
	return rruo.SetLocationtypefkID(l.ID)
}

// SetResourceRelationshipMultiplicityFkID sets the resource_relationship_multiplicity_fk edge to ResourceRelationshipMultiplicity by id.
func (rruo *ResourceRelationshipUpdateOne) SetResourceRelationshipMultiplicityFkID(id int) *ResourceRelationshipUpdateOne {
	rruo.mutation.SetResourceRelationshipMultiplicityFkID(id)
	return rruo
}

// SetNillableResourceRelationshipMultiplicityFkID sets the resource_relationship_multiplicity_fk edge to ResourceRelationshipMultiplicity by id if the given value is not nil.
func (rruo *ResourceRelationshipUpdateOne) SetNillableResourceRelationshipMultiplicityFkID(id *int) *ResourceRelationshipUpdateOne {
	if id != nil {
		rruo = rruo.SetResourceRelationshipMultiplicityFkID(*id)
	}
	return rruo
}

// SetResourceRelationshipMultiplicityFk sets the resource_relationship_multiplicity_fk edge to ResourceRelationshipMultiplicity.
func (rruo *ResourceRelationshipUpdateOne) SetResourceRelationshipMultiplicityFk(r *ResourceRelationshipMultiplicity) *ResourceRelationshipUpdateOne {
	return rruo.SetResourceRelationshipMultiplicityFkID(r.ID)
}

// Mutation returns the ResourceRelationshipMutation object of the builder.
func (rruo *ResourceRelationshipUpdateOne) Mutation() *ResourceRelationshipMutation {
	return rruo.mutation
}

// ClearResourcetypea clears the "resourcetypea" edge to type ResourceType.
func (rruo *ResourceRelationshipUpdateOne) ClearResourcetypea() *ResourceRelationshipUpdateOne {
	rruo.mutation.ClearResourcetypea()
	return rruo
}

// ClearResourcetypeb clears the "resourcetypeb" edge to type ResourceType.
func (rruo *ResourceRelationshipUpdateOne) ClearResourcetypeb() *ResourceRelationshipUpdateOne {
	rruo.mutation.ClearResourcetypeb()
	return rruo
}

// ClearResourcerelationshiptypefk clears the "resourcerelationshiptypefk" edge to type ResourceRelationshipType.
func (rruo *ResourceRelationshipUpdateOne) ClearResourcerelationshiptypefk() *ResourceRelationshipUpdateOne {
	rruo.mutation.ClearResourcerelationshiptypefk()
	return rruo
}

// ClearLocationtypefk clears the "locationtypefk" edge to type LocationType.
func (rruo *ResourceRelationshipUpdateOne) ClearLocationtypefk() *ResourceRelationshipUpdateOne {
	rruo.mutation.ClearLocationtypefk()
	return rruo
}

// ClearResourceRelationshipMultiplicityFk clears the "resource_relationship_multiplicity_fk" edge to type ResourceRelationshipMultiplicity.
func (rruo *ResourceRelationshipUpdateOne) ClearResourceRelationshipMultiplicityFk() *ResourceRelationshipUpdateOne {
	rruo.mutation.ClearResourceRelationshipMultiplicityFk()
	return rruo
}

// Save executes the query and returns the updated entity.
func (rruo *ResourceRelationshipUpdateOne) Save(ctx context.Context) (*ResourceRelationship, error) {
	var (
		err  error
		node *ResourceRelationship
	)
	rruo.defaults()
	if len(rruo.hooks) == 0 {
		if err = rruo.check(); err != nil {
			return nil, err
		}
		node, err = rruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceRelationshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rruo.check(); err != nil {
				return nil, err
			}
			rruo.mutation = mutation
			node, err = rruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rruo.hooks) - 1; i >= 0; i-- {
			mut = rruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *ResourceRelationshipUpdateOne) SaveX(ctx context.Context) *ResourceRelationship {
	node, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rruo *ResourceRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *ResourceRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rruo *ResourceRelationshipUpdateOne) defaults() {
	if _, ok := rruo.mutation.UpdateTime(); !ok {
		v := resourcerelationship.UpdateDefaultUpdateTime()
		rruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rruo *ResourceRelationshipUpdateOne) check() error {
	if v, ok := rruo.mutation.Name(); ok {
		if err := resourcerelationship.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rruo *ResourceRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *ResourceRelationship, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcerelationship.Table,
			Columns: resourcerelationship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcerelationship.FieldID,
			},
		},
	}
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceRelationship.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcerelationship.FieldUpdateTime,
		})
	}
	if value, ok := rruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcerelationship.FieldName,
		})
	}
	if rruo.mutation.ResourcetypeaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcetypeaTable,
			Columns: []string{resourcerelationship.ResourcetypeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.ResourcetypeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcetypeaTable,
			Columns: []string{resourcerelationship.ResourcetypeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.ResourcetypebCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcetypebTable,
			Columns: []string{resourcerelationship.ResourcetypebColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.ResourcetypebIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcetypebTable,
			Columns: []string{resourcerelationship.ResourcetypebColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.ResourcerelationshiptypefkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcerelationshiptypefkTable,
			Columns: []string{resourcerelationship.ResourcerelationshiptypefkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.ResourcerelationshiptypefkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourcerelationshiptypefkTable,
			Columns: []string{resourcerelationship.ResourcerelationshiptypefkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.LocationtypefkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.LocationtypefkTable,
			Columns: []string{resourcerelationship.LocationtypefkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.LocationtypefkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.LocationtypefkTable,
			Columns: []string{resourcerelationship.LocationtypefkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.ResourceRelationshipMultiplicityFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourceRelationshipMultiplicityFkTable,
			Columns: []string{resourcerelationship.ResourceRelationshipMultiplicityFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationshipmultiplicity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.ResourceRelationshipMultiplicityFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerelationship.ResourceRelationshipMultiplicityFkTable,
			Columns: []string{resourcerelationship.ResourceRelationshipMultiplicityFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcerelationshipmultiplicity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceRelationship{config: rruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcerelationship.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
