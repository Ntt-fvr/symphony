// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/location"
	"github.com/facebookincubator/symphony/pkg/ent/resource"
	"github.com/facebookincubator/symphony/pkg/ent/resourcerelationship"
)

// ResourceRelationship is the model entity for the ResourceRelationship schema.
type ResourceRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ResourceRelationshipTypes holds the value of the "ResourceRelationshipTypes" field.
	ResourceRelationshipTypes resourcerelationship.ResourceRelationshipTypes `json:"ResourceRelationshipTypes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceRelationshipQuery when eager-loading is set.
	Edges                ResourceRelationshipEdges `json:"edges"`
	location_rs_location *int
	resource_resource_a  *int
	resource_resource_b  *int
}

// ResourceRelationshipEdges holds the relations/edges for other nodes in the graph.
type ResourceRelationshipEdges struct {
	// Resourcea holds the value of the resourcea edge.
	Resourcea *Resource
	// Resourceb holds the value of the resourceb edge.
	Resourceb *Resource
	// Resourcelocation holds the value of the resourcelocation edge.
	Resourcelocation *Location
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ResourceaOrErr returns the Resourcea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceRelationshipEdges) ResourceaOrErr() (*Resource, error) {
	if e.loadedTypes[0] {
		if e.Resourcea == nil {
			// The edge resourcea was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resource.Label}
		}
		return e.Resourcea, nil
	}
	return nil, &NotLoadedError{edge: "resourcea"}
}

// ResourcebOrErr returns the Resourceb value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceRelationshipEdges) ResourcebOrErr() (*Resource, error) {
	if e.loadedTypes[1] {
		if e.Resourceb == nil {
			// The edge resourceb was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resource.Label}
		}
		return e.Resourceb, nil
	}
	return nil, &NotLoadedError{edge: "resourceb"}
}

// ResourcelocationOrErr returns the Resourcelocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceRelationshipEdges) ResourcelocationOrErr() (*Location, error) {
	if e.loadedTypes[2] {
		if e.Resourcelocation == nil {
			// The edge resourcelocation was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: location.Label}
		}
		return e.Resourcelocation, nil
	}
	return nil, &NotLoadedError{edge: "resourcelocation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceRelationship) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // ResourceRelationshipTypes
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ResourceRelationship) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // location_rs_location
		&sql.NullInt64{}, // resource_resource_a
		&sql.NullInt64{}, // resource_resource_b
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceRelationship fields.
func (rr *ResourceRelationship) assignValues(values ...interface{}) error {
	if m, n := len(values), len(resourcerelationship.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		rr.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		rr.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ResourceRelationshipTypes", values[2])
	} else if value.Valid {
		rr.ResourceRelationshipTypes = resourcerelationship.ResourceRelationshipTypes(value.String)
	}
	values = values[3:]
	if len(values) == len(resourcerelationship.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field location_rs_location", value)
		} else if value.Valid {
			rr.location_rs_location = new(int)
			*rr.location_rs_location = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_resource_a", value)
		} else if value.Valid {
			rr.resource_resource_a = new(int)
			*rr.resource_resource_a = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_resource_b", value)
		} else if value.Valid {
			rr.resource_resource_b = new(int)
			*rr.resource_resource_b = int(value.Int64)
		}
	}
	return nil
}

// QueryResourcea queries the resourcea edge of the ResourceRelationship.
func (rr *ResourceRelationship) QueryResourcea() *ResourceQuery {
	return (&ResourceRelationshipClient{config: rr.config}).QueryResourcea(rr)
}

// QueryResourceb queries the resourceb edge of the ResourceRelationship.
func (rr *ResourceRelationship) QueryResourceb() *ResourceQuery {
	return (&ResourceRelationshipClient{config: rr.config}).QueryResourceb(rr)
}

// QueryResourcelocation queries the resourcelocation edge of the ResourceRelationship.
func (rr *ResourceRelationship) QueryResourcelocation() *LocationQuery {
	return (&ResourceRelationshipClient{config: rr.config}).QueryResourcelocation(rr)
}

// Update returns a builder for updating this ResourceRelationship.
// Note that, you need to call ResourceRelationship.Unwrap() before calling this method, if this ResourceRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (rr *ResourceRelationship) Update() *ResourceRelationshipUpdateOne {
	return (&ResourceRelationshipClient{config: rr.config}).UpdateOne(rr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rr *ResourceRelationship) Unwrap() *ResourceRelationship {
	tx, ok := rr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourceRelationship is not a transactional entity")
	}
	rr.config.driver = tx.drv
	return rr
}

// String implements the fmt.Stringer.
func (rr *ResourceRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v", rr.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(rr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(rr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ResourceRelationshipTypes=")
	builder.WriteString(fmt.Sprintf("%v", rr.ResourceRelationshipTypes))
	builder.WriteByte(')')
	return builder.String()
}

// ResourceRelationships is a parsable slice of ResourceRelationship.
type ResourceRelationships []*ResourceRelationship

func (rr ResourceRelationships) config(cfg config) {
	for _i := range rr {
		rr[_i].config = cfg
	}
}
