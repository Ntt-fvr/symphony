directive @lambdaOnMutate(
  add: Boolean
  update: Boolean
  delete: Boolean
) on OBJECT | INTERFACE
directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @dgraph(
  type: String
  pred: String
) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id(interface: Boolean) on FIELD_DEFINITION
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @lambda on FIELD_DEFINITION
directive @default(
  add: DgraphDefault
  update: DgraphDefault
) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @generate(
  query: GenerateQueryParams
  mutation: GenerateMutationParams
  subscription: Boolean
) on OBJECT | INTERFACE
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
  password: AuthRule
  query: AuthRule
  add: AuthRule
  update: AuthRule
  delete: AuthRule
) on OBJECT | INTERFACE
input AddChangeItemInput {
  resource: ResourceRef
  parameterType: ConfigurationParameterTypeRef!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  status: ChangeItemStatus!
}

type AddChangeItemPayload {
  changeItem(
    filter: ChangeItemFilter
    order: ChangeItemOrder
    first: Int
    offset: Int
  ): [ChangeItem]
  numUids: Int
}

input AddChangeRequestActivityInput {
  isCreate: Boolean!
  activityType: ChangeRequestActivityField!
  oldValue: String
  newValue: String
  createTime: DateTime!
  changeRequest: ChangeRequestRef!
}

type AddChangeRequestActivityPayload {
  changeRequestActivity(
    filter: ChangeRequestActivityFilter
    order: ChangeRequestActivityOrder
    first: Int
    offset: Int
  ): [ChangeRequestActivity]
  numUids: Int
}

input AddChangeRequestInput {
  description: String!
  items: [ChangeItemRef!]!
  scheduler: SchedulerConfigRef
  activities: [ChangeRequestActivityRef]
  type: ChangeRequestType
  source: ChangeRequestSource
  status: ChangeRequestStatus!
}

type AddChangeRequestPayload {
  changeRequest(
    filter: ChangeRequestFilter
    order: ChangeRequestOrder
    first: Int
    offset: Int
  ): [ChangeRequest]
  numUids: Int
}

input AddCMVersionInput {
  parameters: [ParameterRef!]!
  previous: CMVersionRef
  validFrom: DateTime
  validTo: DateTime
  status: VersionStatus!
}

type AddCMVersionPayload {
  cMVersion(
    filter: CMVersionFilter
    order: CMVersionOrder
    first: Int
    offset: Int
  ): [CMVersion]
  numUids: Int
}

input AddComposed_ofInput {
  resource: ResourceRef
}

type AddComposed_ofPayload {
  composed_of(filter: Composed_ofFilter, first: Int, offset: Int): [Composed_of]
  numUids: Int
}

input AddConfigParamTagInput {
  name: String!
  parameters: [ConfigurationParameterTypeRef]!
}

type AddConfigParamTagPayload {
  configParamTag(
    filter: ConfigParamTagFilter
    order: ConfigParamTagOrder
    first: Int
    offset: Int
  ): [ConfigParamTag]
  numUids: Int
}

input AddConfigurationParameterTypeInput {
  externalId: String
  name: String!
  type: ParameterKind!
  nodeType: String
  index: Int
  category: String
  rawValue: String
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  isEditable: Boolean
  isMandatory: Boolean
  isDeleted: Boolean
  isListable: Boolean
  isPrioritary: Boolean
  mappingIn: String
  mappingOut: String
  tags: [ConfigParamTagRef!]
  parameters: [ParameterRef!]
}

type AddConfigurationParameterTypePayload {
  configurationParameterType(
    filter: ConfigurationParameterTypeFilter
    order: ConfigurationParameterTypeOrder
    first: Int
    offset: Int
  ): [ConfigurationParameterType]
  numUids: Int
}

input AddParameterInput {
  parameterType: ConfigurationParameterTypeRef!
  previous: ParameterRef
  versionCM: [CMVersionRef]!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
}

type AddParameterPayload {
  parameter(
    filter: ParameterFilter
    order: ParameterOrder
    first: Int
    offset: Int
  ): [Parameter]
  numUids: Int
}

input AddResourceInput {
  name: String!
  available: Boolean
  externalId: Int
  lifecycleStatus: LifecycleStatus
  typePlanningSubStatus: TypePlanningSubStatus
  planningSubStatus: PlanningSubStatus
  operationalSubStatus: OperationalSubStatus
  usageSubStatus: UsageSubStatus
  belongs_to: ResourceRef
  composed_of: [Composed_ofRef]
  physical_link: ResourceRef
  logical_link: [ResourceRef]
  cross_connection: [ResourceRef]
}

type AddResourcePayload {
  resource(
    filter: ResourceFilter
    order: ResourceOrder
    first: Int
    offset: Int
  ): [Resource]
  numUids: Int
}

input AddResourcePropertyInput {
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  rawValue: String
  resource: [ResourceRef]!
}

type AddResourcePropertyPayload {
  resourceProperty(
    filter: ResourcePropertyFilter
    order: ResourcePropertyOrder
    first: Int
    offset: Int
  ): [ResourceProperty]
  numUids: Int
}

input AddSchedulerConfigInput {
  name: String
  weekDay: WeekDay!
  time: DateTime
  createTime: DateTime!
  status: SchedulerConfigStatus!
  changeRequest: ChangeRequestRef!
  rollbackPolicy: RollbackPolicyConfig
}

type AddSchedulerConfigPayload {
  schedulerConfig(
    filter: SchedulerConfigFilter
    order: SchedulerConfigOrder
    first: Int
    offset: Int
  ): [SchedulerConfig]
  numUids: Int
}

input AuthRule {
  and: [AuthRule]
  or: [AuthRule]
  not: AuthRule
  rule: String
}

type ChangeItem {
  id: ID!
  resource(filter: ResourceFilter): Resource
  parameterType(
    filter: ConfigurationParameterTypeFilter
  ): ConfigurationParameterType!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  status: ChangeItemStatus!
}

type ChangeItemAggregateResult {
  count: Int
  stringValueMin: String
  stringValueMax: String
  intValueMin: Int
  intValueMax: Int
  intValueSum: Int
  intValueAvg: Float
  floatValueMin: Float
  floatValueMax: Float
  floatValueSum: Float
  floatValueAvg: Float
  latitudeValueMin: Float
  latitudeValueMax: Float
  latitudeValueSum: Float
  latitudeValueAvg: Float
  longitudeValueMin: Float
  longitudeValueMax: Float
  longitudeValueSum: Float
  longitudeValueAvg: Float
  rangeFromValueMin: Float
  rangeFromValueMax: Float
  rangeFromValueSum: Float
  rangeFromValueAvg: Float
  rangeToValueMin: Float
  rangeToValueMax: Float
  rangeToValueSum: Float
  rangeToValueAvg: Float
}

input ChangeItemFilter {
  id: [ID!]
  has: [ChangeItemHasFilter]
  and: [ChangeItemFilter]
  or: [ChangeItemFilter]
  not: ChangeItemFilter
}

enum ChangeItemHasFilter {
  resource
  parameterType
  stringValue
  intValue
  booleanValue
  floatValue
  latitudeValue
  longitudeValue
  rangeFromValue
  rangeToValue
  status
}

input ChangeItemOrder {
  asc: ChangeItemOrderable
  desc: ChangeItemOrderable
  then: ChangeItemOrder
}

enum ChangeItemOrderable {
  stringValue
  intValue
  floatValue
  latitudeValue
  longitudeValue
  rangeFromValue
  rangeToValue
}

input ChangeItemPatch {
  resource: ResourceRef
  parameterType: ConfigurationParameterTypeRef
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  status: ChangeItemStatus
}

input ChangeItemRef {
  id: ID
  resource: ResourceRef
  parameterType: ConfigurationParameterTypeRef
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  status: ChangeItemStatus
}

enum ChangeItemStatus {
  CANCELLED
  PENDING
  IN_EXECUTION
  SUCCESSFUL
  FAILED
}

type ChangeRequest {
  id: ID!
  description: String!
  items(
    filter: ChangeItemFilter
    order: ChangeItemOrder
    first: Int
    offset: Int
  ): [ChangeItem!]!
  scheduler(filter: SchedulerConfigFilter): SchedulerConfig
  activities(
    filter: ChangeRequestActivityFilter
    order: ChangeRequestActivityOrder
    first: Int
    offset: Int
  ): [ChangeRequestActivity]
  type: ChangeRequestType
  source: ChangeRequestSource
  status: ChangeRequestStatus!
  itemsAggregate(filter: ChangeItemFilter): ChangeItemAggregateResult
  activitiesAggregate(
    filter: ChangeRequestActivityFilter
  ): ChangeRequestActivityAggregateResult
}

type ChangeRequestActivity {
  id: ID!
  isCreate: Boolean!
  activityType: ChangeRequestActivityField!
  oldValue: String
  newValue: String
  createTime: DateTime!
  changeRequest(filter: ChangeRequestFilter): ChangeRequest!
}

type ChangeRequestActivityAggregateResult {
  count: Int
  oldValueMin: String
  oldValueMax: String
  newValueMin: String
  newValueMax: String
  createTimeMin: DateTime
  createTimeMax: DateTime
}

enum ChangeRequestActivityField {
  STATUS
  PRIORITY
  CREATION_DATE
  REQUESTER
  NAME
  DESCRIPTION
}

input ChangeRequestActivityFilter {
  id: [ID!]
  has: [ChangeRequestActivityHasFilter]
  and: [ChangeRequestActivityFilter]
  or: [ChangeRequestActivityFilter]
  not: ChangeRequestActivityFilter
}

enum ChangeRequestActivityHasFilter {
  isCreate
  activityType
  oldValue
  newValue
  createTime
  changeRequest
}

input ChangeRequestActivityOrder {
  asc: ChangeRequestActivityOrderable
  desc: ChangeRequestActivityOrderable
  then: ChangeRequestActivityOrder
}

enum ChangeRequestActivityOrderable {
  oldValue
  newValue
  createTime
}

input ChangeRequestActivityPatch {
  isCreate: Boolean
  activityType: ChangeRequestActivityField
  oldValue: String
  newValue: String
  createTime: DateTime
  changeRequest: ChangeRequestRef
}

input ChangeRequestActivityRef {
  id: ID
  isCreate: Boolean
  activityType: ChangeRequestActivityField
  oldValue: String
  newValue: String
  createTime: DateTime
  changeRequest: ChangeRequestRef
}

type ChangeRequestAggregateResult {
  count: Int
  descriptionMin: String
  descriptionMax: String
}

input ChangeRequestFilter {
  id: [ID!]
  has: [ChangeRequestHasFilter]
  and: [ChangeRequestFilter]
  or: [ChangeRequestFilter]
  not: ChangeRequestFilter
}

enum ChangeRequestHasFilter {
  description
  items
  scheduler
  activities
  type
  source
  status
}

input ChangeRequestOrder {
  asc: ChangeRequestOrderable
  desc: ChangeRequestOrderable
  then: ChangeRequestOrder
}

enum ChangeRequestOrderable {
  description
}

input ChangeRequestPatch {
  description: String
  items: [ChangeItemRef!]
  scheduler: SchedulerConfigRef
  activities: [ChangeRequestActivityRef]
  type: ChangeRequestType
  source: ChangeRequestSource
  status: ChangeRequestStatus
}

input ChangeRequestRef {
  id: ID
  description: String
  items: [ChangeItemRef!]
  scheduler: SchedulerConfigRef
  activities: [ChangeRequestActivityRef]
  type: ChangeRequestType
  source: ChangeRequestSource
  status: ChangeRequestStatus
}

enum ChangeRequestSource {
  NON_RT_RIC
  NSSMF
  WORKFLOW
  GUI
}

enum ChangeRequestStatus {
  SUBMITTED
  CANCELLED
  PENDING
  APPROVAL
  REJECTED
  SCHEDULED
  IN_EXECUTION
  SUCCESSFUL
  SUCCESSFUL_WITH_WARNINGS
  FAILED
}

enum ChangeRequestType {
  MANUAL
  AUTOMATIC
}

type CMVersion {
  id: ID!
  parameters(
    filter: ParameterFilter
    order: ParameterOrder
    first: Int
    offset: Int
  ): [Parameter!]!
  previous(filter: CMVersionFilter): CMVersion
  validFrom: DateTime
  validTo: DateTime
  status: VersionStatus!
  parametersAggregate(filter: ParameterFilter): ParameterAggregateResult
}

type CMVersionAggregateResult {
  count: Int
  validFromMin: DateTime
  validFromMax: DateTime
  validToMin: DateTime
  validToMax: DateTime
}

input CMVersionFilter {
  id: [ID!]
  has: [CMVersionHasFilter]
  and: [CMVersionFilter]
  or: [CMVersionFilter]
  not: CMVersionFilter
}

enum CMVersionHasFilter {
  parameters
  previous
  validFrom
  validTo
  status
}

input CMVersionOrder {
  asc: CMVersionOrderable
  desc: CMVersionOrderable
  then: CMVersionOrder
}

enum CMVersionOrderable {
  validFrom
  validTo
}

input CMVersionPatch {
  parameters: [ParameterRef!]
  previous: CMVersionRef
  validFrom: DateTime
  validTo: DateTime
  status: VersionStatus
}

input CMVersionRef {
  id: ID
  parameters: [ParameterRef!]
  previous: CMVersionRef
  validFrom: DateTime
  validTo: DateTime
  status: VersionStatus
}

type Composed_of {
  resource(filter: ResourceFilter): Resource
}

type Composed_ofAggregateResult {
  count: Int
}

input Composed_ofFilter {
  has: [Composed_ofHasFilter]
  and: [Composed_ofFilter]
  or: [Composed_ofFilter]
  not: Composed_ofFilter
}

enum Composed_ofHasFilter {
  resource
}

input Composed_ofPatch {
  resource: ResourceRef
}

input Composed_ofRef {
  resource: ResourceRef
}

type ConfigParamTag {
  id: ID!
  name: String!
  parameters(
    filter: ConfigurationParameterTypeFilter
    order: ConfigurationParameterTypeOrder
    first: Int
    offset: Int
  ): [ConfigurationParameterType]!
  parametersAggregate(
    filter: ConfigurationParameterTypeFilter
  ): ConfigurationParameterTypeAggregateResult
}

type ConfigParamTagAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input ConfigParamTagFilter {
  id: [ID!]
  has: [ConfigParamTagHasFilter]
  and: [ConfigParamTagFilter]
  or: [ConfigParamTagFilter]
  not: ConfigParamTagFilter
}

enum ConfigParamTagHasFilter {
  name
  parameters
}

input ConfigParamTagOrder {
  asc: ConfigParamTagOrderable
  desc: ConfigParamTagOrderable
  then: ConfigParamTagOrder
}

enum ConfigParamTagOrderable {
  name
}

input ConfigParamTagPatch {
  name: String
  parameters: [ConfigurationParameterTypeRef]
}

input ConfigParamTagRef {
  id: ID
  name: String
  parameters: [ConfigurationParameterTypeRef]
}

type ConfigurationParameterType {
  id: ID!
  externalId: String
  name: String!
  type: ParameterKind!
  nodeType: String
  index: Int
  category: String
  rawValue: String
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  isEditable: Boolean
  isMandatory: Boolean
  isDeleted: Boolean
  isListable: Boolean
  isPrioritary: Boolean
  mappingIn: String
  mappingOut: String
  tags(
    filter: ConfigParamTagFilter
    order: ConfigParamTagOrder
    first: Int
    offset: Int
  ): [ConfigParamTag!]
  parameters(
    filter: ParameterFilter
    order: ParameterOrder
    first: Int
    offset: Int
  ): [Parameter!]
  tagsAggregate(filter: ConfigParamTagFilter): ConfigParamTagAggregateResult
  parametersAggregate(filter: ParameterFilter): ParameterAggregateResult
}

type ConfigurationParameterTypeAggregateResult {
  count: Int
  externalIdMin: String
  externalIdMax: String
  nameMin: String
  nameMax: String
  nodeTypeMin: String
  nodeTypeMax: String
  indexMin: Int
  indexMax: Int
  indexSum: Int
  indexAvg: Float
  categoryMin: String
  categoryMax: String
  rawValueMin: String
  rawValueMax: String
  stringValueMin: String
  stringValueMax: String
  intValueMin: Int
  intValueMax: Int
  intValueSum: Int
  intValueAvg: Float
  floatValueMin: Float
  floatValueMax: Float
  floatValueSum: Float
  floatValueAvg: Float
  latitudeValueMin: Float
  latitudeValueMax: Float
  latitudeValueSum: Float
  latitudeValueAvg: Float
  longitudeValueMin: Float
  longitudeValueMax: Float
  longitudeValueSum: Float
  longitudeValueAvg: Float
  rangeFromValueMin: Float
  rangeFromValueMax: Float
  rangeFromValueSum: Float
  rangeFromValueAvg: Float
  rangeToValueMin: Float
  rangeToValueMax: Float
  rangeToValueSum: Float
  rangeToValueAvg: Float
  mappingInMin: String
  mappingInMax: String
  mappingOutMin: String
  mappingOutMax: String
}

input ConfigurationParameterTypeFilter {
  id: [ID!]
  has: [ConfigurationParameterTypeHasFilter]
  and: [ConfigurationParameterTypeFilter]
  or: [ConfigurationParameterTypeFilter]
  not: ConfigurationParameterTypeFilter
}

enum ConfigurationParameterTypeHasFilter {
  externalId
  name
  type
  nodeType
  index
  category
  rawValue
  stringValue
  intValue
  booleanValue
  floatValue
  latitudeValue
  longitudeValue
  rangeFromValue
  rangeToValue
  isEditable
  isMandatory
  isDeleted
  isListable
  isPrioritary
  mappingIn
  mappingOut
  tags
  parameters
}

input ConfigurationParameterTypeOrder {
  asc: ConfigurationParameterTypeOrderable
  desc: ConfigurationParameterTypeOrderable
  then: ConfigurationParameterTypeOrder
}

enum ConfigurationParameterTypeOrderable {
  externalId
  name
  nodeType
  index
  category
  rawValue
  stringValue
  intValue
  floatValue
  latitudeValue
  longitudeValue
  rangeFromValue
  rangeToValue
  mappingIn
  mappingOut
}

input ConfigurationParameterTypePatch {
  externalId: String
  name: String
  type: ParameterKind
  nodeType: String
  index: Int
  category: String
  rawValue: String
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  isEditable: Boolean
  isMandatory: Boolean
  isDeleted: Boolean
  isListable: Boolean
  isPrioritary: Boolean
  mappingIn: String
  mappingOut: String
  tags: [ConfigParamTagRef!]
  parameters: [ParameterRef!]
}

input ConfigurationParameterTypeRef {
  id: ID
  externalId: String
  name: String
  type: ParameterKind
  nodeType: String
  index: Int
  category: String
  rawValue: String
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  isEditable: Boolean
  isMandatory: Boolean
  isDeleted: Boolean
  isListable: Boolean
  isPrioritary: Boolean
  mappingIn: String
  mappingOut: String
  tags: [ConfigParamTagRef!]
  parameters: [ParameterRef!]
}

input ContainsFilter {
  point: PointRef
  polygon: PolygonRef
}

input CustomHTTP {
  url: String!
  method: HTTPMethod!
  body: String
  graphql: String
  mode: Mode
  forwardHeaders: [String!]
  secretHeaders: [String!]
  introspectionHeaders: [String!]
  skipIntrospection: Boolean
}

# The DateTime scalar type
# represents date and time as a string in RFC3339 format.
# For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds
# after the 23rd hour of April 12th, 1985 in UTC.
scalar DateTime

input DateTimeFilter {
  eq: DateTime
  in: [DateTime]
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
  between: DateTimeRange
}

input DateTimeRange {
  min: DateTime!
  max: DateTime!
}

type DeleteChangeItemPayload {
  changeItem(
    filter: ChangeItemFilter
    order: ChangeItemOrder
    first: Int
    offset: Int
  ): [ChangeItem]
  msg: String
  numUids: Int
}

type DeleteChangeRequestActivityPayload {
  changeRequestActivity(
    filter: ChangeRequestActivityFilter
    order: ChangeRequestActivityOrder
    first: Int
    offset: Int
  ): [ChangeRequestActivity]
  msg: String
  numUids: Int
}

type DeleteChangeRequestPayload {
  changeRequest(
    filter: ChangeRequestFilter
    order: ChangeRequestOrder
    first: Int
    offset: Int
  ): [ChangeRequest]
  msg: String
  numUids: Int
}

type DeleteCMVersionPayload {
  cMVersion(
    filter: CMVersionFilter
    order: CMVersionOrder
    first: Int
    offset: Int
  ): [CMVersion]
  msg: String
  numUids: Int
}

type DeleteComposed_ofPayload {
  composed_of(filter: Composed_ofFilter, first: Int, offset: Int): [Composed_of]
  msg: String
  numUids: Int
}

type DeleteConfigParamTagPayload {
  configParamTag(
    filter: ConfigParamTagFilter
    order: ConfigParamTagOrder
    first: Int
    offset: Int
  ): [ConfigParamTag]
  msg: String
  numUids: Int
}

type DeleteConfigurationParameterTypePayload {
  configurationParameterType(
    filter: ConfigurationParameterTypeFilter
    order: ConfigurationParameterTypeOrder
    first: Int
    offset: Int
  ): [ConfigurationParameterType]
  msg: String
  numUids: Int
}

type DeleteParameterPayload {
  parameter(
    filter: ParameterFilter
    order: ParameterOrder
    first: Int
    offset: Int
  ): [Parameter]
  msg: String
  numUids: Int
}

type DeleteResourcePayload {
  resource(
    filter: ResourceFilter
    order: ResourceOrder
    first: Int
    offset: Int
  ): [Resource]
  msg: String
  numUids: Int
}

type DeleteResourcePropertyPayload {
  resourceProperty(
    filter: ResourcePropertyFilter
    order: ResourcePropertyOrder
    first: Int
    offset: Int
  ): [ResourceProperty]
  msg: String
  numUids: Int
}

type DeleteSchedulerConfigPayload {
  schedulerConfig(
    filter: SchedulerConfigFilter
    order: SchedulerConfigOrder
    first: Int
    offset: Int
  ): [SchedulerConfig]
  msg: String
  numUids: Int
}

input DgraphDefault {
  value: String
}

enum DgraphIndex {
  int
  int64
  float
  bool
  hash
  exact
  term
  fulltext
  trigram
  regexp
  year
  month
  day
  hour
  geo
}

input FloatFilter {
  eq: Float
  in: [Float]
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: FloatRange
}

input FloatRange {
  min: Float!
  max: Float!
}

input GenerateMutationParams {
  add: Boolean
  update: Boolean
  delete: Boolean
}

input GenerateQueryParams {
  get: Boolean
  query: Boolean
  password: Boolean
  aggregate: Boolean
}

enum HTTPMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

# The Int64 scalar type
# represents a signed 64‐bit numeric non‐fractional value.
# Int64 can represent values in range [-(2^63),(2^63 - 1)].
scalar Int64

input Int64Filter {
  eq: Int64
  in: [Int64]
  le: Int64
  lt: Int64
  ge: Int64
  gt: Int64
  between: Int64Range
}

input Int64Range {
  min: Int64!
  max: Int64!
}

input IntersectsFilter {
  polygon: PolygonRef
  multiPolygon: MultiPolygonRef
}

input IntFilter {
  eq: Int
  in: [Int]
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: IntRange
}

input IntRange {
  min: Int!
  max: Int!
}

enum LifecycleStatus {
  PLANNING
  INSTALLING
  OPERATING
  RETIRING
}

enum Mode {
  BATCH
  SINGLE
}

type MultiPolygon {
  polygons: [Polygon!]!
}

input MultiPolygonRef {
  polygons: [PolygonRef!]!
}

type Mutation {
  addComposed_of(input: [AddComposed_ofInput!]!): AddComposed_ofPayload
  updateComposed_of(input: UpdateComposed_ofInput!): UpdateComposed_ofPayload
  deleteComposed_of(filter: Composed_ofFilter!): DeleteComposed_ofPayload
  addResource(input: [AddResourceInput!]!, upsert: Boolean): AddResourcePayload
  updateResource(input: UpdateResourceInput!): UpdateResourcePayload
  deleteResource(filter: ResourceFilter!): DeleteResourcePayload
  addResourceProperty(
    input: [AddResourcePropertyInput!]!
  ): AddResourcePropertyPayload
  updateResourceProperty(
    input: UpdateResourcePropertyInput!
  ): UpdateResourcePropertyPayload
  deleteResourceProperty(
    filter: ResourcePropertyFilter!
  ): DeleteResourcePropertyPayload
  addCMVersion(input: [AddCMVersionInput!]!): AddCMVersionPayload
  updateCMVersion(input: UpdateCMVersionInput!): UpdateCMVersionPayload
  deleteCMVersion(filter: CMVersionFilter!): DeleteCMVersionPayload
  addParameter(input: [AddParameterInput!]!): AddParameterPayload
  updateParameter(input: UpdateParameterInput!): UpdateParameterPayload
  deleteParameter(filter: ParameterFilter!): DeleteParameterPayload
  addConfigurationParameterType(
    input: [AddConfigurationParameterTypeInput!]!
  ): AddConfigurationParameterTypePayload
  updateConfigurationParameterType(
    input: UpdateConfigurationParameterTypeInput!
  ): UpdateConfigurationParameterTypePayload
  deleteConfigurationParameterType(
    filter: ConfigurationParameterTypeFilter!
  ): DeleteConfigurationParameterTypePayload
  addConfigParamTag(input: [AddConfigParamTagInput!]!): AddConfigParamTagPayload
  updateConfigParamTag(
    input: UpdateConfigParamTagInput!
  ): UpdateConfigParamTagPayload
  deleteConfigParamTag(
    filter: ConfigParamTagFilter!
  ): DeleteConfigParamTagPayload
  addChangeItem(input: [AddChangeItemInput!]!): AddChangeItemPayload
  updateChangeItem(input: UpdateChangeItemInput!): UpdateChangeItemPayload
  deleteChangeItem(filter: ChangeItemFilter!): DeleteChangeItemPayload
  addSchedulerConfig(
    input: [AddSchedulerConfigInput!]!
  ): AddSchedulerConfigPayload
  updateSchedulerConfig(
    input: UpdateSchedulerConfigInput!
  ): UpdateSchedulerConfigPayload
  deleteSchedulerConfig(
    filter: SchedulerConfigFilter!
  ): DeleteSchedulerConfigPayload
  addChangeRequest(input: [AddChangeRequestInput!]!): AddChangeRequestPayload
  updateChangeRequest(
    input: UpdateChangeRequestInput!
  ): UpdateChangeRequestPayload
  deleteChangeRequest(filter: ChangeRequestFilter!): DeleteChangeRequestPayload
  addChangeRequestActivity(
    input: [AddChangeRequestActivityInput!]!
  ): AddChangeRequestActivityPayload
  updateChangeRequestActivity(
    input: UpdateChangeRequestActivityInput!
  ): UpdateChangeRequestActivityPayload
  deleteChangeRequestActivity(
    filter: ChangeRequestActivityFilter!
  ): DeleteChangeRequestActivityPayload
}

input NearFilter {
  distance: Float!
  coordinate: PointRef!
}

enum OperationalSubStatus {
  WORKING
  NOT_WORKING
}

type Parameter {
  id: ID!
  parameterType(
    filter: ConfigurationParameterTypeFilter
  ): ConfigurationParameterType!
  previous(filter: ParameterFilter): Parameter
  versionCM(
    filter: CMVersionFilter
    order: CMVersionOrder
    first: Int
    offset: Int
  ): [CMVersion]!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  versionCMAggregate(filter: CMVersionFilter): CMVersionAggregateResult
}

type ParameterAggregateResult {
  count: Int
  stringValueMin: String
  stringValueMax: String
  intValueMin: Int
  intValueMax: Int
  intValueSum: Int
  intValueAvg: Float
  floatValueMin: Float
  floatValueMax: Float
  floatValueSum: Float
  floatValueAvg: Float
  latitudeValueMin: Float
  latitudeValueMax: Float
  latitudeValueSum: Float
  latitudeValueAvg: Float
  longitudeValueMin: Float
  longitudeValueMax: Float
  longitudeValueSum: Float
  longitudeValueAvg: Float
  rangeFromValueMin: Float
  rangeFromValueMax: Float
  rangeFromValueSum: Float
  rangeFromValueAvg: Float
  rangeToValueMin: Float
  rangeToValueMax: Float
  rangeToValueSum: Float
  rangeToValueAvg: Float
}

input ParameterFilter {
  id: [ID!]
  has: [ParameterHasFilter]
  and: [ParameterFilter]
  or: [ParameterFilter]
  not: ParameterFilter
}

enum ParameterHasFilter {
  parameterType
  previous
  versionCM
  stringValue
  intValue
  booleanValue
  floatValue
  latitudeValue
  longitudeValue
  rangeFromValue
  rangeToValue
}

enum ParameterKind {
  string
  int
  bool
  float
  date
  enum
  range
  email
  gps_location
  datetime_local
}

input ParameterOrder {
  asc: ParameterOrderable
  desc: ParameterOrderable
  then: ParameterOrder
}

enum ParameterOrderable {
  stringValue
  intValue
  floatValue
  latitudeValue
  longitudeValue
  rangeFromValue
  rangeToValue
}

input ParameterPatch {
  parameterType: ConfigurationParameterTypeRef
  previous: ParameterRef
  versionCM: [CMVersionRef]
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
}

input ParameterRef {
  id: ID
  parameterType: ConfigurationParameterTypeRef
  previous: ParameterRef
  versionCM: [CMVersionRef]
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
}

enum PlanningSubStatus {
  ACTIVATED
  DESACTIVATED
}

type Point {
  longitude: Float!
  latitude: Float!
}

input PointGeoFilter {
  near: NearFilter
  within: WithinFilter
}

type PointList {
  points: [Point!]!
}

input PointListRef {
  points: [PointRef!]!
}

input PointRef {
  longitude: Float!
  latitude: Float!
}

type Polygon {
  coordinates: [PointList!]!
}

input PolygonGeoFilter {
  near: NearFilter
  within: WithinFilter
  contains: ContainsFilter
  intersects: IntersectsFilter
}

input PolygonRef {
  coordinates: [PointListRef!]!
}

type Query {
  queryComposed_of(
    filter: Composed_ofFilter
    first: Int
    offset: Int
  ): [Composed_of]
  aggregateComposed_of(filter: Composed_ofFilter): Composed_ofAggregateResult
  getResource(id: ID, name: String): Resource
  queryResource(
    filter: ResourceFilter
    order: ResourceOrder
    first: Int
    offset: Int
  ): [Resource]
  aggregateResource(filter: ResourceFilter): ResourceAggregateResult
  getResourceProperty(id: ID!): ResourceProperty
  queryResourceProperty(
    filter: ResourcePropertyFilter
    order: ResourcePropertyOrder
    first: Int
    offset: Int
  ): [ResourceProperty]
  aggregateResourceProperty(
    filter: ResourcePropertyFilter
  ): ResourcePropertyAggregateResult
  getCMVersion(id: ID!): CMVersion
  queryCMVersion(
    filter: CMVersionFilter
    order: CMVersionOrder
    first: Int
    offset: Int
  ): [CMVersion]
  aggregateCMVersion(filter: CMVersionFilter): CMVersionAggregateResult
  getParameter(id: ID!): Parameter
  queryParameter(
    filter: ParameterFilter
    order: ParameterOrder
    first: Int
    offset: Int
  ): [Parameter]
  aggregateParameter(filter: ParameterFilter): ParameterAggregateResult
  getConfigurationParameterType(id: ID!): ConfigurationParameterType
  queryConfigurationParameterType(
    filter: ConfigurationParameterTypeFilter
    order: ConfigurationParameterTypeOrder
    first: Int
    offset: Int
  ): [ConfigurationParameterType]
  aggregateConfigurationParameterType(
    filter: ConfigurationParameterTypeFilter
  ): ConfigurationParameterTypeAggregateResult
  getConfigParamTag(id: ID!): ConfigParamTag
  queryConfigParamTag(
    filter: ConfigParamTagFilter
    order: ConfigParamTagOrder
    first: Int
    offset: Int
  ): [ConfigParamTag]
  aggregateConfigParamTag(
    filter: ConfigParamTagFilter
  ): ConfigParamTagAggregateResult
  getChangeItem(id: ID!): ChangeItem
  queryChangeItem(
    filter: ChangeItemFilter
    order: ChangeItemOrder
    first: Int
    offset: Int
  ): [ChangeItem]
  aggregateChangeItem(filter: ChangeItemFilter): ChangeItemAggregateResult
  getSchedulerConfig(id: ID!): SchedulerConfig
  querySchedulerConfig(
    filter: SchedulerConfigFilter
    order: SchedulerConfigOrder
    first: Int
    offset: Int
  ): [SchedulerConfig]
  aggregateSchedulerConfig(
    filter: SchedulerConfigFilter
  ): SchedulerConfigAggregateResult
  getChangeRequest(id: ID!): ChangeRequest
  queryChangeRequest(
    filter: ChangeRequestFilter
    order: ChangeRequestOrder
    first: Int
    offset: Int
  ): [ChangeRequest]
  aggregateChangeRequest(
    filter: ChangeRequestFilter
  ): ChangeRequestAggregateResult
  getChangeRequestActivity(id: ID!): ChangeRequestActivity
  queryChangeRequestActivity(
    filter: ChangeRequestActivityFilter
    order: ChangeRequestActivityOrder
    first: Int
    offset: Int
  ): [ChangeRequestActivity]
  aggregateChangeRequestActivity(
    filter: ChangeRequestActivityFilter
  ): ChangeRequestActivityAggregateResult
}

type Resource {
  id: ID!
  name: String!
  available: Boolean
  externalId: Int
  lifecycleStatus: LifecycleStatus
  typePlanningSubStatus: TypePlanningSubStatus
  planningSubStatus: PlanningSubStatus
  operationalSubStatus: OperationalSubStatus
  usageSubStatus: UsageSubStatus
  belongs_to(filter: ResourceFilter): Resource
  composed_of(filter: Composed_ofFilter, first: Int, offset: Int): [Composed_of]
  physical_link(filter: ResourceFilter): Resource
  logical_link(
    filter: ResourceFilter
    order: ResourceOrder
    first: Int
    offset: Int
  ): [Resource]
  cross_connection(
    filter: ResourceFilter
    order: ResourceOrder
    first: Int
    offset: Int
  ): [Resource]
  composed_ofAggregate(filter: Composed_ofFilter): Composed_ofAggregateResult
  logical_linkAggregate(filter: ResourceFilter): ResourceAggregateResult
  cross_connectionAggregate(filter: ResourceFilter): ResourceAggregateResult
}

type ResourceAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  externalIdMin: Int
  externalIdMax: Int
  externalIdSum: Int
  externalIdAvg: Float
}

input ResourceFilter {
  id: [ID!]
  name: StringHashFilter
  has: [ResourceHasFilter]
  and: [ResourceFilter]
  or: [ResourceFilter]
  not: ResourceFilter
}

enum ResourceHasFilter {
  name
  available
  externalId
  lifecycleStatus
  typePlanningSubStatus
  planningSubStatus
  operationalSubStatus
  usageSubStatus
  belongs_to
  composed_of
  physical_link
  logical_link
  cross_connection
}

input ResourceOrder {
  asc: ResourceOrderable
  desc: ResourceOrderable
  then: ResourceOrder
}

enum ResourceOrderable {
  name
  externalId
}

input ResourcePatch {
  name: String
  available: Boolean
  externalId: Int
  lifecycleStatus: LifecycleStatus
  typePlanningSubStatus: TypePlanningSubStatus
  planningSubStatus: PlanningSubStatus
  operationalSubStatus: OperationalSubStatus
  usageSubStatus: UsageSubStatus
  belongs_to: ResourceRef
  composed_of: [Composed_ofRef]
  physical_link: ResourceRef
  logical_link: [ResourceRef]
  cross_connection: [ResourceRef]
}

type ResourceProperty {
  id: ID!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  rawValue: String
  resource(
    filter: ResourceFilter
    order: ResourceOrder
    first: Int
    offset: Int
  ): [Resource]!
  resourceAggregate(filter: ResourceFilter): ResourceAggregateResult
}

type ResourcePropertyAggregateResult {
  count: Int
  stringValueMin: String
  stringValueMax: String
  intValueMin: Int
  intValueMax: Int
  intValueSum: Int
  intValueAvg: Float
  floatValueMin: Float
  floatValueMax: Float
  floatValueSum: Float
  floatValueAvg: Float
  latitudeValueMin: Float
  latitudeValueMax: Float
  latitudeValueSum: Float
  latitudeValueAvg: Float
  longitudeValueMin: Float
  longitudeValueMax: Float
  longitudeValueSum: Float
  longitudeValueAvg: Float
  rangeFromValueMin: Float
  rangeFromValueMax: Float
  rangeFromValueSum: Float
  rangeFromValueAvg: Float
  rangeToValueMin: Float
  rangeToValueMax: Float
  rangeToValueSum: Float
  rangeToValueAvg: Float
  rawValueMin: String
  rawValueMax: String
}

input ResourcePropertyFilter {
  id: [ID!]
  has: [ResourcePropertyHasFilter]
  and: [ResourcePropertyFilter]
  or: [ResourcePropertyFilter]
  not: ResourcePropertyFilter
}

enum ResourcePropertyHasFilter {
  stringValue
  intValue
  booleanValue
  floatValue
  latitudeValue
  longitudeValue
  rangeFromValue
  rangeToValue
  rawValue
  resource
}

input ResourcePropertyOrder {
  asc: ResourcePropertyOrderable
  desc: ResourcePropertyOrderable
  then: ResourcePropertyOrder
}

enum ResourcePropertyOrderable {
  stringValue
  intValue
  floatValue
  latitudeValue
  longitudeValue
  rangeFromValue
  rangeToValue
  rawValue
}

input ResourcePropertyPatch {
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  rawValue: String
  resource: [ResourceRef]
}

input ResourcePropertyRef {
  id: ID
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  rawValue: String
  resource: [ResourceRef]
}

input ResourceRef {
  id: ID
  name: String
  available: Boolean
  externalId: Int
  lifecycleStatus: LifecycleStatus
  typePlanningSubStatus: TypePlanningSubStatus
  planningSubStatus: PlanningSubStatus
  operationalSubStatus: OperationalSubStatus
  usageSubStatus: UsageSubStatus
  belongs_to: ResourceRef
  composed_of: [Composed_ofRef]
  physical_link: ResourceRef
  logical_link: [ResourceRef]
  cross_connection: [ResourceRef]
}

enum RollbackPolicyConfig {
  APPROVED
  REJECTED
}

type SchedulerConfig {
  id: ID!
  name: String
  weekDay: WeekDay!
  time: DateTime
  createTime: DateTime!
  status: SchedulerConfigStatus!
  changeRequest(filter: ChangeRequestFilter): ChangeRequest!
  rollbackPolicy: RollbackPolicyConfig
}

type SchedulerConfigAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  timeMin: DateTime
  timeMax: DateTime
  createTimeMin: DateTime
  createTimeMax: DateTime
}

input SchedulerConfigFilter {
  id: [ID!]
  has: [SchedulerConfigHasFilter]
  and: [SchedulerConfigFilter]
  or: [SchedulerConfigFilter]
  not: SchedulerConfigFilter
}

enum SchedulerConfigHasFilter {
  name
  weekDay
  time
  createTime
  status
  changeRequest
  rollbackPolicy
}

input SchedulerConfigOrder {
  asc: SchedulerConfigOrderable
  desc: SchedulerConfigOrderable
  then: SchedulerConfigOrder
}

enum SchedulerConfigOrderable {
  name
  time
  createTime
}

input SchedulerConfigPatch {
  name: String
  weekDay: WeekDay
  time: DateTime
  createTime: DateTime
  status: SchedulerConfigStatus
  changeRequest: ChangeRequestRef
  rollbackPolicy: RollbackPolicyConfig
}

input SchedulerConfigRef {
  id: ID
  name: String
  weekDay: WeekDay
  time: DateTime
  createTime: DateTime
  status: SchedulerConfigStatus
  changeRequest: ChangeRequestRef
  rollbackPolicy: RollbackPolicyConfig
}

enum SchedulerConfigStatus {
  APPROVED
  REJECTED
}

input StringExactFilter {
  eq: String
  in: [String]
  le: String
  lt: String
  ge: String
  gt: String
  between: StringRange
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringHashFilter {
  eq: String
  in: [String]
}

input StringRange {
  min: String!
  max: String!
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

enum TypePlanningSubStatus {
  PROPOSED
  FEASIBILITY_CHECKED
  DESIGNED
  ORDERED
}

input UpdateChangeItemInput {
  filter: ChangeItemFilter!
  set: ChangeItemPatch
  remove: ChangeItemPatch
}

type UpdateChangeItemPayload {
  changeItem(
    filter: ChangeItemFilter
    order: ChangeItemOrder
    first: Int
    offset: Int
  ): [ChangeItem]
  numUids: Int
}

input UpdateChangeRequestActivityInput {
  filter: ChangeRequestActivityFilter!
  set: ChangeRequestActivityPatch
  remove: ChangeRequestActivityPatch
}

type UpdateChangeRequestActivityPayload {
  changeRequestActivity(
    filter: ChangeRequestActivityFilter
    order: ChangeRequestActivityOrder
    first: Int
    offset: Int
  ): [ChangeRequestActivity]
  numUids: Int
}

input UpdateChangeRequestInput {
  filter: ChangeRequestFilter!
  set: ChangeRequestPatch
  remove: ChangeRequestPatch
}

type UpdateChangeRequestPayload {
  changeRequest(
    filter: ChangeRequestFilter
    order: ChangeRequestOrder
    first: Int
    offset: Int
  ): [ChangeRequest]
  numUids: Int
}

input UpdateCMVersionInput {
  filter: CMVersionFilter!
  set: CMVersionPatch
  remove: CMVersionPatch
}

type UpdateCMVersionPayload {
  cMVersion(
    filter: CMVersionFilter
    order: CMVersionOrder
    first: Int
    offset: Int
  ): [CMVersion]
  numUids: Int
}

input UpdateComposed_ofInput {
  filter: Composed_ofFilter!
  set: Composed_ofPatch
  remove: Composed_ofPatch
}

type UpdateComposed_ofPayload {
  composed_of(filter: Composed_ofFilter, first: Int, offset: Int): [Composed_of]
  numUids: Int
}

input UpdateConfigParamTagInput {
  filter: ConfigParamTagFilter!
  set: ConfigParamTagPatch
  remove: ConfigParamTagPatch
}

type UpdateConfigParamTagPayload {
  configParamTag(
    filter: ConfigParamTagFilter
    order: ConfigParamTagOrder
    first: Int
    offset: Int
  ): [ConfigParamTag]
  numUids: Int
}

input UpdateConfigurationParameterTypeInput {
  filter: ConfigurationParameterTypeFilter!
  set: ConfigurationParameterTypePatch
  remove: ConfigurationParameterTypePatch
}

type UpdateConfigurationParameterTypePayload {
  configurationParameterType(
    filter: ConfigurationParameterTypeFilter
    order: ConfigurationParameterTypeOrder
    first: Int
    offset: Int
  ): [ConfigurationParameterType]
  numUids: Int
}

input UpdateParameterInput {
  filter: ParameterFilter!
  set: ParameterPatch
  remove: ParameterPatch
}

type UpdateParameterPayload {
  parameter(
    filter: ParameterFilter
    order: ParameterOrder
    first: Int
    offset: Int
  ): [Parameter]
  numUids: Int
}

input UpdateResourceInput {
  filter: ResourceFilter!
  set: ResourcePatch
  remove: ResourcePatch
}

type UpdateResourcePayload {
  resource(
    filter: ResourceFilter
    order: ResourceOrder
    first: Int
    offset: Int
  ): [Resource]
  numUids: Int
}

input UpdateResourcePropertyInput {
  filter: ResourcePropertyFilter!
  set: ResourcePropertyPatch
  remove: ResourcePropertyPatch
}

type UpdateResourcePropertyPayload {
  resourceProperty(
    filter: ResourcePropertyFilter
    order: ResourcePropertyOrder
    first: Int
    offset: Int
  ): [ResourceProperty]
  numUids: Int
}

input UpdateSchedulerConfigInput {
  filter: SchedulerConfigFilter!
  set: SchedulerConfigPatch
  remove: SchedulerConfigPatch
}

type UpdateSchedulerConfigPayload {
  schedulerConfig(
    filter: SchedulerConfigFilter
    order: SchedulerConfigOrder
    first: Int
    offset: Int
  ): [SchedulerConfig]
  numUids: Int
}

enum UsageSubStatus {
  AVAILABLE
  RESERVED
  NO_AVAILABLE
  ASSIGNED
}

enum VersionStatus {
  CURRENT
  REPLACED
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

input WithinFilter {
  polygon: PolygonRef!
}
