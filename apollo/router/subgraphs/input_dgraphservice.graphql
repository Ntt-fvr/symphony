enum LifecycleStatus
{
  PLANNING
  INSTALLING
  OPERATING
  RETIRING
}
enum TypePlanningSubStatus
{
  PROPOSED
  FEASIBILITY_CHECKED
  DESIGNED
  ORDERED
}
enum PlanningSubStatus
{
  ACTIVATED
  DESACTIVATED
}
enum OperationalSubStatus
{
  WORKING
  NOT_WORKING
}
enum UsageSubStatus
{
  AVAILABLE
  RESERVED
  NO_AVAILABLE
  ASSIGNED
  TERMINATING
}

type NumericPool { 
id: ID!
description: String
limit: Int!
customLimit: Int
resource: [Resource!]!
isDelete: Boolean!
statusNumericPools: [StatusNumericPool]
}

type StatusNumericPool {
id: ID!
numericPool: NumericPool @hasInverse(field: statusNumericPools)
status: UsageSubStatus
value: [Int]
}

type Resource implements ResourceInt{
  id: ID! 
  name: String! @id @search(by: [hash])
  available: Boolean
  externalId: String
  lifecycleStatus: LifecycleStatus
  typePlanningSubStatus: TypePlanningSubStatus
  planningSubStatus: PlanningSubStatus
  operationalSubStatus: OperationalSubStatus
  usageSubStatus: UsageSubStatus
  belongsTo: Resource
  composedOf: [Resource] @hasInverse(field: belongsTo)
  locatedIn: String @search(by: [hash])
  #contains: String @search(by: [hash]) @hasInverse(field: locatedIn)
  physicalLink: Resource
  physicalLinkInv: [Resource] @hasInverse(field: physicalLink)
  logicalLink: Resource
  logicalLinkInv: [Resource] @hasInverse(field: logicalLink)
  crossConnection: Resource
  crossconnectionInv: [Resource] @hasInverse(field: crossConnection)
  resourceSpecification: String! @search(by: [hash])
  resourceProperties: [ResourceProperty]
  isDelete: Boolean!
  numericPool: [NumericPool]
  isEditable: Boolean @default(add: { value: true})
}
type ResourceProperty{
  id: ID!
  stringValue: String @search(by: [term])
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  rawValue: String
  resource: Resource @hasInverse(field: resourceProperties)
  resourcePropertyType: String! @search(by: [hash])
}
enum VersionStatus{
  CURRENT
  REPLACED
}
type CMVersion {
  id: ID!
  parameters: [Parameter!]!
  previous: CMVersion
  validFrom: DateTime
  validTo: DateTime
  status: VersionStatus!
  resource: Resource!
}
type Parameter {
  id: ID!
  parameterType: ConfigurationParameterType!
  previous: Parameter
  versionCM: [CMVersion]!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
}
enum ParameterKind{
  string
  int
  bool
  float
  date
  enum
  range
  email
  gps_location
  datetime_local
}
type ConfigurationParameterType {
  id: ID!
  externalId: String
  name: String! @id
  type: ParameterKind!
  nodeType: String
  index: Int
  category: String
  rawValue: String
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  isEditable: Boolean
  isMandatory: Boolean
  isDeleted: Boolean
  isListable: Boolean
  isPrioritary: Boolean
  mappingIn: String
  mappingOut: String
  tags: [ConfigParamTag!]
  parameters: [Parameter!]
  resourceSpecification: String! @search(by: [hash])
}

type ConfigParamTag{
  id: ID!
  name: String!
  parameters: [ConfigurationParameterType]
}
enum ChangeItemStatus{
  CANCELLED
  PENDING
  IN_EXECUTION
  SUCCESSFUL
  FAILED
}
type ChangeItem{
  id: ID!
  resource: Resource
  parameterType: ConfigurationParameterType! 
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  status: ChangeItemStatus!
}
enum SchedulerConfigStatus {
  APPROVED
  REJECTED
}
enum RollbackPolicyConfig {
  APPROVED
  REJECTED
}
enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
type SchedulerConfig{
  id: ID!
  name: String
  weekDay: WeekDay!
  time: DateTime
  createTime: DateTime!
  status: SchedulerConfigStatus!
  changeRequest: ChangeRequest!
  rollbackPolicy: RollbackPolicyConfig
}
enum ChangeRequestType{
  MANUAL
  AUTOMATIC
}
enum ChangeRequestSource{
  NON_RT_RIC
  NSSMF
  WORKFLOW
  GUI
}
enum ChangeRequestStatus{
  SUBMITTED
  CANCELLED
  PENDING APPROVAL
  REJECTED
  SCHEDULED
  IN_EXECUTION
  SUCCESSFUL
  SUCCESSFUL_WITH_WARNINGS
  FAILED
}
type ChangeRequest{
  id: ID!
  description: String!
  items: [ChangeItem!]!
  scheduler: SchedulerConfig
  activities: [ChangeRequestActivity]
  type: ChangeRequestType
  source: ChangeRequestSource
  requester: String! @search(by: [hash])
  aprobator: String @search(by: [hash])
  status: ChangeRequestStatus!
}
enum ChangeRequestActivityField {
  STATUS
  PRIORITY
  CREATION_DATE
  REQUESTER
  NAME
  DESCRIPTION
}
type ChangeRequestActivity{
  id: ID!
  author: String! @search(by: [hash])
  isCreate: Boolean!
  activityType: ChangeRequestActivityField!
  # newRelatedNode: Node
  # oldRelatedNode: Node
  oldValue: String
  newValue: String
  createTime: DateTime!
  changeRequest: ChangeRequest!
}
enum _PartyOrdering {
      id_asc
      id_desc
      href_asc
      href_desc
      name_asc
      name_desc
      role_asc
      role_desc
      _id_asc
      _id_desc
    }
type Party {
  id: String! @id
  href: String
  name: String
  role: String
  serviceOrders: [ServiceOrder]
  baseType: String
  schemaLocation: String
  type: String
  referredType: String
}
enum _ServiceOrderItemOrdering {
  id_asc
  id_desc
  _atType_asc
  _atType_desc
  action_asc
  action_desc
  _id_asc
  _id_desc
}
type ExternalReference {
    id: String! @id
    href: String
    externalReferenceType: String
    name: String
}
type ServiceOrderRelationship {
    id: String! @id
    href: String
    relationshipType: String
}
type AppointmentRef {
    id: ID!
    href: String
    description: String
}
type ServiceOrderItem {
  serviceOrderItemId: ID!
  quantity: Int
  appointment: AppointmentRef
  id: String! @search(by: [hash])
  type: String!
  action: String!
  service: ServiceSOM! 
  state: String  
}
enum _ServiceSOMOrdering {
  id_asc
  id_desc
  href_asc
  href_desc
  category_asc
  category_desc
  description_asc
  description_desc
  externalId_asc
  externalId_desc
  hasStarted_asc
  hasStarted_desc
  isServiceEnabled_asc
  isServiceEnabled_desc
  isStateful_asc
  isStateful_desc
  name_asc
  name_desc
  serviceDate_asc
  serviceDate_desc
  serviceState_asc
  serviceState_desc
  serviceType_asc
  serviceType_desc
  state_asc
  state_desc
  type_asc
  type_desc
  relationshipType_asc
  relationshipType_desc
  _atSchemaLocation_asc
  _atSchemaLocation_desc
  _atType_asc
  _atType_desc
  _id_asc
  _id_desc
}
type ServiceSOM implements ServiceReference{
  id: ID!
  href: String
  category: String @search(by: [hash])
  description: String
  endDate: String
  isBundle: Boolean
  startDate: String
  startMode: String
  externalId: String @search(by: [hash])
  hasStarted: Boolean
  isServiceEnabled: Boolean
  isStateful: Boolean
  name: String
  serviceDate: String
  serviceType: String
  state: String @search(by: [hash])
  type: String
  relatedParty: [Party]  
  place: [Place]  @hasInverse(field: services)
  serviceSpecification: ServiceSpecificationRef @hasInverse(field: services)
  serviceCharacteristic: [Characteristic] @hasInverse(field: services) 
  supportingService: [ServiceSOM]
  supportingResource: [ResourceInt]
  serviceRelationship: [ServiceRelationship]
  relatedEntity: [RelatedEntity]
  note: [Note]
  feature: [Feature]
}
type ServiceRelationship{
 id: ID!
 relationshipType: String!
 service : ServiceSOM
 serviceRelationshipCharacteristic: [Characteristic]
}
type Feature{
  id: ID!
  isBundle: Boolean
  isEnabled: Boolean
  name: String  
}
type RelatedEntity{
  id: String! @id
  href: String
  name: String
  role: String!
}
type ResourceReference implements ResourceInt{
  id: String! @id
  href: String
  name: String! @id @search(by: [hash])
}
enum _PlaceOrdering {
  id_asc
  id_desc
  name_asc
  name_desc
  role_asc
  role_desc
  _atType_asc
  _atType_desc
  _id_asc
  _id_desc
}
type Place {
  placeId: ID!
  id: String @search(by: [hash])
  href: String
  name: String
  role: String
  type: String
  services: [ServiceSOM]
  geometryType: String
  accuracy: String
  spatialRef: String @search(by: [hash])
  geometry: [Geometry]
}
type Geometry {
    x: String! @id
    y: String! @id
}
enum _ServiceSpecificationRefOrdering {
  id_asc
  id_desc
  _atReferredType_asc
  _atReferredType_desc
  _atType_asc
  _atType_desc
  href_asc
  href_desc
  name_asc
  name_desc
  version_asc
  version_desc
  _id_asc
  _id_desc
}
type ServiceSpecificationRef {
   id: String! @id
  referredType: String
  type: String
  href: String
  name: String!
  version: String
  services: [ServiceSOM] 
}
enum _CharacteristicOrdering {
  id_asc
  id_desc
  _atType_asc
  _atType_desc
  name_asc
  name_desc
  unitOfMeasure_asc
  unitOfMeasure_desc
  value_asc
  value_desc
  valueType_asc
  valueType_desc
  valueUnits_asc
  valueUnits_desc
  _id_asc
  _id_desc
}
type Characteristic {
  characteristicId: ID!
  id: String! @search(by: [hash])
  _atType: String
  name: String
  unitOfMeasure: String
  value: String
  valueType: String
  valueUnits: String
  services: [ServiceSOM]
  characteristicRelationship: [CharacteristicRelationship]
}
type CharacteristicRelationship {
    id: ID!
    relationshipType: String
}
enum _NoteOrdering {
  id_asc
  id_desc
  author_asc
  author_desc
  date_asc
  date_desc
  text_asc
  text_desc
  _id_asc
  _id_desc
}
type Note {
  id: ID!
  author: String!
  date: String!
  text: String!
  serviceorder: [ServiceOrder]
}
enum _FlowExecutionRefOrdering {
  id_asc
  id_desc
  domainId_asc
  domainId_desc
  projectId_asc
  projectId_desc
  runId_asc
  runId_desc
  workflowId_asc
  workflowId_desc
  _id_asc
  _id_desc
}
type FlowExecutionRef {
  id: ID!
  domainId: String
  projectId: String
  runId: String
  workflowId: String
  creationDate: String @search(by: [exact])
  executionDate:  String @search(by: [exact])
  endExecutionDate: String @search(by: [exact])
  cancelto: FlowExecutionRef
  serviceorders: ServiceOrder
}
enum _CancellationRequestOrdering {
  id_asc
  id_desc
  _atType_asc
  _atType_desc
  cancellationReason_asc
  cancellationReason_desc
  externalId_asc
  externalId_desc
  href_asc
  href_desc
  requestedCancellationDate_asc
  requestedCancellationDate_desc
  state_asc
  state_desc
  _id_asc
  _id_desc
}
type CancellationRequest {
  id: ID! 
  _atType: String
  cancellationReason: String
  externalId: String @search(by: [hash])
  href: String
  requestedCancellationDate: String
  state: String
  serviceorders: [ServiceOrder]
}
enum _ModificationRequestOrdering {
  id_asc
  id_desc
  _atType_asc
  _atType_desc
  externalId_asc
  externalId_desc
  modifyReason_asc
  modifyReason_desc
  requestedCompletionDate_asc
  requestedCompletionDate_desc
  _id_asc
  _id_desc
}
type ModificationRequest {
  id: ID!
  _atType: String!
  externalId: String @search(by: [hash])
  modifyReason: String!
  requestedCompletionDate: String!
  serviceorders: [ServiceOrder] 
}
enum _ServiceOrderOrdering {
  id_asc
  id_desc
  _atType_asc
  _atType_desc
  category_asc
  category_desc
  description_asc
  description_desc
  externalId_asc
  externalId_desc
  priority_asc
  priority_desc
  requestedCompletionDate_asc
  requestedCompletionDate_desc
  requestedStartDate_asc
  requestedStartDate_desc
  state_asc
  state_desc
  _id_asc
  _id_desc
}
type ServiceOrder {
  id: ID!
  _atType: String
  category: String
  description: String @search(by: [fulltext])
  externalId: String
  priority: String
  orderDate: String @search(by: [exact])
  startDate: String @search(by: [exact])
  requestedCompletionDate: String
  requestedStartDate: String
  state: String @search(by: [hash])
  externalReference: [ExternalReference]
  orderRelationship: [ServiceOrderRelationship]
  relatedParty:[Party] @hasInverse(field: serviceOrders)
  flowExecutionRef: FlowExecutionRef @hasInverse(field: serviceorders)
  cancelRequest: CancellationRequest @hasInverse(field: serviceorders)
  modifyRequest: [ModificationRequest] @hasInverse(field: serviceorders)
  serviceOrderItem: [ServiceOrderItem]
  note: [Note] @hasInverse(field: serviceorder)
}
enum _SupportingServiceOrdering {
  id_asc
  id_desc
  href_asc
  href_desc
  _atReferredType_asc
  _atReferredType_desc
  _atType_asc
  _atType_desc
  _id_asc
  _id_desc
}
enum _RelationDirections {
  IN
  OUT
}
type Subscriber {
        id: ID!
        callback: String
        topic: String@search(by: [hash])
}
# interface para Resource y ResourceReference
interface ResourceInt{
    name: String! @id @search(by: [hash])
}
# interface para Servicios y referencias de servicios
interface ServiceReference{
    href: String
}
type ServiceRef implements ServiceReference{
    id: String! @id
    href: String
    name: String
    supportingResource: [ResourceInt]
}

enum ActionTemplateType {
  AUTOMATION_FLOW
  CONFIGURATION_PARAMETER
}
type ActionTemplate{
  id:ID!
  name:String!
  type:ActionTemplateType!
  resourceSpecifications: String! @search(by: [hash])
  actionTemplateItem:[ActionTemplateItem!]!
}
type ActionTemplateItem{
  id:ID!
  parameters:ConfigurationParameterType!
  value:Parameter!
}
enum ActionSchedulerType {
  MANUAL_EXECUTION
  ONE_TIME_EXECUTION
  PERIODICAL_EXECUTION
}
enum ActionSchedulerStatus {
  ACTIVED
  DEACTIVATED
}
type ActionScheduler{
  id:ID!
  name:String!
  description:String!
  type:ActionSchedulerType!
  date: DateTime
  cron: String
  action:ActionExecution! @hasInverse(field: scheduler)
  status: ActionSchedulerStatus! 
}

enum ActionExecutionItemStatus {
  PENDING
  SUCCESSFULL
  FAILED
}

type ActionExecutionItem {
  id:ID!
  action: ActionExecution! @hasInverse(field: items)
  resource:Resource!
  status: ActionExecutionItemStatus
}

type ActionExecution {
  id:ID!
  scheduler:ActionScheduler
  template: ActionTemplate
  items: [ActionExecutionItem]
}