// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package symphony

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/facebookincubator/symphony/automation/enum"
	"time"
	"github.com/Khan/genqlient/graphql"
)

// APIHeader includes the requested fields of the GraphQL type VariableValue.
type APIHeader struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns APIHeader.Key, and is useful for accessing the field via an interface.
func (v *APIHeader) GetKey() string { return v.Key }

// GetValue returns APIHeader.Value, and is useful for accessing the field via an interface.
func (v *APIHeader) GetValue() string { return v.Value }

// AddBlockInstanceAddBlockInstance includes the requested fields of the GraphQL type BlockInstance.
type AddBlockInstanceAddBlockInstance struct {
	Id string `json:"id"`
}

// GetId returns AddBlockInstanceAddBlockInstance.Id, and is useful for accessing the field via an interface.
func (v *AddBlockInstanceAddBlockInstance) GetId() string { return v.Id }

type AddBlockInstanceInput struct {
	Status     enum.BlockInstanceStatus `json:"status"`
	InputJSON  *string                  `json:"inputJSON,omitempty"`
	OutputJSON *string                  `json:"outputJSON,omitempty"`
	BlockId    string                   `json:"blockId"`
	StartDate  time.Time                `json:"startDate"`
}

// GetStatus returns AddBlockInstanceInput.Status, and is useful for accessing the field via an interface.
func (v *AddBlockInstanceInput) GetStatus() enum.BlockInstanceStatus { return v.Status }

// GetInputJSON returns AddBlockInstanceInput.InputJSON, and is useful for accessing the field via an interface.
func (v *AddBlockInstanceInput) GetInputJSON() *string { return v.InputJSON }

// GetOutputJSON returns AddBlockInstanceInput.OutputJSON, and is useful for accessing the field via an interface.
func (v *AddBlockInstanceInput) GetOutputJSON() *string { return v.OutputJSON }

// GetBlockId returns AddBlockInstanceInput.BlockId, and is useful for accessing the field via an interface.
func (v *AddBlockInstanceInput) GetBlockId() string { return v.BlockId }

// GetStartDate returns AddBlockInstanceInput.StartDate, and is useful for accessing the field via an interface.
func (v *AddBlockInstanceInput) GetStartDate() time.Time { return v.StartDate }

// AddBlockInstanceResponse is returned by AddBlockInstance on success.
type AddBlockInstanceResponse struct {
	AddBlockInstance AddBlockInstanceAddBlockInstance `json:"addBlockInstance"`
}

// GetAddBlockInstance returns AddBlockInstanceResponse.AddBlockInstance, and is useful for accessing the field via an interface.
func (v *AddBlockInstanceResponse) GetAddBlockInstance() AddBlockInstanceAddBlockInstance {
	return v.AddBlockInstance
}

// BaseBlock includes the requested fields of the GraphQL type Block.
type BaseBlock struct {
	Id                              string              `json:"id"`
	EnableInputTransformation       bool                `json:"enableInputTransformation"`
	InputTransfStrategy             enum.TransfStrategy `json:"inputTransfStrategy"`
	InputTransformation             string              `json:"inputTransformation"`
	EnableOutputTransformation      bool                `json:"enableOutputTransformation"`
	OutputTransfStrategy            enum.TransfStrategy `json:"outputTransfStrategy"`
	OutputTransformation            string              `json:"outputTransformation"`
	EnableInputStateTransformation  bool                `json:"enableInputStateTransformation"`
	InputStateTransfStrategy        enum.TransfStrategy `json:"inputStateTransfStrategy"`
	InputStateTransformation        string              `json:"inputStateTransformation"`
	EnableOutputStateTransformation bool                `json:"enableOutputStateTransformation"`
	OutputStateTransfStrategy       enum.TransfStrategy `json:"outputStateTransfStrategy"`
	OutputStateTransformation       string              `json:"outputStateTransformation"`
	EnableErrorHandling             bool                `json:"enableErrorHandling"`
	EnableRetryPolicy               bool                `json:"enableRetryPolicy"`
	RetryInterval                   int                 `json:"retryInterval"`
	Units                           enum.RetryUnit      `json:"units"`
	MaxAttemps                      int                 `json:"maxAttemps"`
	BackoffRate                     int                 `json:"backoffRate"`
	Details                         BlockDetail         `json:"-"`
	NextBlocks                      []NextBlock         `json:"nextBlocks"`
}

// GetId returns BaseBlock.Id, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetId() string { return v.Id }

// GetEnableInputTransformation returns BaseBlock.EnableInputTransformation, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetEnableInputTransformation() bool { return v.EnableInputTransformation }

// GetInputTransfStrategy returns BaseBlock.InputTransfStrategy, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetInputTransfStrategy() enum.TransfStrategy { return v.InputTransfStrategy }

// GetInputTransformation returns BaseBlock.InputTransformation, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetInputTransformation() string { return v.InputTransformation }

// GetEnableOutputTransformation returns BaseBlock.EnableOutputTransformation, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetEnableOutputTransformation() bool { return v.EnableOutputTransformation }

// GetOutputTransfStrategy returns BaseBlock.OutputTransfStrategy, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetOutputTransfStrategy() enum.TransfStrategy { return v.OutputTransfStrategy }

// GetOutputTransformation returns BaseBlock.OutputTransformation, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetOutputTransformation() string { return v.OutputTransformation }

// GetEnableInputStateTransformation returns BaseBlock.EnableInputStateTransformation, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetEnableInputStateTransformation() bool { return v.EnableInputStateTransformation }

// GetInputStateTransfStrategy returns BaseBlock.InputStateTransfStrategy, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetInputStateTransfStrategy() enum.TransfStrategy {
	return v.InputStateTransfStrategy
}

// GetInputStateTransformation returns BaseBlock.InputStateTransformation, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetInputStateTransformation() string { return v.InputStateTransformation }

// GetEnableOutputStateTransformation returns BaseBlock.EnableOutputStateTransformation, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetEnableOutputStateTransformation() bool {
	return v.EnableOutputStateTransformation
}

// GetOutputStateTransfStrategy returns BaseBlock.OutputStateTransfStrategy, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetOutputStateTransfStrategy() enum.TransfStrategy {
	return v.OutputStateTransfStrategy
}

// GetOutputStateTransformation returns BaseBlock.OutputStateTransformation, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetOutputStateTransformation() string { return v.OutputStateTransformation }

// GetEnableErrorHandling returns BaseBlock.EnableErrorHandling, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetEnableErrorHandling() bool { return v.EnableErrorHandling }

// GetEnableRetryPolicy returns BaseBlock.EnableRetryPolicy, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetEnableRetryPolicy() bool { return v.EnableRetryPolicy }

// GetRetryInterval returns BaseBlock.RetryInterval, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetRetryInterval() int { return v.RetryInterval }

// GetUnits returns BaseBlock.Units, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetUnits() enum.RetryUnit { return v.Units }

// GetMaxAttemps returns BaseBlock.MaxAttemps, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetMaxAttemps() int { return v.MaxAttemps }

// GetBackoffRate returns BaseBlock.BackoffRate, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetBackoffRate() int { return v.BackoffRate }

// GetDetails returns BaseBlock.Details, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetDetails() BlockDetail { return v.Details }

// GetNextBlocks returns BaseBlock.NextBlocks, and is useful for accessing the field via an interface.
func (v *BaseBlock) GetNextBlocks() []NextBlock { return v.NextBlocks }

func (v *BaseBlock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BaseBlock
		Details json.RawMessage `json:"details"`
		graphql.NoUnmarshalJSON
	}
	firstPass.BaseBlock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Details
		src := firstPass.Details
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalBlockDetail(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal BaseBlock.Details: %w", err)
			}
		}
	}
	return nil
}

type __premarshalBaseBlock struct {
	Id string `json:"id"`

	EnableInputTransformation bool `json:"enableInputTransformation"`

	InputTransfStrategy enum.TransfStrategy `json:"inputTransfStrategy"`

	InputTransformation string `json:"inputTransformation"`

	EnableOutputTransformation bool `json:"enableOutputTransformation"`

	OutputTransfStrategy enum.TransfStrategy `json:"outputTransfStrategy"`

	OutputTransformation string `json:"outputTransformation"`

	EnableInputStateTransformation bool `json:"enableInputStateTransformation"`

	InputStateTransfStrategy enum.TransfStrategy `json:"inputStateTransfStrategy"`

	InputStateTransformation string `json:"inputStateTransformation"`

	EnableOutputStateTransformation bool `json:"enableOutputStateTransformation"`

	OutputStateTransfStrategy enum.TransfStrategy `json:"outputStateTransfStrategy"`

	OutputStateTransformation string `json:"outputStateTransformation"`

	EnableErrorHandling bool `json:"enableErrorHandling"`

	EnableRetryPolicy bool `json:"enableRetryPolicy"`

	RetryInterval int `json:"retryInterval"`

	Units enum.RetryUnit `json:"units"`

	MaxAttemps int `json:"maxAttemps"`

	BackoffRate int `json:"backoffRate"`

	Details json.RawMessage `json:"details"`

	NextBlocks []NextBlock `json:"nextBlocks"`
}

func (v *BaseBlock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BaseBlock) __premarshalJSON() (*__premarshalBaseBlock, error) {
	var retval __premarshalBaseBlock

	retval.Id = v.Id
	retval.EnableInputTransformation = v.EnableInputTransformation
	retval.InputTransfStrategy = v.InputTransfStrategy
	retval.InputTransformation = v.InputTransformation
	retval.EnableOutputTransformation = v.EnableOutputTransformation
	retval.OutputTransfStrategy = v.OutputTransfStrategy
	retval.OutputTransformation = v.OutputTransformation
	retval.EnableInputStateTransformation = v.EnableInputStateTransformation
	retval.InputStateTransfStrategy = v.InputStateTransfStrategy
	retval.InputStateTransformation = v.InputStateTransformation
	retval.EnableOutputStateTransformation = v.EnableOutputStateTransformation
	retval.OutputStateTransfStrategy = v.OutputStateTransfStrategy
	retval.OutputStateTransformation = v.OutputStateTransformation
	retval.EnableErrorHandling = v.EnableErrorHandling
	retval.EnableRetryPolicy = v.EnableRetryPolicy
	retval.RetryInterval = v.RetryInterval
	retval.Units = v.Units
	retval.MaxAttemps = v.MaxAttemps
	retval.BackoffRate = v.BackoffRate
	{

		dst := &retval.Details
		src := v.Details
		var err error
		*dst, err = __marshalBlockDetail(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal BaseBlock.Details: %w", err)
		}
	}
	retval.NextBlocks = v.NextBlocks
	return &retval, nil
}

// BlockDetail includes the requested fields of the GraphQL interface BlockDetails.
//
// BlockDetail is implemented by the following types:
// BlockDetailStartBlock
// BlockDetailEndBlock
// BlockDetailGotoBlock
// BlockDetailChoiceBlock
// BlockDetailTimerBlock
// BlockDetailWaitForSignalBlock
// BlockDetailInvokeRestAPIBlock
// BlockDetailExecuteFlowBlock
// BlockDetailForEachBlock
// BlockDetailParallelBlock
// BlockDetailKafkaBlock
type BlockDetail interface {
	implementsGraphQLInterfaceBlockDetail()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *BlockDetailStartBlock) implementsGraphQLInterfaceBlockDetail()         {}
func (v *BlockDetailEndBlock) implementsGraphQLInterfaceBlockDetail()           {}
func (v *BlockDetailGotoBlock) implementsGraphQLInterfaceBlockDetail()          {}
func (v *BlockDetailChoiceBlock) implementsGraphQLInterfaceBlockDetail()        {}
func (v *BlockDetailTimerBlock) implementsGraphQLInterfaceBlockDetail()         {}
func (v *BlockDetailWaitForSignalBlock) implementsGraphQLInterfaceBlockDetail() {}
func (v *BlockDetailInvokeRestAPIBlock) implementsGraphQLInterfaceBlockDetail() {}
func (v *BlockDetailExecuteFlowBlock) implementsGraphQLInterfaceBlockDetail()   {}
func (v *BlockDetailForEachBlock) implementsGraphQLInterfaceBlockDetail()       {}
func (v *BlockDetailParallelBlock) implementsGraphQLInterfaceBlockDetail()      {}
func (v *BlockDetailKafkaBlock) implementsGraphQLInterfaceBlockDetail()         {}

func __unmarshalBlockDetail(b []byte, v *BlockDetail) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "StartBlock":
		*v = new(BlockDetailStartBlock)
		return json.Unmarshal(b, *v)
	case "EndBlock":
		*v = new(BlockDetailEndBlock)
		return json.Unmarshal(b, *v)
	case "GotoBlock":
		*v = new(BlockDetailGotoBlock)
		return json.Unmarshal(b, *v)
	case "ChoiceBlock":
		*v = new(BlockDetailChoiceBlock)
		return json.Unmarshal(b, *v)
	case "TimerBlock":
		*v = new(BlockDetailTimerBlock)
		return json.Unmarshal(b, *v)
	case "WaitForSignalBlock":
		*v = new(BlockDetailWaitForSignalBlock)
		return json.Unmarshal(b, *v)
	case "InvokeRestAPIBlock":
		*v = new(BlockDetailInvokeRestAPIBlock)
		return json.Unmarshal(b, *v)
	case "ExecuteFlowBlock":
		*v = new(BlockDetailExecuteFlowBlock)
		return json.Unmarshal(b, *v)
	case "ForEachBlock":
		*v = new(BlockDetailForEachBlock)
		return json.Unmarshal(b, *v)
	case "ParallelBlock":
		*v = new(BlockDetailParallelBlock)
		return json.Unmarshal(b, *v)
	case "KafkaBlock":
		*v = new(BlockDetailKafkaBlock)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing BlockDetails.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for BlockDetail: "%v"`, tn.TypeName)
	}
}

func __marshalBlockDetail(v *BlockDetail) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *BlockDetailStartBlock:
		typename = "StartBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailStartBlock
		}{typename, v}
		return json.Marshal(result)
	case *BlockDetailEndBlock:
		typename = "EndBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailEndBlock
		}{typename, v}
		return json.Marshal(result)
	case *BlockDetailGotoBlock:
		typename = "GotoBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailGotoBlock
		}{typename, v}
		return json.Marshal(result)
	case *BlockDetailChoiceBlock:
		typename = "ChoiceBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailChoiceBlock
		}{typename, v}
		return json.Marshal(result)
	case *BlockDetailTimerBlock:
		typename = "TimerBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailTimerBlock
		}{typename, v}
		return json.Marshal(result)
	case *BlockDetailWaitForSignalBlock:
		typename = "WaitForSignalBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailWaitForSignalBlock
		}{typename, v}
		return json.Marshal(result)
	case *BlockDetailInvokeRestAPIBlock:
		typename = "InvokeRestAPIBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailInvokeRestAPIBlock
		}{typename, v}
		return json.Marshal(result)
	case *BlockDetailExecuteFlowBlock:
		typename = "ExecuteFlowBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailExecuteFlowBlock
		}{typename, v}
		return json.Marshal(result)
	case *BlockDetailForEachBlock:
		typename = "ForEachBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailForEachBlock
		}{typename, v}
		return json.Marshal(result)
	case *BlockDetailParallelBlock:
		typename = "ParallelBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailParallelBlock
		}{typename, v}
		return json.Marshal(result)
	case *BlockDetailKafkaBlock:
		typename = "KafkaBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*BlockDetailKafkaBlock
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for BlockDetail: "%T"`, v)
	}
}

// BlockDetailChoiceBlock includes the requested fields of the GraphQL type ChoiceBlock.
type BlockDetailChoiceBlock struct {
	Typename         string                 `json:"__typename"`
	Rules            []ChoiceRule           `json:"rules"`
	DefaultExitPoint ChoiceDefaultExitPoint `json:"defaultExitPoint"`
}

// GetTypename returns BlockDetailChoiceBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailChoiceBlock) GetTypename() string { return v.Typename }

// GetRules returns BlockDetailChoiceBlock.Rules, and is useful for accessing the field via an interface.
func (v *BlockDetailChoiceBlock) GetRules() []ChoiceRule { return v.Rules }

// GetDefaultExitPoint returns BlockDetailChoiceBlock.DefaultExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailChoiceBlock) GetDefaultExitPoint() ChoiceDefaultExitPoint {
	return v.DefaultExitPoint
}

// BlockDetailEndBlock includes the requested fields of the GraphQL type EndBlock.
type BlockDetailEndBlock struct {
	Typename string  `json:"__typename"`
	Params   []Param `json:"params"`
}

// GetTypename returns BlockDetailEndBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailEndBlock) GetTypename() string { return v.Typename }

// GetParams returns BlockDetailEndBlock.Params, and is useful for accessing the field via an interface.
func (v *BlockDetailEndBlock) GetParams() []Param { return v.Params }

// BlockDetailExecuteFlowBlock includes the requested fields of the GraphQL type ExecuteFlowBlock.
type BlockDetailExecuteFlowBlock struct {
	Typename  string    `json:"__typename"`
	Flow      SubFlow   `json:"flow"`
	ExitPoint ExitPoint `json:"exitPoint"`
}

// GetTypename returns BlockDetailExecuteFlowBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailExecuteFlowBlock) GetTypename() string { return v.Typename }

// GetFlow returns BlockDetailExecuteFlowBlock.Flow, and is useful for accessing the field via an interface.
func (v *BlockDetailExecuteFlowBlock) GetFlow() SubFlow { return v.Flow }

// GetExitPoint returns BlockDetailExecuteFlowBlock.ExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailExecuteFlowBlock) GetExitPoint() ExitPoint { return v.ExitPoint }

// BlockDetailForEachBlock includes the requested fields of the GraphQL type ForEachBlock.
type BlockDetailForEachBlock struct {
	Typename          string            `json:"__typename"`
	InternalExitPoint InternalExitPoint `json:"internalExitPoint"`
	ExitPoint         ExitPoint         `json:"exitPoint"`
}

// GetTypename returns BlockDetailForEachBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailForEachBlock) GetTypename() string { return v.Typename }

// GetInternalExitPoint returns BlockDetailForEachBlock.InternalExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailForEachBlock) GetInternalExitPoint() InternalExitPoint {
	return v.InternalExitPoint
}

// GetExitPoint returns BlockDetailForEachBlock.ExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailForEachBlock) GetExitPoint() ExitPoint { return v.ExitPoint }

// BlockDetailGotoBlock includes the requested fields of the GraphQL type GotoBlock.
type BlockDetailGotoBlock struct {
	Typename string     `json:"__typename"`
	Target   GotoTarget `json:"target"`
}

// GetTypename returns BlockDetailGotoBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailGotoBlock) GetTypename() string { return v.Typename }

// GetTarget returns BlockDetailGotoBlock.Target, and is useful for accessing the field via an interface.
func (v *BlockDetailGotoBlock) GetTarget() GotoTarget { return v.Target }

// BlockDetailInvokeRestAPIBlock includes the requested fields of the GraphQL type InvokeRestAPIBlock.
type BlockDetailInvokeRestAPIBlock struct {
	Typename     string         `json:"__typename"`
	AuthType     enum.AuthType  `json:"authType"`
	User         string         `json:"user"`
	Password     string         `json:"password"`
	ClientId     string         `json:"clientId"`
	ClientSecret string         `json:"clientSecret"`
	OidcUrl      string         `json:"oidcUrl"`
	Url          string         `json:"url"`
	Method       enum.UrlMethod `json:"method"`
	Body         string         `json:"body"`
	Timeout      int            `json:"timeout"`
	Headers      []APIHeader    `json:"headers"`
	ExitPoint    ExitPoint      `json:"exitPoint"`
}

// GetTypename returns BlockDetailInvokeRestAPIBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetTypename() string { return v.Typename }

// GetAuthType returns BlockDetailInvokeRestAPIBlock.AuthType, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetAuthType() enum.AuthType { return v.AuthType }

// GetUser returns BlockDetailInvokeRestAPIBlock.User, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetUser() string { return v.User }

// GetPassword returns BlockDetailInvokeRestAPIBlock.Password, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetPassword() string { return v.Password }

// GetClientId returns BlockDetailInvokeRestAPIBlock.ClientId, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetClientId() string { return v.ClientId }

// GetClientSecret returns BlockDetailInvokeRestAPIBlock.ClientSecret, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetClientSecret() string { return v.ClientSecret }

// GetOidcUrl returns BlockDetailInvokeRestAPIBlock.OidcUrl, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetOidcUrl() string { return v.OidcUrl }

// GetUrl returns BlockDetailInvokeRestAPIBlock.Url, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetUrl() string { return v.Url }

// GetMethod returns BlockDetailInvokeRestAPIBlock.Method, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetMethod() enum.UrlMethod { return v.Method }

// GetBody returns BlockDetailInvokeRestAPIBlock.Body, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetBody() string { return v.Body }

// GetTimeout returns BlockDetailInvokeRestAPIBlock.Timeout, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetTimeout() int { return v.Timeout }

// GetHeaders returns BlockDetailInvokeRestAPIBlock.Headers, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetHeaders() []APIHeader { return v.Headers }

// GetExitPoint returns BlockDetailInvokeRestAPIBlock.ExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailInvokeRestAPIBlock) GetExitPoint() ExitPoint { return v.ExitPoint }

// BlockDetailKafkaBlock includes the requested fields of the GraphQL type KafkaBlock.
type BlockDetailKafkaBlock struct {
	Typename    string                `json:"__typename"`
	Brokers     []string              `json:"brokers"`
	Topic       string                `json:"topic"`
	Message     string                `json:"message"`
	MessageType enum.KafkaMessageType `json:"messageType"`
	ExitPoint   ExitPoint             `json:"exitPoint"`
}

// GetTypename returns BlockDetailKafkaBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailKafkaBlock) GetTypename() string { return v.Typename }

// GetBrokers returns BlockDetailKafkaBlock.Brokers, and is useful for accessing the field via an interface.
func (v *BlockDetailKafkaBlock) GetBrokers() []string { return v.Brokers }

// GetTopic returns BlockDetailKafkaBlock.Topic, and is useful for accessing the field via an interface.
func (v *BlockDetailKafkaBlock) GetTopic() string { return v.Topic }

// GetMessage returns BlockDetailKafkaBlock.Message, and is useful for accessing the field via an interface.
func (v *BlockDetailKafkaBlock) GetMessage() string { return v.Message }

// GetMessageType returns BlockDetailKafkaBlock.MessageType, and is useful for accessing the field via an interface.
func (v *BlockDetailKafkaBlock) GetMessageType() enum.KafkaMessageType { return v.MessageType }

// GetExitPoint returns BlockDetailKafkaBlock.ExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailKafkaBlock) GetExitPoint() ExitPoint { return v.ExitPoint }

// BlockDetailParallelBlock includes the requested fields of the GraphQL type ParallelBlock.
type BlockDetailParallelBlock struct {
	Typename          string            `json:"__typename"`
	InternalExitPoint InternalExitPoint `json:"internalExitPoint"`
	ExitPoint         ExitPoint         `json:"exitPoint"`
}

// GetTypename returns BlockDetailParallelBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailParallelBlock) GetTypename() string { return v.Typename }

// GetInternalExitPoint returns BlockDetailParallelBlock.InternalExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailParallelBlock) GetInternalExitPoint() InternalExitPoint {
	return v.InternalExitPoint
}

// GetExitPoint returns BlockDetailParallelBlock.ExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailParallelBlock) GetExitPoint() ExitPoint { return v.ExitPoint }

// BlockDetailStartBlock includes the requested fields of the GraphQL type StartBlock.
type BlockDetailStartBlock struct {
	Typename  string    `json:"__typename"`
	ExitPoint ExitPoint `json:"exitPoint"`
}

// GetTypename returns BlockDetailStartBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailStartBlock) GetTypename() string { return v.Typename }

// GetExitPoint returns BlockDetailStartBlock.ExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailStartBlock) GetExitPoint() ExitPoint { return v.ExitPoint }

// BlockDetailTimerBlock includes the requested fields of the GraphQL type TimerBlock.
type BlockDetailTimerBlock struct {
	Typename          string             `json:"__typename"`
	Behavior          enum.TimerBehavior `json:"behavior"`
	Seconds           int                `json:"seconds"`
	Datetime          time.Time          `json:"datetime"`
	EnableExpressionL bool               `json:"enableExpressionL"`
	Expression        string             `json:"expression"`
	ExitPoint         ExitPoint          `json:"exitPoint"`
}

// GetTypename returns BlockDetailTimerBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailTimerBlock) GetTypename() string { return v.Typename }

// GetBehavior returns BlockDetailTimerBlock.Behavior, and is useful for accessing the field via an interface.
func (v *BlockDetailTimerBlock) GetBehavior() enum.TimerBehavior { return v.Behavior }

// GetSeconds returns BlockDetailTimerBlock.Seconds, and is useful for accessing the field via an interface.
func (v *BlockDetailTimerBlock) GetSeconds() int { return v.Seconds }

// GetDatetime returns BlockDetailTimerBlock.Datetime, and is useful for accessing the field via an interface.
func (v *BlockDetailTimerBlock) GetDatetime() time.Time { return v.Datetime }

// GetEnableExpressionL returns BlockDetailTimerBlock.EnableExpressionL, and is useful for accessing the field via an interface.
func (v *BlockDetailTimerBlock) GetEnableExpressionL() bool { return v.EnableExpressionL }

// GetExpression returns BlockDetailTimerBlock.Expression, and is useful for accessing the field via an interface.
func (v *BlockDetailTimerBlock) GetExpression() string { return v.Expression }

// GetExitPoint returns BlockDetailTimerBlock.ExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailTimerBlock) GetExitPoint() ExitPoint { return v.ExitPoint }

// BlockDetailWaitForSignalBlock includes the requested fields of the GraphQL type WaitForSignalBlock.
type BlockDetailWaitForSignalBlock struct {
	Typename     string            `json:"__typename"`
	Type         enum.SignalType   `json:"type"`
	SignalModule enum.SignalModule `json:"signalModule"`
	CustomFilter string            `json:"customFilter"`
	Blocked      bool              `json:"blocked"`
	ExitPoint    ExitPoint         `json:"exitPoint"`
}

// GetTypename returns BlockDetailWaitForSignalBlock.Typename, and is useful for accessing the field via an interface.
func (v *BlockDetailWaitForSignalBlock) GetTypename() string { return v.Typename }

// GetType returns BlockDetailWaitForSignalBlock.Type, and is useful for accessing the field via an interface.
func (v *BlockDetailWaitForSignalBlock) GetType() enum.SignalType { return v.Type }

// GetSignalModule returns BlockDetailWaitForSignalBlock.SignalModule, and is useful for accessing the field via an interface.
func (v *BlockDetailWaitForSignalBlock) GetSignalModule() enum.SignalModule { return v.SignalModule }

// GetCustomFilter returns BlockDetailWaitForSignalBlock.CustomFilter, and is useful for accessing the field via an interface.
func (v *BlockDetailWaitForSignalBlock) GetCustomFilter() string { return v.CustomFilter }

// GetBlocked returns BlockDetailWaitForSignalBlock.Blocked, and is useful for accessing the field via an interface.
func (v *BlockDetailWaitForSignalBlock) GetBlocked() bool { return v.Blocked }

// GetExitPoint returns BlockDetailWaitForSignalBlock.ExitPoint, and is useful for accessing the field via an interface.
func (v *BlockDetailWaitForSignalBlock) GetExitPoint() ExitPoint { return v.ExitPoint }

// ChoiceDefaultExitPoint includes the requested fields of the GraphQL type ExitPoint.
type ChoiceDefaultExitPoint struct {
	NextEntryPoints []EntryPoint `json:"nextEntryPoints"`
}

// GetNextEntryPoints returns ChoiceDefaultExitPoint.NextEntryPoints, and is useful for accessing the field via an interface.
func (v *ChoiceDefaultExitPoint) GetNextEntryPoints() []EntryPoint { return v.NextEntryPoints }

// ChoiceRule includes the requested fields of the GraphQL type DecisionRoute.
type ChoiceRule struct {
	ExitPoint ChoiceRuleExitPoint `json:"exitPoint"`
}

// GetExitPoint returns ChoiceRule.ExitPoint, and is useful for accessing the field via an interface.
func (v *ChoiceRule) GetExitPoint() ChoiceRuleExitPoint { return v.ExitPoint }

// ChoiceRuleCondition includes the requested fields of the GraphQL type VariableExpression.
type ChoiceRuleCondition struct {
	Expression string `json:"expression"`
}

// GetExpression returns ChoiceRuleCondition.Expression, and is useful for accessing the field via an interface.
func (v *ChoiceRuleCondition) GetExpression() string { return v.Expression }

// ChoiceRuleExitPoint includes the requested fields of the GraphQL type ExitPoint.
type ChoiceRuleExitPoint struct {
	Index           int                 `json:"index"`
	Condition       ChoiceRuleCondition `json:"condition"`
	NextEntryPoints []EntryPoint        `json:"nextEntryPoints"`
}

// GetIndex returns ChoiceRuleExitPoint.Index, and is useful for accessing the field via an interface.
func (v *ChoiceRuleExitPoint) GetIndex() int { return v.Index }

// GetCondition returns ChoiceRuleExitPoint.Condition, and is useful for accessing the field via an interface.
func (v *ChoiceRuleExitPoint) GetCondition() ChoiceRuleCondition { return v.Condition }

// GetNextEntryPoints returns ChoiceRuleExitPoint.NextEntryPoints, and is useful for accessing the field via an interface.
func (v *ChoiceRuleExitPoint) GetNextEntryPoints() []EntryPoint { return v.NextEntryPoints }

// EditBlockInstanceEditBlockInstance includes the requested fields of the GraphQL type BlockInstance.
type EditBlockInstanceEditBlockInstance struct {
	Id string `json:"id"`
}

// GetId returns EditBlockInstanceEditBlockInstance.Id, and is useful for accessing the field via an interface.
func (v *EditBlockInstanceEditBlockInstance) GetId() string { return v.Id }

type EditBlockInstanceInput struct {
	Id             string                    `json:"id"`
	Status         *enum.BlockInstanceStatus `json:"status,omitempty"`
	InputJSON      *string                   `json:"inputJSON,omitempty"`
	OutputJSON     *string                   `json:"outputJSON,omitempty"`
	Failure_reason *string                   `json:"failure_reason,omitempty"`
	EndDate        *time.Time                `json:"endDate,omitempty"`
}

// GetId returns EditBlockInstanceInput.Id, and is useful for accessing the field via an interface.
func (v *EditBlockInstanceInput) GetId() string { return v.Id }

// GetStatus returns EditBlockInstanceInput.Status, and is useful for accessing the field via an interface.
func (v *EditBlockInstanceInput) GetStatus() *enum.BlockInstanceStatus { return v.Status }

// GetInputJSON returns EditBlockInstanceInput.InputJSON, and is useful for accessing the field via an interface.
func (v *EditBlockInstanceInput) GetInputJSON() *string { return v.InputJSON }

// GetOutputJSON returns EditBlockInstanceInput.OutputJSON, and is useful for accessing the field via an interface.
func (v *EditBlockInstanceInput) GetOutputJSON() *string { return v.OutputJSON }

// GetFailure_reason returns EditBlockInstanceInput.Failure_reason, and is useful for accessing the field via an interface.
func (v *EditBlockInstanceInput) GetFailure_reason() *string { return v.Failure_reason }

// GetEndDate returns EditBlockInstanceInput.EndDate, and is useful for accessing the field via an interface.
func (v *EditBlockInstanceInput) GetEndDate() *time.Time { return v.EndDate }

// EditBlockInstanceResponse is returned by EditBlockInstance on success.
type EditBlockInstanceResponse struct {
	EditBlockInstance EditBlockInstanceEditBlockInstance `json:"editBlockInstance"`
}

// GetEditBlockInstance returns EditBlockInstanceResponse.EditBlockInstance, and is useful for accessing the field via an interface.
func (v *EditBlockInstanceResponse) GetEditBlockInstance() EditBlockInstanceEditBlockInstance {
	return v.EditBlockInstance
}

// EditFlowInstanceEditFlowInstance includes the requested fields of the GraphQL type FlowInstance.
type EditFlowInstanceEditFlowInstance struct {
	Id string `json:"id"`
}

// GetId returns EditFlowInstanceEditFlowInstance.Id, and is useful for accessing the field via an interface.
func (v *EditFlowInstanceEditFlowInstance) GetId() string { return v.Id }

type EditFlowInstanceInput struct {
	Id                  string                   `json:"id"`
	BssCode             *string                  `json:"bssCode,omitempty"`
	ServiceInstanceCode *string                  `json:"serviceInstanceCode,omitempty"`
	Status              *enum.FlowInstanceStatus `json:"status,omitempty"`
	EndDate             *time.Time               `json:"endDate,omitempty"`
}

// GetId returns EditFlowInstanceInput.Id, and is useful for accessing the field via an interface.
func (v *EditFlowInstanceInput) GetId() string { return v.Id }

// GetBssCode returns EditFlowInstanceInput.BssCode, and is useful for accessing the field via an interface.
func (v *EditFlowInstanceInput) GetBssCode() *string { return v.BssCode }

// GetServiceInstanceCode returns EditFlowInstanceInput.ServiceInstanceCode, and is useful for accessing the field via an interface.
func (v *EditFlowInstanceInput) GetServiceInstanceCode() *string { return v.ServiceInstanceCode }

// GetStatus returns EditFlowInstanceInput.Status, and is useful for accessing the field via an interface.
func (v *EditFlowInstanceInput) GetStatus() *enum.FlowInstanceStatus { return v.Status }

// GetEndDate returns EditFlowInstanceInput.EndDate, and is useful for accessing the field via an interface.
func (v *EditFlowInstanceInput) GetEndDate() *time.Time { return v.EndDate }

// EditFlowInstanceResponse is returned by EditFlowInstance on success.
type EditFlowInstanceResponse struct {
	EditFlowInstance EditFlowInstanceEditFlowInstance `json:"editFlowInstance"`
}

// GetEditFlowInstance returns EditFlowInstanceResponse.EditFlowInstance, and is useful for accessing the field via an interface.
func (v *EditFlowInstanceResponse) GetEditFlowInstance() EditFlowInstanceEditFlowInstance {
	return v.EditFlowInstance
}

// EntryPoint includes the requested fields of the GraphQL type EntryPoint.
type EntryPoint struct {
	ParentBlock ParentBlock `json:"parentBlock"`
}

// GetParentBlock returns EntryPoint.ParentBlock, and is useful for accessing the field via an interface.
func (v *EntryPoint) GetParentBlock() ParentBlock { return v.ParentBlock }

// ExitPoint includes the requested fields of the GraphQL type ExitPoint.
type ExitPoint struct {
	NextEntryPoints []EntryPoint `json:"nextEntryPoints"`
}

// GetNextEntryPoints returns ExitPoint.NextEntryPoints, and is useful for accessing the field via an interface.
func (v *ExitPoint) GetNextEntryPoints() []EntryPoint { return v.NextEntryPoints }

// FlowInstance includes the requested fields of the GraphQL type FlowInstance.
type FlowInstance struct {
	Typename    string                                 `json:"__typename"`
	Id          string                                 `json:"id"`
	StartParams []FlowInstanceStartParamsVariableValue `json:"startParams"`
	Template    FlowTemplate                           `json:"template"`
}

// GetTypename returns FlowInstance.Typename, and is useful for accessing the field via an interface.
func (v *FlowInstance) GetTypename() string { return v.Typename }

// GetId returns FlowInstance.Id, and is useful for accessing the field via an interface.
func (v *FlowInstance) GetId() string { return v.Id }

// GetStartParams returns FlowInstance.StartParams, and is useful for accessing the field via an interface.
func (v *FlowInstance) GetStartParams() []FlowInstanceStartParamsVariableValue { return v.StartParams }

// GetTemplate returns FlowInstance.Template, and is useful for accessing the field via an interface.
func (v *FlowInstance) GetTemplate() FlowTemplate { return v.Template }

// FlowInstanceQueryResponse is returned by FlowInstanceQuery on success.
type FlowInstanceQueryResponse struct {
	FlowInstance FlowInstance `json:"flowInstance"`
}

// GetFlowInstance returns FlowInstanceQueryResponse.FlowInstance, and is useful for accessing the field via an interface.
func (v *FlowInstanceQueryResponse) GetFlowInstance() FlowInstance { return v.FlowInstance }

// FlowInstanceStartParamsVariableValue includes the requested fields of the GraphQL type VariableValue.
type FlowInstanceStartParamsVariableValue struct {
	VariableDefinitionKey string `json:"variableDefinitionKey"`
	Value                 string `json:"value"`
}

// GetVariableDefinitionKey returns FlowInstanceStartParamsVariableValue.VariableDefinitionKey, and is useful for accessing the field via an interface.
func (v *FlowInstanceStartParamsVariableValue) GetVariableDefinitionKey() string {
	return v.VariableDefinitionKey
}

// GetValue returns FlowInstanceStartParamsVariableValue.Value, and is useful for accessing the field via an interface.
func (v *FlowInstanceStartParamsVariableValue) GetValue() string { return v.Value }

// FlowTemplate includes the requested fields of the GraphQL type FlowExecutionTemplate.
type FlowTemplate struct {
	Id     string      `json:"id"`
	Blocks []BaseBlock `json:"blocks"`
}

// GetId returns FlowTemplate.Id, and is useful for accessing the field via an interface.
func (v *FlowTemplate) GetId() string { return v.Id }

// GetBlocks returns FlowTemplate.Blocks, and is useful for accessing the field via an interface.
func (v *FlowTemplate) GetBlocks() []BaseBlock { return v.Blocks }

// GotoTarget includes the requested fields of the GraphQL type Block.
type GotoTarget struct {
	Id string `json:"id"`
}

// GetId returns GotoTarget.Id, and is useful for accessing the field via an interface.
func (v *GotoTarget) GetId() string { return v.Id }

// InternalExitPoint includes the requested fields of the GraphQL type ExitPoint.
type InternalExitPoint struct {
	NextEntryPoints []EntryPoint `json:"nextEntryPoints"`
}

// GetNextEntryPoints returns InternalExitPoint.NextEntryPoints, and is useful for accessing the field via an interface.
func (v *InternalExitPoint) GetNextEntryPoints() []EntryPoint { return v.NextEntryPoints }

// NextBlock includes the requested fields of the GraphQL type Block.
type NextBlock struct {
	Id string `json:"id"`
}

// GetId returns NextBlock.Id, and is useful for accessing the field via an interface.
func (v *NextBlock) GetId() string { return v.Id }

// Param includes the requested fields of the GraphQL type VariableExpression.
type Param struct {
	Expression string `json:"expression"`
}

// GetExpression returns Param.Expression, and is useful for accessing the field via an interface.
func (v *Param) GetExpression() string { return v.Expression }

// ParentBlock includes the requested fields of the GraphQL type Block.
type ParentBlock struct {
	Id string `json:"id"`
}

// GetId returns ParentBlock.Id, and is useful for accessing the field via an interface.
func (v *ParentBlock) GetId() string { return v.Id }

// SubFlow includes the requested fields of the GraphQL type Flow.
type SubFlow struct {
	Id string `json:"id"`
}

// GetId returns SubFlow.Id, and is useful for accessing the field via an interface.
func (v *SubFlow) GetId() string { return v.Id }

// __AddBlockInstanceInput is used internally by genqlient
type __AddBlockInstanceInput struct {
	FlowInstanceID string                `json:"flowInstanceID"`
	BlockInput     AddBlockInstanceInput `json:"blockInput"`
}

// GetFlowInstanceID returns __AddBlockInstanceInput.FlowInstanceID, and is useful for accessing the field via an interface.
func (v *__AddBlockInstanceInput) GetFlowInstanceID() string { return v.FlowInstanceID }

// GetBlockInput returns __AddBlockInstanceInput.BlockInput, and is useful for accessing the field via an interface.
func (v *__AddBlockInstanceInput) GetBlockInput() AddBlockInstanceInput { return v.BlockInput }

// __EditBlockInstanceInput is used internally by genqlient
type __EditBlockInstanceInput struct {
	BlockInput EditBlockInstanceInput `json:"blockInput"`
}

// GetBlockInput returns __EditBlockInstanceInput.BlockInput, and is useful for accessing the field via an interface.
func (v *__EditBlockInstanceInput) GetBlockInput() EditBlockInstanceInput { return v.BlockInput }

// __EditFlowInstanceInput is used internally by genqlient
type __EditFlowInstanceInput struct {
	FlowInput EditFlowInstanceInput `json:"flowInput"`
}

// GetFlowInput returns __EditFlowInstanceInput.FlowInput, and is useful for accessing the field via an interface.
func (v *__EditFlowInstanceInput) GetFlowInput() EditFlowInstanceInput { return v.FlowInput }

// __FlowInstanceQueryInput is used internally by genqlient
type __FlowInstanceQueryInput struct {
	FlowInstanceID string `json:"flowInstanceID"`
}

// GetFlowInstanceID returns __FlowInstanceQueryInput.FlowInstanceID, and is useful for accessing the field via an interface.
func (v *__FlowInstanceQueryInput) GetFlowInstanceID() string { return v.FlowInstanceID }

func AddBlockInstance(
	ctx context.Context,
	client graphql.Client,
	flowInstanceID string,
	blockInput AddBlockInstanceInput,
) (*AddBlockInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "AddBlockInstance",
		Query: `
mutation AddBlockInstance ($flowInstanceID: ID!, $blockInput: AddBlockInstanceInput!) {
	addBlockInstance(flowInstanceId: $flowInstanceID, input: $blockInput) {
		id
	}
}
`,
		Variables: &__AddBlockInstanceInput{
			FlowInstanceID: flowInstanceID,
			BlockInput:     blockInput,
		},
	}
	var err error

	var data AddBlockInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func EditBlockInstance(
	ctx context.Context,
	client graphql.Client,
	blockInput EditBlockInstanceInput,
) (*EditBlockInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "EditBlockInstance",
		Query: `
mutation EditBlockInstance ($blockInput: EditBlockInstanceInput!) {
	editBlockInstance(input: $blockInput) {
		id
	}
}
`,
		Variables: &__EditBlockInstanceInput{
			BlockInput: blockInput,
		},
	}
	var err error

	var data EditBlockInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func EditFlowInstance(
	ctx context.Context,
	client graphql.Client,
	flowInput EditFlowInstanceInput,
) (*EditFlowInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "EditFlowInstance",
		Query: `
mutation EditFlowInstance ($flowInput: EditFlowInstanceInput!) {
	editFlowInstance(input: $flowInput) {
		id
	}
}
`,
		Variables: &__EditFlowInstanceInput{
			FlowInput: flowInput,
		},
	}
	var err error

	var data EditFlowInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func FlowInstanceQuery(
	ctx context.Context,
	client graphql.Client,
	flowInstanceID string,
) (*FlowInstanceQueryResponse, error) {
	req := &graphql.Request{
		OpName: "FlowInstanceQuery",
		Query: `
query FlowInstanceQuery ($flowInstanceID: ID!) {
	flowInstance: node(id: $flowInstanceID) {
		__typename
		... on FlowInstance {
			id
			startParams {
				variableDefinitionKey
				value
			}
			template {
				id
				blocks {
					id
					enableInputTransformation
					inputTransfStrategy
					inputTransformation
					enableOutputTransformation
					outputTransfStrategy
					outputTransformation
					enableInputStateTransformation
					inputStateTransfStrategy
					inputStateTransformation
					enableOutputStateTransformation
					outputStateTransfStrategy
					outputStateTransformation
					enableErrorHandling
					enableRetryPolicy
					retryInterval
					units
					maxAttemps
					backoffRate
					details {
						__typename
						... on StartBlock {
							exitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
						}
						... on EndBlock {
							params {
								expression
							}
						}
						... on GotoBlock {
							target {
								id
							}
						}
						... on ChoiceBlock {
							rules {
								exitPoint {
									index
									condition {
										expression
									}
									nextEntryPoints {
										parentBlock {
											id
										}
									}
								}
							}
							defaultExitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
						}
						... on ExecuteFlowBlock {
							flow {
								id
							}
							exitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
						}
						... on ForEachBlock {
							internalExitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
							exitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
						}
						... on KafkaBlock {
							brokers
							topic
							message
							messageType: type
							exitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
						}
						... on InvokeRestAPIBlock {
							authType
							user
							password
							clientId
							clientSecret
							oidcUrl
							url
							method
							body
							timeout: connectionTimeOut
							headers {
								key: variableDefinitionKey
								value
							}
							exitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
						}
						... on ParallelBlock {
							internalExitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
							exitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
						}
						... on TimerBlock {
							behavior
							seconds
							datetime
							enableExpressionL
							expression
							exitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
						}
						... on WaitForSignalBlock {
							type
							signalModule
							customFilter
							blocked
							exitPoint {
								nextEntryPoints {
									parentBlock {
										id
									}
								}
							}
						}
					}
					nextBlocks {
						id
					}
				}
			}
		}
	}
}
`,
		Variables: &__FlowInstanceQueryInput{
			FlowInstanceID: flowInstanceID,
		},
	}
	var err error

	var data FlowInstanceQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
